=begin comment

SaasPro

APIs to interface with communications tax engine.<br />The API requires Basic authentication.<br />Users with access to multiple clients must also set request header parameter for <code>client_id</code>.<br />Set <code>client_profile_id</code> to specify profile to be used for taxation.

The version of the OpenAPI document: v2

Generated by: https://openapi-generator.tech

=end comment

=cut

#
# NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
# Do not edit the class manually.
# Ref: https://openapi-generator.tech
#
package WWW::OpenAPIClient::LookupsApi;

require 5.6.0;
use strict;
use warnings;
use utf8; 
use Exporter;
use Carp qw( croak );
use Log::Any qw($log);

use WWW::OpenAPIClient::ApiClient;

use base "Class::Data::Inheritable";

__PACKAGE__->mk_classdata('method_documentation' => {});

sub new {
    my $class = shift;
    my $api_client;

    if ($_[0] && ref $_[0] && ref $_[0] eq 'WWW::OpenAPIClient::ApiClient' ) {
        $api_client = $_[0];
    } else {
        $api_client = WWW::OpenAPIClient::ApiClient->new(@_);
    }

    bless { api_client => $api_client }, $class;

}


#
# api_v2_afc_location_pcode_get
#
# Get location data associated with a PCode
# 
# @param int $pcode  (required)
{
    my $params = {
    'pcode' => {
        data_type => 'int',
        description => '',
        required => '1',
    },
    };
    __PACKAGE__->method_documentation->{ 'api_v2_afc_location_pcode_get' } = { 
        summary => 'Get location data associated with a PCode',
        params => $params,
        returns => 'PCodeLookupResult',
        };
}
# @return PCodeLookupResult
#
sub api_v2_afc_location_pcode_get {
    my ($self, %args) = @_;

    # verify the required parameter 'pcode' is set
    unless (exists $args{'pcode'}) {
      croak("Missing the required parameter 'pcode' when calling api_v2_afc_location_pcode_get");
    }

    # parse inputs
    my $_resource_path = '/api/v2/afc/location/{pcode}';

    my $_method = 'GET';
    my $query_params = {};
    my $header_params = {};
    my $form_params = {};

    # 'Accept' and 'Content-Type' header
    my $_header_accept = $self->{api_client}->select_header_accept('text/plain', 'application/json', 'text/json');
    if ($_header_accept) {
        $header_params->{'Accept'} = $_header_accept;
    }
    $header_params->{'Content-Type'} = $self->{api_client}->select_header_content_type();

    # path params
    if ( exists $args{'pcode'}) {
        my $_base_variable = "{" . "pcode" . "}";
        my $_base_value = $self->{api_client}->to_path_value($args{'pcode'});
        $_resource_path =~ s/$_base_variable/$_base_value/g;
    }

    my $_body_data;
    # authentication setting, if any
    my $auth_settings = [qw(Basic )];

    # make the API Call
    my $response = $self->{api_client}->call_api($_resource_path, $_method,
                                           $query_params, $form_params,
                                           $header_params, $_body_data, $auth_settings);
    if (!$response) {
        return;
    }
    my $_response_object = $self->{api_client}->deserialize('PCodeLookupResult', $response);
    return $_response_object;
}

#
# api_v2_afc_primary_p_code_get
#
# Get primary location data associated with a PCode
# 
# @param int $p_code  (required)
{
    my $params = {
    'p_code' => {
        data_type => 'int',
        description => '',
        required => '1',
    },
    };
    __PACKAGE__->method_documentation->{ 'api_v2_afc_primary_p_code_get' } = { 
        summary => 'Get primary location data associated with a PCode',
        params => $params,
        returns => 'PCodeLookupResult',
        };
}
# @return PCodeLookupResult
#
sub api_v2_afc_primary_p_code_get {
    my ($self, %args) = @_;

    # verify the required parameter 'p_code' is set
    unless (exists $args{'p_code'}) {
      croak("Missing the required parameter 'p_code' when calling api_v2_afc_primary_p_code_get");
    }

    # parse inputs
    my $_resource_path = '/api/v2/afc/primary/{pCode}';

    my $_method = 'GET';
    my $query_params = {};
    my $header_params = {};
    my $form_params = {};

    # 'Accept' and 'Content-Type' header
    my $_header_accept = $self->{api_client}->select_header_accept('text/plain', 'application/json', 'text/json');
    if ($_header_accept) {
        $header_params->{'Accept'} = $_header_accept;
    }
    $header_params->{'Content-Type'} = $self->{api_client}->select_header_content_type();

    # path params
    if ( exists $args{'p_code'}) {
        my $_base_variable = "{" . "pCode" . "}";
        my $_base_value = $self->{api_client}->to_path_value($args{'p_code'});
        $_resource_path =~ s/$_base_variable/$_base_value/g;
    }

    my $_body_data;
    # authentication setting, if any
    my $auth_settings = [qw(Basic )];

    # make the API Call
    my $response = $self->{api_client}->call_api($_resource_path, $_method,
                                           $query_params, $form_params,
                                           $header_params, $_body_data, $auth_settings);
    if (!$response) {
        return;
    }
    my $_response_object = $self->{api_client}->deserialize('PCodeLookupResult', $response);
    return $_response_object;
}

#
# api_v2_afc_serviceinfo_get
#
# Retrieves server time, service build version and engine version
# 
{
    my $params = {
    };
    __PACKAGE__->method_documentation->{ 'api_v2_afc_serviceinfo_get' } = { 
        summary => 'Retrieves server time, service build version and engine version',
        params => $params,
        returns => 'ServiceInfo',
        };
}
# @return ServiceInfo
#
sub api_v2_afc_serviceinfo_get {
    my ($self, %args) = @_;

    # parse inputs
    my $_resource_path = '/api/v2/afc/serviceinfo';

    my $_method = 'GET';
    my $query_params = {};
    my $header_params = {};
    my $form_params = {};

    # 'Accept' and 'Content-Type' header
    my $_header_accept = $self->{api_client}->select_header_accept('text/plain', 'application/json', 'text/json');
    if ($_header_accept) {
        $header_params->{'Accept'} = $_header_accept;
    }
    $header_params->{'Content-Type'} = $self->{api_client}->select_header_content_type();

    my $_body_data;
    # authentication setting, if any
    my $auth_settings = [qw(Basic )];

    # make the API Call
    my $response = $self->{api_client}->call_api($_resource_path, $_method,
                                           $query_params, $form_params,
                                           $header_params, $_body_data, $auth_settings);
    if (!$response) {
        return;
    }
    my $_response_object = $self->{api_client}->deserialize('ServiceInfo', $response);
    return $_response_object;
}

#
# api_v2_afc_taxtype_tax_type_get
#
# Get the tax information (description and category) for a tax type ID
# 
# @param string $tax_type Tax type ID for the tax type. (required)
{
    my $params = {
    'tax_type' => {
        data_type => 'string',
        description => 'Tax type ID for the tax type.',
        required => '1',
    },
    };
    __PACKAGE__->method_documentation->{ 'api_v2_afc_taxtype_tax_type_get' } = { 
        summary => 'Get the tax information (description and category) for a tax type ID',
        params => $params,
        returns => 'ARRAY[TaxTypeData]',
        };
}
# @return ARRAY[TaxTypeData]
#
sub api_v2_afc_taxtype_tax_type_get {
    my ($self, %args) = @_;

    # parse inputs
    my $_resource_path = '/api/v2/afc/taxtype/{taxType}';

    my $_method = 'GET';
    my $query_params = {};
    my $header_params = {};
    my $form_params = {};

    # 'Accept' and 'Content-Type' header
    my $_header_accept = $self->{api_client}->select_header_accept('text/plain', 'application/json', 'text/json');
    if ($_header_accept) {
        $header_params->{'Accept'} = $_header_accept;
    }
    $header_params->{'Content-Type'} = $self->{api_client}->select_header_content_type();

    # path params
    if ( exists $args{'tax_type'}) {
        my $_base_variable = "{" . "taxType" . "}";
        my $_base_value = $self->{api_client}->to_path_value($args{'tax_type'});
        $_resource_path =~ s/$_base_variable/$_base_value/g;
    }

    my $_body_data;
    # authentication setting, if any
    my $auth_settings = [qw(Basic )];

    # make the API Call
    my $response = $self->{api_client}->call_api($_resource_path, $_method,
                                           $query_params, $form_params,
                                           $header_params, $_body_data, $auth_settings);
    if (!$response) {
        return;
    }
    my $_response_object = $self->{api_client}->deserialize('ARRAY[TaxTypeData]', $response);
    return $_response_object;
}

#
# api_v2_afc_tspairs_get
#
# Get transaction/service pair information
# 
{
    my $params = {
    };
    __PACKAGE__->method_documentation->{ 'api_v2_afc_tspairs_get' } = { 
        summary => 'Get transaction/service pair information',
        params => $params,
        returns => 'ARRAY[TSPairData]',
        };
}
# @return ARRAY[TSPairData]
#
sub api_v2_afc_tspairs_get {
    my ($self, %args) = @_;

    # parse inputs
    my $_resource_path = '/api/v2/afc/tspairs';

    my $_method = 'GET';
    my $query_params = {};
    my $header_params = {};
    my $form_params = {};

    # 'Accept' and 'Content-Type' header
    my $_header_accept = $self->{api_client}->select_header_accept('text/plain', 'application/json', 'text/json');
    if ($_header_accept) {
        $header_params->{'Accept'} = $_header_accept;
    }
    $header_params->{'Content-Type'} = $self->{api_client}->select_header_content_type();

    my $_body_data;
    # authentication setting, if any
    my $auth_settings = [qw(Basic )];

    # make the API Call
    my $response = $self->{api_client}->call_api($_resource_path, $_method,
                                           $query_params, $form_params,
                                           $header_params, $_body_data, $auth_settings);
    if (!$response) {
        return;
    }
    my $_response_object = $self->{api_client}->deserialize('ARRAY[TSPairData]', $response);
    return $_response_object;
}

1;
