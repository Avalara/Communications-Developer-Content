=begin comment

SaasPro

APIs to interface with communications tax engine.<br />The API requires Basic authentication.<br />Users with access to multiple clients must also set request header parameter for <code>client_id</code>.<br />Set <code>client_profile_id</code> to specify profile to be used for taxation.

The version of the OpenAPI document: v2

Generated by: https://openapi-generator.tech

=end comment

=cut

#
# NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
# Do not edit the class manually.
# Ref: https://openapi-generator.tech
#
package WWW::OpenAPIClient::Object::LineItem;

require 5.6.0;
use strict;
use warnings;
use utf8;
use JSON qw(decode_json);
use Data::Dumper;
use Module::Runtime qw(use_module);
use Log::Any qw($log);
use Date::Parse;
use DateTime;

use WWW::OpenAPIClient::Object::KeyValuePair;
use WWW::OpenAPIClient::Object::Location;

use base ("Class::Accessor", "Class::Data::Inheritable");

#
#Data for an invoice or quote line item.
#
# NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech). Do not edit the class manually.
# REF: https://openapi-generator.tech
#

=begin comment

SaasPro

APIs to interface with communications tax engine.<br />The API requires Basic authentication.<br />Users with access to multiple clients must also set request header parameter for <code>client_id</code>.<br />Set <code>client_profile_id</code> to specify profile to be used for taxation.

The version of the OpenAPI document: v2

Generated by: https://openapi-generator.tech

=end comment

=cut

#
# NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
# Do not edit the class manually.
# Ref: https://openapi-generator.tech
#
__PACKAGE__->mk_classdata('attribute_map' => {});
__PACKAGE__->mk_classdata('openapi_types' => {});
__PACKAGE__->mk_classdata('method_documentation' => {}); 
__PACKAGE__->mk_classdata('class_documentation' => {});

# new plain object
sub new { 
    my ($class, %args) = @_; 

    my $self = bless {}, $class;

    $self->init(%args);
    
    return $self;
}

# initialize the object
sub init
{
    my ($self, %args) = @_;

    foreach my $attribute (keys %{$self->attribute_map}) {
        my $args_key = $self->attribute_map->{$attribute};
        $self->$attribute( $args{ $args_key } );
    }
}

# return perl hash
sub to_hash {
    my $self = shift;
    my $_hash = decode_json(JSON->new->convert_blessed->encode($self));

    return $_hash;
}

# used by JSON for serialization
sub TO_JSON { 
    my $self = shift;
    my $_data = {};
    foreach my $_key (keys %{$self->attribute_map}) {
        if (defined $self->{$_key}) {
            $_data->{$self->attribute_map->{$_key}} = $self->{$_key};
        }
    }

    return $_data;
}

# from Perl hashref
sub from_hash {
    my ($self, $hash) = @_;

    # loop through attributes and use openapi_types to deserialize the data
    while ( my ($_key, $_type) = each %{$self->openapi_types} ) {
        my $_json_attribute = $self->attribute_map->{$_key}; 
        if ($_type =~ /^array\[(.+)\]$/i) { # array
            my $_subclass = $1;
            my @_array = ();
            foreach my $_element (@{$hash->{$_json_attribute}}) {
                push @_array, $self->_deserialize($_subclass, $_element);
            }
            $self->{$_key} = \@_array;
        } elsif ($_type =~ /^hash\[string,(.+)\]$/i) { # hash
            my $_subclass = $1;
            my %_hash = ();
            while (my($_key, $_element) = each %{$hash->{$_json_attribute}}) {
                $_hash{$_key} = $self->_deserialize($_subclass, $_element);
            }
            $self->{$_key} = \%_hash;
        } elsif (exists $hash->{$_json_attribute}) { #hash(model), primitive, datetime
            $self->{$_key} = $self->_deserialize($_type, $hash->{$_json_attribute});
        } else {
            $log->debugf("Warning: %s (%s) does not exist in input hash\n", $_key, $_json_attribute);
        }
    }
  
    return $self;
}

# deserialize non-array data
sub _deserialize {
    my ($self, $type, $data) = @_;
    $log->debugf("deserializing %s with %s",Dumper($data), $type);

    if ($type eq 'DateTime') {
        return DateTime->from_epoch(epoch => str2time($data));
    } elsif ( grep( /^$type$/, ('int', 'double', 'string', 'boolean'))) {
        return $data;
    } else { # hash(model)
        my $_instance = eval "WWW::OpenAPIClient::Object::$type->new()";
        return $_instance->from_hash($data);
    }
}



__PACKAGE__->class_documentation({description => 'Data for an invoice or quote line item.',
                                  class => 'LineItem',
                                  required => [], # TODO
}                                 );

__PACKAGE__->method_documentation({
    'ref' => {
        datatype => 'string',
        base_name => 'ref',
        description => 'Reference ID for line item.',
        format => '',
        read_only => '',
            },
    'from' => {
        datatype => 'Location',
        base_name => 'from',
        description => '',
        format => '',
        read_only => '',
            },
    'to' => {
        datatype => 'Location',
        base_name => 'to',
        description => '',
        format => '',
        read_only => '',
            },
    'chg' => {
        datatype => 'double',
        base_name => 'chg',
        description => 'Charge amount.  Default: 0.',
        format => '',
        read_only => '',
            },
    'line' => {
        datatype => 'int',
        base_name => 'line',
        description => 'Number of lines.  Default: 0.',
        format => '',
        read_only => '',
            },
    'loc' => {
        datatype => 'int',
        base_name => 'loc',
        description => 'Number of locations.  Default: 0.',
        format => '',
        read_only => '',
            },
    'min' => {
        datatype => 'double',
        base_name => 'min',
        description => 'Number of minutes.  Default: 0.',
        format => '',
        read_only => '',
            },
    'sale' => {
        datatype => 'int',
        base_name => 'sale',
        description => '0 - Wholesale : Indicates that the item was sold to a wholeseller.  1 - Retail : Indicates that the item was sold to an end user - a retail sale.  2 - Consumed : Indicates that the item was consumed directly (SAU products only).  3 - VendorUse : Indicates that the item is subject to vendor use tax (SAU products only).',
        format => '',
        read_only => '',
            },
    'plsp' => {
        datatype => 'double',
        base_name => 'plsp',
        description => 'Split for private-line transactions.',
        format => '',
        read_only => '',
            },
    'incl' => {
        datatype => 'boolean',
        base_name => 'incl',
        description => 'Indicates if the charge for this line item is tax-inclusive.',
        format => '',
        read_only => '',
            },
    'pror' => {
        datatype => 'double',
        base_name => 'pror',
        description => 'For pro-rated tax calculations. Percentage to pro-rate.',
        format => '',
        read_only => '',
            },
    'proadj' => {
        datatype => 'int',
        base_name => 'proadj',
        description => 'For pro-rated credit or adjustment calculations.  0 &#x3D; default  1 &#x3D; do not return non-proratable fixed taxes in response  2 &#x3D; return non-proratable fixed taxes in response',
        format => '',
        read_only => '',
            },
    'tran' => {
        datatype => 'int',
        base_name => 'tran',
        description => 'Transaction type ID.',
        format => '',
        read_only => '',
            },
    'serv' => {
        datatype => 'int',
        base_name => 'serv',
        description => 'Service type ID.',
        format => '',
        read_only => '',
            },
    'dbt' => {
        datatype => 'boolean',
        base_name => 'dbt',
        description => 'Indicates if this line item is a debit card transaction.  Default: false.',
        format => '',
        read_only => '',
            },
    'adj' => {
        datatype => 'boolean',
        base_name => 'adj',
        description => 'Indicates if this line item is an adjustment.  Default: false.',
        format => '',
        read_only => '',
            },
    'adjm' => {
        datatype => 'int',
        base_name => 'adjm',
        description => 'Adjustment method.',
        format => '',
        read_only => '',
            },
    'disc' => {
        datatype => 'int',
        base_name => 'disc',
        description => 'Discount type for adjustments.',
        format => '',
        read_only => '',
            },
    'opt' => {
        datatype => 'ARRAY[KeyValuePair]',
        base_name => 'opt',
        description => 'Optional values for line item. Maximum of 5. Keys must be numeric from 5 to 10.',
        format => '',
        read_only => '',
            },
    'prop' => {
        datatype => 'int',
        base_name => 'prop',
        description => 'Attribute/property value for sales and use transaction/service pairs.',
        format => '',
        read_only => '',
            },
    'bill' => {
        datatype => 'Location',
        base_name => 'bill',
        description => '',
        format => '',
        read_only => '',
            },
    'cust' => {
        datatype => 'int',
        base_name => 'cust',
        description => 'Customer type.',
        format => '',
        read_only => '',
            },
    'lfln' => {
        datatype => 'boolean',
        base_name => 'lfln',
        description => 'Indicates if customer is a Lifeline participant.  Default: false.',
        format => '',
        read_only => '',
            },
    'date' => {
        datatype => 'DateTime',
        base_name => 'date',
        description => 'Invoice date.',
        format => '',
        read_only => '',
            },
    'qty' => {
        datatype => 'int',
        base_name => 'qty',
        description => 'Quantity to be applied to the item - taxation is equivalent to repeating the item the number of times of the quantity',
        format => '',
        read_only => '',
            },
    'glref' => {
        datatype => 'string',
        base_name => 'glref',
        description => 'General Ledger reference to be used in reporting',
        format => '',
        read_only => '',
            },
});

__PACKAGE__->openapi_types( {
    'ref' => 'string',
    'from' => 'Location',
    'to' => 'Location',
    'chg' => 'double',
    'line' => 'int',
    'loc' => 'int',
    'min' => 'double',
    'sale' => 'int',
    'plsp' => 'double',
    'incl' => 'boolean',
    'pror' => 'double',
    'proadj' => 'int',
    'tran' => 'int',
    'serv' => 'int',
    'dbt' => 'boolean',
    'adj' => 'boolean',
    'adjm' => 'int',
    'disc' => 'int',
    'opt' => 'ARRAY[KeyValuePair]',
    'prop' => 'int',
    'bill' => 'Location',
    'cust' => 'int',
    'lfln' => 'boolean',
    'date' => 'DateTime',
    'qty' => 'int',
    'glref' => 'string'
} );

__PACKAGE__->attribute_map( {
    'ref' => 'ref',
    'from' => 'from',
    'to' => 'to',
    'chg' => 'chg',
    'line' => 'line',
    'loc' => 'loc',
    'min' => 'min',
    'sale' => 'sale',
    'plsp' => 'plsp',
    'incl' => 'incl',
    'pror' => 'pror',
    'proadj' => 'proadj',
    'tran' => 'tran',
    'serv' => 'serv',
    'dbt' => 'dbt',
    'adj' => 'adj',
    'adjm' => 'adjm',
    'disc' => 'disc',
    'opt' => 'opt',
    'prop' => 'prop',
    'bill' => 'bill',
    'cust' => 'cust',
    'lfln' => 'lfln',
    'date' => 'date',
    'qty' => 'qty',
    'glref' => 'glref'
} );

__PACKAGE__->mk_accessors(keys %{__PACKAGE__->attribute_map});


1;
