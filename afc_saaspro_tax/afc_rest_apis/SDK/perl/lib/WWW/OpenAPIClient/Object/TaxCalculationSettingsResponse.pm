=begin comment

SaasPro

APIs to interface with communications tax engine.<br />The API requires Basic authentication.<br />Users with access to multiple clients must also set request header parameter for <code>client_id</code>.<br />Set <code>client_profile_id</code> to specify profile to be used for taxation.

The version of the OpenAPI document: v2

Generated by: https://openapi-generator.tech

=end comment

=cut

#
# NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
# Do not edit the class manually.
# Ref: https://openapi-generator.tech
#
package WWW::OpenAPIClient::Object::TaxCalculationSettingsResponse;

require 5.6.0;
use strict;
use warnings;
use utf8;
use JSON qw(decode_json);
use Data::Dumper;
use Module::Runtime qw(use_module);
use Log::Any qw($log);
use Date::Parse;
use DateTime;

use WWW::OpenAPIClient::Object::BundleConfig;
use WWW::OpenAPIClient::Object::Configuration;
use WWW::OpenAPIClient::Object::Error;
use WWW::OpenAPIClient::Object::ExclusionConfig;
use WWW::OpenAPIClient::Object::NexusConfig;
use WWW::OpenAPIClient::Object::OverrideConfig;
use WWW::OpenAPIClient::Object::Status;
use WWW::OpenAPIClient::Object::Warning;

use base ("Class::Accessor", "Class::Data::Inheritable");

#
#Data for an invoice or quote line item.
#
# NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech). Do not edit the class manually.
# REF: https://openapi-generator.tech
#

=begin comment

SaasPro

APIs to interface with communications tax engine.<br />The API requires Basic authentication.<br />Users with access to multiple clients must also set request header parameter for <code>client_id</code>.<br />Set <code>client_profile_id</code> to specify profile to be used for taxation.

The version of the OpenAPI document: v2

Generated by: https://openapi-generator.tech

=end comment

=cut

#
# NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
# Do not edit the class manually.
# Ref: https://openapi-generator.tech
#
__PACKAGE__->mk_classdata('attribute_map' => {});
__PACKAGE__->mk_classdata('openapi_types' => {});
__PACKAGE__->mk_classdata('method_documentation' => {}); 
__PACKAGE__->mk_classdata('class_documentation' => {});

# new plain object
sub new { 
    my ($class, %args) = @_; 

    my $self = bless {}, $class;

    $self->init(%args);
    
    return $self;
}

# initialize the object
sub init
{
    my ($self, %args) = @_;

    foreach my $attribute (keys %{$self->attribute_map}) {
        my $args_key = $self->attribute_map->{$attribute};
        $self->$attribute( $args{ $args_key } );
    }
}

# return perl hash
sub to_hash {
    my $self = shift;
    my $_hash = decode_json(JSON->new->convert_blessed->encode($self));

    return $_hash;
}

# used by JSON for serialization
sub TO_JSON { 
    my $self = shift;
    my $_data = {};
    foreach my $_key (keys %{$self->attribute_map}) {
        if (defined $self->{$_key}) {
            $_data->{$self->attribute_map->{$_key}} = $self->{$_key};
        }
    }

    return $_data;
}

# from Perl hashref
sub from_hash {
    my ($self, $hash) = @_;

    # loop through attributes and use openapi_types to deserialize the data
    while ( my ($_key, $_type) = each %{$self->openapi_types} ) {
        my $_json_attribute = $self->attribute_map->{$_key}; 
        if ($_type =~ /^array\[(.+)\]$/i) { # array
            my $_subclass = $1;
            my @_array = ();
            foreach my $_element (@{$hash->{$_json_attribute}}) {
                push @_array, $self->_deserialize($_subclass, $_element);
            }
            $self->{$_key} = \@_array;
        } elsif ($_type =~ /^hash\[string,(.+)\]$/i) { # hash
            my $_subclass = $1;
            my %_hash = ();
            while (my($_key, $_element) = each %{$hash->{$_json_attribute}}) {
                $_hash{$_key} = $self->_deserialize($_subclass, $_element);
            }
            $self->{$_key} = \%_hash;
        } elsif (exists $hash->{$_json_attribute}) { #hash(model), primitive, datetime
            $self->{$_key} = $self->_deserialize($_type, $hash->{$_json_attribute});
        } else {
            $log->debugf("Warning: %s (%s) does not exist in input hash\n", $_key, $_json_attribute);
        }
    }
  
    return $self;
}

# deserialize non-array data
sub _deserialize {
    my ($self, $type, $data) = @_;
    $log->debugf("deserializing %s with %s",Dumper($data), $type);

    if ($type eq 'DateTime') {
        return DateTime->from_epoch(epoch => str2time($data));
    } elsif ( grep( /^$type$/, ('int', 'double', 'string', 'boolean'))) {
        return $data;
    } else { # hash(model)
        my $_instance = eval "WWW::OpenAPIClient::Object::$type->new()";
        return $_instance->from_hash($data);
    }
}



__PACKAGE__->class_documentation({description => 'Data for an invoice or quote line item.',
                                  class => 'TaxCalculationSettingsResponse',
                                  required => [], # TODO
}                                 );

__PACKAGE__->method_documentation({
    'profile_config_id' => {
        datatype => 'int',
        base_name => 'ProfileConfigId',
        description => 'Unique profile configuration id associated with configuration item',
        format => '',
        read_only => '',
            },
    'profile_ids' => {
        datatype => 'ARRAY[int]',
        base_name => 'ProfileIds',
        description => 'Profile id&#39;s associated with configuration item',
        format => '',
        read_only => '',
            },
    'client_id' => {
        datatype => 'int',
        base_name => 'ClientId',
        description => 'Client id associated with configuration item',
        format => '',
        read_only => '',
            },
    'last_update_by' => {
        datatype => 'string',
        base_name => 'LastUpdateBy',
        description => 'User who last updated the configuration item',
        format => '',
        read_only => '',
            },
    'active' => {
        datatype => 'boolean',
        base_name => 'Active',
        description => 'Active status of the configuration item',
        format => '',
        read_only => '',
            },
    'settings' => {
        datatype => 'Configuration',
        base_name => 'Settings',
        description => '',
        format => '',
        read_only => '',
            },
    'exclusions' => {
        datatype => 'ARRAY[ExclusionConfig]',
        base_name => 'Exclusions',
        description => 'Exclusions (as applicable)',
        format => '',
        read_only => '',
            },
    'bundles' => {
        datatype => 'ARRAY[BundleConfig]',
        base_name => 'Bundles',
        description => 'Bundles (as applicable)',
        format => '',
        read_only => '',
            },
    'nexus' => {
        datatype => 'ARRAY[NexusConfig]',
        base_name => 'Nexus',
        description => 'Nexus (as applicable)',
        format => '',
        read_only => '',
            },
    'overrides' => {
        datatype => 'OverrideConfig',
        base_name => 'Overrides',
        description => '',
        format => '',
        read_only => '',
            },
    'description' => {
        datatype => 'string',
        base_name => 'Description',
        description => 'Description associated with this item',
        format => '',
        read_only => '',
            },
    'error' => {
        datatype => 'string',
        base_name => 'Error',
        description => 'Error information.',
        format => '',
        read_only => '',
            },
    'item_type' => {
        datatype => 'string',
        base_name => 'ItemType',
        description => 'Item Type  Examples:    Configuration, Bundle, Exclusion, Override',
        format => '',
        read_only => '',
            },
    'errors' => {
        datatype => 'ARRAY[Error]',
        base_name => 'Errors',
        description => 'Error information.',
        format => '',
        read_only => '',
            },
    'warnings' => {
        datatype => 'ARRAY[Warning]',
        base_name => 'Warnings',
        description => 'Warning information.',
        format => '',
        read_only => '',
            },
    'status' => {
        datatype => 'ARRAY[Status]',
        base_name => 'Status',
        description => 'Status information.',
        format => '',
        read_only => '',
            },
});

__PACKAGE__->openapi_types( {
    'profile_config_id' => 'int',
    'profile_ids' => 'ARRAY[int]',
    'client_id' => 'int',
    'last_update_by' => 'string',
    'active' => 'boolean',
    'settings' => 'Configuration',
    'exclusions' => 'ARRAY[ExclusionConfig]',
    'bundles' => 'ARRAY[BundleConfig]',
    'nexus' => 'ARRAY[NexusConfig]',
    'overrides' => 'OverrideConfig',
    'description' => 'string',
    'error' => 'string',
    'item_type' => 'string',
    'errors' => 'ARRAY[Error]',
    'warnings' => 'ARRAY[Warning]',
    'status' => 'ARRAY[Status]'
} );

__PACKAGE__->attribute_map( {
    'profile_config_id' => 'ProfileConfigId',
    'profile_ids' => 'ProfileIds',
    'client_id' => 'ClientId',
    'last_update_by' => 'LastUpdateBy',
    'active' => 'Active',
    'settings' => 'Settings',
    'exclusions' => 'Exclusions',
    'bundles' => 'Bundles',
    'nexus' => 'Nexus',
    'overrides' => 'Overrides',
    'description' => 'Description',
    'error' => 'Error',
    'item_type' => 'ItemType',
    'errors' => 'Errors',
    'warnings' => 'Warnings',
    'status' => 'Status'
} );

__PACKAGE__->mk_accessors(keys %{__PACKAGE__->attribute_map});


1;
