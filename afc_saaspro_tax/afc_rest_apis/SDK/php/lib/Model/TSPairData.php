<?php
/**
 * TsPairData
 *
 * PHP version 5
 *
 * @category Class
 * @package  OpenAPI\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * SaasPro
 *
 * APIs to interface with communications tax engine.<br />The API requires Basic authentication.<br />Users with access to multiple clients must also set request header parameter for <code>client_id</code>.<br />Set <code>client_profile_id</code> to specify profile to be used for taxation.<br /><br />Effective January 1st, 2022 all Avalara products will be enforcing TLS 1.2 server-side. Please ensure that your implementation sets a minimal of TLS 1.2 encryption when making web requests to Avalara APIs.
 *
 * The version of the OpenAPI document: v2
 * 
 * Generated by: https://openapi-generator.tech
 * OpenAPI Generator version: 4.3.1
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace OpenAPI\Client\Model;

use \ArrayAccess;
use \OpenAPI\Client\ObjectSerializer;

/**
 * TsPairData Class Doc Comment
 *
 * @category Class
 * @package  OpenAPI\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */
class TsPairData implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = 'TsPairData';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'transaction_type' => 'int',
        'service_type' => 'int',
        'market_type' => 'int',
        'interface_type' => 'int',
        'input_type' => 'int',
        'is_bundle' => 'bool',
        'transaction_description' => 'string',
        'service_description' => 'string',
        'ts_pair_description' => 'string'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPIFormats = [
        'transaction_type' => 'int32',
        'service_type' => 'int32',
        'market_type' => 'int32',
        'interface_type' => 'int32',
        'input_type' => 'int32',
        'is_bundle' => null,
        'transaction_description' => null,
        'service_description' => null,
        'ts_pair_description' => null
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'transaction_type' => 'TransactionType',
        'service_type' => 'ServiceType',
        'market_type' => 'MarketType',
        'interface_type' => 'InterfaceType',
        'input_type' => 'InputType',
        'is_bundle' => 'IsBundle',
        'transaction_description' => 'TransactionDescription',
        'service_description' => 'ServiceDescription',
        'ts_pair_description' => 'TSPairDescription'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'transaction_type' => 'setTransactionType',
        'service_type' => 'setServiceType',
        'market_type' => 'setMarketType',
        'interface_type' => 'setInterfaceType',
        'input_type' => 'setInputType',
        'is_bundle' => 'setIsBundle',
        'transaction_description' => 'setTransactionDescription',
        'service_description' => 'setServiceDescription',
        'ts_pair_description' => 'setTsPairDescription'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'transaction_type' => 'getTransactionType',
        'service_type' => 'getServiceType',
        'market_type' => 'getMarketType',
        'interface_type' => 'getInterfaceType',
        'input_type' => 'getInputType',
        'is_bundle' => 'getIsBundle',
        'transaction_description' => 'getTransactionDescription',
        'service_description' => 'getServiceDescription',
        'ts_pair_description' => 'getTsPairDescription'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }

    

    

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['transaction_type'] = isset($data['transaction_type']) ? $data['transaction_type'] : null;
        $this->container['service_type'] = isset($data['service_type']) ? $data['service_type'] : null;
        $this->container['market_type'] = isset($data['market_type']) ? $data['market_type'] : null;
        $this->container['interface_type'] = isset($data['interface_type']) ? $data['interface_type'] : null;
        $this->container['input_type'] = isset($data['input_type']) ? $data['input_type'] : null;
        $this->container['is_bundle'] = isset($data['is_bundle']) ? $data['is_bundle'] : null;
        $this->container['transaction_description'] = isset($data['transaction_description']) ? $data['transaction_description'] : null;
        $this->container['service_description'] = isset($data['service_description']) ? $data['service_description'] : null;
        $this->container['ts_pair_description'] = isset($data['ts_pair_description']) ? $data['ts_pair_description'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets transaction_type
     *
     * @return int|null
     */
    public function getTransactionType()
    {
        return $this->container['transaction_type'];
    }

    /**
     * Sets transaction_type
     *
     * @param int|null $transaction_type transaction_type
     *
     * @return $this
     */
    public function setTransactionType($transaction_type)
    {
        $this->container['transaction_type'] = $transaction_type;

        return $this;
    }

    /**
     * Gets service_type
     *
     * @return int|null
     */
    public function getServiceType()
    {
        return $this->container['service_type'];
    }

    /**
     * Sets service_type
     *
     * @param int|null $service_type service_type
     *
     * @return $this
     */
    public function setServiceType($service_type)
    {
        $this->container['service_type'] = $service_type;

        return $this;
    }

    /**
     * Gets market_type
     *
     * @return int|null
     */
    public function getMarketType()
    {
        return $this->container['market_type'];
    }

    /**
     * Sets market_type
     *
     * @param int|null $market_type market_type
     *
     * @return $this
     */
    public function setMarketType($market_type)
    {
        $this->container['market_type'] = $market_type;

        return $this;
    }

    /**
     * Gets interface_type
     *
     * @return int|null
     */
    public function getInterfaceType()
    {
        return $this->container['interface_type'];
    }

    /**
     * Sets interface_type
     *
     * @param int|null $interface_type interface_type
     *
     * @return $this
     */
    public function setInterfaceType($interface_type)
    {
        $this->container['interface_type'] = $interface_type;

        return $this;
    }

    /**
     * Gets input_type
     *
     * @return int|null
     */
    public function getInputType()
    {
        return $this->container['input_type'];
    }

    /**
     * Sets input_type
     *
     * @param int|null $input_type input_type
     *
     * @return $this
     */
    public function setInputType($input_type)
    {
        $this->container['input_type'] = $input_type;

        return $this;
    }

    /**
     * Gets is_bundle
     *
     * @return bool|null
     */
    public function getIsBundle()
    {
        return $this->container['is_bundle'];
    }

    /**
     * Sets is_bundle
     *
     * @param bool|null $is_bundle is_bundle
     *
     * @return $this
     */
    public function setIsBundle($is_bundle)
    {
        $this->container['is_bundle'] = $is_bundle;

        return $this;
    }

    /**
     * Gets transaction_description
     *
     * @return string|null
     */
    public function getTransactionDescription()
    {
        return $this->container['transaction_description'];
    }

    /**
     * Sets transaction_description
     *
     * @param string|null $transaction_description transaction_description
     *
     * @return $this
     */
    public function setTransactionDescription($transaction_description)
    {
        $this->container['transaction_description'] = $transaction_description;

        return $this;
    }

    /**
     * Gets service_description
     *
     * @return string|null
     */
    public function getServiceDescription()
    {
        return $this->container['service_description'];
    }

    /**
     * Sets service_description
     *
     * @param string|null $service_description service_description
     *
     * @return $this
     */
    public function setServiceDescription($service_description)
    {
        $this->container['service_description'] = $service_description;

        return $this;
    }

    /**
     * Gets ts_pair_description
     *
     * @return string|null
     */
    public function getTsPairDescription()
    {
        return $this->container['ts_pair_description'];
    }

    /**
     * Sets ts_pair_description
     *
     * @param string|null $ts_pair_description ts_pair_description
     *
     * @return $this
     */
    public function setTsPairDescription($ts_pair_description)
    {
        $this->container['ts_pair_description'] = $ts_pair_description;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue()
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


