<?php
/**
 * PCodeLookupRequest
 *
 * PHP version 5
 *
 * @category Class
 * @package  OpenAPI\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * SaasPro
 *
 * APIs to interface with communications tax engine.<br />The API requires Basic authentication.<br />Users with access to multiple clients must also set request header parameter for <code>client_id</code>.<br />Set <code>client_profile_id</code> to specify profile to be used for taxation.<br /><br />Effective January 1st, 2022 all Avalara products will be enforcing TLS 1.2 server-side. Please ensure that your implementation sets a minimal of TLS 1.2 encryption when making web requests to Avalara APIs.
 *
 * The version of the OpenAPI document: v2
 * 
 * Generated by: https://openapi-generator.tech
 * OpenAPI Generator version: 4.3.1
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace OpenAPI\Client\Model;

use \ArrayAccess;
use \OpenAPI\Client\ObjectSerializer;

/**
 * PCodeLookupRequest Class Doc Comment
 *
 * @category Class
 * @package  OpenAPI\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */
class PCodeLookupRequest implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = 'PCodeLookupRequest';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'country_iso' => 'string',
        'state' => 'string',
        'county' => 'string',
        'city' => 'string',
        'zip_code' => 'string',
        'best_match' => 'bool',
        'limit_results' => 'int',
        'npa_nxx' => 'string',
        'fips' => 'string'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPIFormats = [
        'country_iso' => null,
        'state' => null,
        'county' => null,
        'city' => null,
        'zip_code' => null,
        'best_match' => null,
        'limit_results' => 'int32',
        'npa_nxx' => null,
        'fips' => null
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'country_iso' => 'CountryIso',
        'state' => 'State',
        'county' => 'County',
        'city' => 'City',
        'zip_code' => 'ZipCode',
        'best_match' => 'BestMatch',
        'limit_results' => 'LimitResults',
        'npa_nxx' => 'NpaNxx',
        'fips' => 'Fips'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'country_iso' => 'setCountryIso',
        'state' => 'setState',
        'county' => 'setCounty',
        'city' => 'setCity',
        'zip_code' => 'setZipCode',
        'best_match' => 'setBestMatch',
        'limit_results' => 'setLimitResults',
        'npa_nxx' => 'setNpaNxx',
        'fips' => 'setFips'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'country_iso' => 'getCountryIso',
        'state' => 'getState',
        'county' => 'getCounty',
        'city' => 'getCity',
        'zip_code' => 'getZipCode',
        'best_match' => 'getBestMatch',
        'limit_results' => 'getLimitResults',
        'npa_nxx' => 'getNpaNxx',
        'fips' => 'getFips'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }

    

    

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['country_iso'] = isset($data['country_iso']) ? $data['country_iso'] : null;
        $this->container['state'] = isset($data['state']) ? $data['state'] : null;
        $this->container['county'] = isset($data['county']) ? $data['county'] : null;
        $this->container['city'] = isset($data['city']) ? $data['city'] : null;
        $this->container['zip_code'] = isset($data['zip_code']) ? $data['zip_code'] : null;
        $this->container['best_match'] = isset($data['best_match']) ? $data['best_match'] : null;
        $this->container['limit_results'] = isset($data['limit_results']) ? $data['limit_results'] : null;
        $this->container['npa_nxx'] = isset($data['npa_nxx']) ? $data['npa_nxx'] : null;
        $this->container['fips'] = isset($data['fips']) ? $data['fips'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets country_iso
     *
     * @return string|null
     */
    public function getCountryIso()
    {
        return $this->container['country_iso'];
    }

    /**
     * Sets country_iso
     *
     * @param string|null $country_iso country_iso
     *
     * @return $this
     */
    public function setCountryIso($country_iso)
    {
        $this->container['country_iso'] = $country_iso;

        return $this;
    }

    /**
     * Gets state
     *
     * @return string|null
     */
    public function getState()
    {
        return $this->container['state'];
    }

    /**
     * Sets state
     *
     * @param string|null $state state
     *
     * @return $this
     */
    public function setState($state)
    {
        $this->container['state'] = $state;

        return $this;
    }

    /**
     * Gets county
     *
     * @return string|null
     */
    public function getCounty()
    {
        return $this->container['county'];
    }

    /**
     * Sets county
     *
     * @param string|null $county county
     *
     * @return $this
     */
    public function setCounty($county)
    {
        $this->container['county'] = $county;

        return $this;
    }

    /**
     * Gets city
     *
     * @return string|null
     */
    public function getCity()
    {
        return $this->container['city'];
    }

    /**
     * Sets city
     *
     * @param string|null $city city
     *
     * @return $this
     */
    public function setCity($city)
    {
        $this->container['city'] = $city;

        return $this;
    }

    /**
     * Gets zip_code
     *
     * @return string|null
     */
    public function getZipCode()
    {
        return $this->container['zip_code'];
    }

    /**
     * Sets zip_code
     *
     * @param string|null $zip_code zip_code
     *
     * @return $this
     */
    public function setZipCode($zip_code)
    {
        $this->container['zip_code'] = $zip_code;

        return $this;
    }

    /**
     * Gets best_match
     *
     * @return bool|null
     */
    public function getBestMatch()
    {
        return $this->container['best_match'];
    }

    /**
     * Sets best_match
     *
     * @param bool|null $best_match best_match
     *
     * @return $this
     */
    public function setBestMatch($best_match)
    {
        $this->container['best_match'] = $best_match;

        return $this;
    }

    /**
     * Gets limit_results
     *
     * @return int|null
     */
    public function getLimitResults()
    {
        return $this->container['limit_results'];
    }

    /**
     * Sets limit_results
     *
     * @param int|null $limit_results limit_results
     *
     * @return $this
     */
    public function setLimitResults($limit_results)
    {
        $this->container['limit_results'] = $limit_results;

        return $this;
    }

    /**
     * Gets npa_nxx
     *
     * @return string|null
     */
    public function getNpaNxx()
    {
        return $this->container['npa_nxx'];
    }

    /**
     * Sets npa_nxx
     *
     * @param string|null $npa_nxx npa_nxx
     *
     * @return $this
     */
    public function setNpaNxx($npa_nxx)
    {
        $this->container['npa_nxx'] = $npa_nxx;

        return $this;
    }

    /**
     * Gets fips
     *
     * @return string|null
     */
    public function getFips()
    {
        return $this->container['fips'];
    }

    /**
     * Sets fips
     *
     * @param string|null $fips fips
     *
     * @return $this
     */
    public function setFips($fips)
    {
        $this->container['fips'] = $fips;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue()
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


