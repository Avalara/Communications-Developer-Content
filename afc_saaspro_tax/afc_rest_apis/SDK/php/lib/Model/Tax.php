<?php
/**
 * Tax
 *
 * PHP version 5
 *
 * @category Class
 * @package  OpenAPI\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * SaasPro
 *
 * APIs to interface with communications tax engine.<br />The API requires Basic authentication.<br />Users with access to multiple clients must also set request header parameter for <code>client_id</code>.<br />Set <code>client_profile_id</code> to specify profile to be used for taxation.<br /><br />Effective January 1st, 2022 all Avalara products will be enforcing TLS 1.2 server-side. Please ensure that your implementation sets a minimal of TLS 1.2 encryption when making web requests to Avalara APIs.
 *
 * The version of the OpenAPI document: v2
 * 
 * Generated by: https://openapi-generator.tech
 * OpenAPI Generator version: 4.3.1
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace OpenAPI\Client\Model;

use \ArrayAccess;
use \OpenAPI\Client\ObjectSerializer;

/**
 * Tax Class Doc Comment
 *
 * @category Class
 * @description Tax data for individual line item.
 * @package  OpenAPI\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */
class Tax implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = 'Tax';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'bill' => 'bool',
        'cmpl' => 'bool',
        'tm' => 'double',
        'calc' => 'int',
        'cat' => 'string',
        'cid' => 'int',
        'name' => 'string',
        'exm' => 'double',
        'lns' => 'int',
        'min' => 'double',
        'pcd' => 'int',
        'taxpcd' => 'int',
        'rate' => 'double',
        'sur' => 'bool',
        'tax' => 'double',
        'lvl' => 'int',
        'tid' => 'int',
        'usexm' => 'bool',
        'notax' => 'bool',
        'trans' => 'int',
        'svc' => 'int',
        'chg' => 'double'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPIFormats = [
        'bill' => null,
        'cmpl' => null,
        'tm' => 'double',
        'calc' => 'int32',
        'cat' => null,
        'cid' => 'int32',
        'name' => null,
        'exm' => 'double',
        'lns' => 'int32',
        'min' => 'double',
        'pcd' => 'int32',
        'taxpcd' => 'int32',
        'rate' => 'double',
        'sur' => null,
        'tax' => 'double',
        'lvl' => 'int32',
        'tid' => 'int32',
        'usexm' => null,
        'notax' => null,
        'trans' => 'int32',
        'svc' => 'int32',
        'chg' => 'double'
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'bill' => 'bill',
        'cmpl' => 'cmpl',
        'tm' => 'tm',
        'calc' => 'calc',
        'cat' => 'cat',
        'cid' => 'cid',
        'name' => 'name',
        'exm' => 'exm',
        'lns' => 'lns',
        'min' => 'min',
        'pcd' => 'pcd',
        'taxpcd' => 'taxpcd',
        'rate' => 'rate',
        'sur' => 'sur',
        'tax' => 'tax',
        'lvl' => 'lvl',
        'tid' => 'tid',
        'usexm' => 'usexm',
        'notax' => 'notax',
        'trans' => 'trans',
        'svc' => 'svc',
        'chg' => 'chg'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'bill' => 'setBill',
        'cmpl' => 'setCmpl',
        'tm' => 'setTm',
        'calc' => 'setCalc',
        'cat' => 'setCat',
        'cid' => 'setCid',
        'name' => 'setName',
        'exm' => 'setExm',
        'lns' => 'setLns',
        'min' => 'setMin',
        'pcd' => 'setPcd',
        'taxpcd' => 'setTaxpcd',
        'rate' => 'setRate',
        'sur' => 'setSur',
        'tax' => 'setTax',
        'lvl' => 'setLvl',
        'tid' => 'setTid',
        'usexm' => 'setUsexm',
        'notax' => 'setNotax',
        'trans' => 'setTrans',
        'svc' => 'setSvc',
        'chg' => 'setChg'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'bill' => 'getBill',
        'cmpl' => 'getCmpl',
        'tm' => 'getTm',
        'calc' => 'getCalc',
        'cat' => 'getCat',
        'cid' => 'getCid',
        'name' => 'getName',
        'exm' => 'getExm',
        'lns' => 'getLns',
        'min' => 'getMin',
        'pcd' => 'getPcd',
        'taxpcd' => 'getTaxpcd',
        'rate' => 'getRate',
        'sur' => 'getSur',
        'tax' => 'getTax',
        'lvl' => 'getLvl',
        'tid' => 'getTid',
        'usexm' => 'getUsexm',
        'notax' => 'getNotax',
        'trans' => 'getTrans',
        'svc' => 'getSvc',
        'chg' => 'getChg'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }

    

    

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['bill'] = isset($data['bill']) ? $data['bill'] : null;
        $this->container['cmpl'] = isset($data['cmpl']) ? $data['cmpl'] : null;
        $this->container['tm'] = isset($data['tm']) ? $data['tm'] : null;
        $this->container['calc'] = isset($data['calc']) ? $data['calc'] : null;
        $this->container['cat'] = isset($data['cat']) ? $data['cat'] : null;
        $this->container['cid'] = isset($data['cid']) ? $data['cid'] : null;
        $this->container['name'] = isset($data['name']) ? $data['name'] : null;
        $this->container['exm'] = isset($data['exm']) ? $data['exm'] : null;
        $this->container['lns'] = isset($data['lns']) ? $data['lns'] : null;
        $this->container['min'] = isset($data['min']) ? $data['min'] : null;
        $this->container['pcd'] = isset($data['pcd']) ? $data['pcd'] : null;
        $this->container['taxpcd'] = isset($data['taxpcd']) ? $data['taxpcd'] : null;
        $this->container['rate'] = isset($data['rate']) ? $data['rate'] : null;
        $this->container['sur'] = isset($data['sur']) ? $data['sur'] : null;
        $this->container['tax'] = isset($data['tax']) ? $data['tax'] : null;
        $this->container['lvl'] = isset($data['lvl']) ? $data['lvl'] : null;
        $this->container['tid'] = isset($data['tid']) ? $data['tid'] : null;
        $this->container['usexm'] = isset($data['usexm']) ? $data['usexm'] : null;
        $this->container['notax'] = isset($data['notax']) ? $data['notax'] : null;
        $this->container['trans'] = isset($data['trans']) ? $data['trans'] : null;
        $this->container['svc'] = isset($data['svc']) ? $data['svc'] : null;
        $this->container['chg'] = isset($data['chg']) ? $data['chg'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets bill
     *
     * @return bool|null
     */
    public function getBill()
    {
        return $this->container['bill'];
    }

    /**
     * Sets bill
     *
     * @param bool|null $bill Indicates if tax is billable to customer.
     *
     * @return $this
     */
    public function setBill($bill)
    {
        $this->container['bill'] = $bill;

        return $this;
    }

    /**
     * Gets cmpl
     *
     * @return bool|null
     */
    public function getCmpl()
    {
        return $this->container['cmpl'];
    }

    /**
     * Sets cmpl
     *
     * @param bool|null $cmpl Indicates if the tax is to be reported to jurisdiction.
     *
     * @return $this
     */
    public function setCmpl($cmpl)
    {
        $this->container['cmpl'] = $cmpl;

        return $this;
    }

    /**
     * Gets tm
     *
     * @return double|null
     */
    public function getTm()
    {
        return $this->container['tm'];
    }

    /**
     * Sets tm
     *
     * @param double|null $tm Taxable measure.
     *
     * @return $this
     */
    public function setTm($tm)
    {
        $this->container['tm'] = $tm;

        return $this;
    }

    /**
     * Gets calc
     *
     * @return int|null
     */
    public function getCalc()
    {
        return $this->container['calc'];
    }

    /**
     * Sets calc
     *
     * @param int|null $calc Calculation type.
     *
     * @return $this
     */
    public function setCalc($calc)
    {
        $this->container['calc'] = $calc;

        return $this;
    }

    /**
     * Gets cat
     *
     * @return string|null
     */
    public function getCat()
    {
        return $this->container['cat'];
    }

    /**
     * Sets cat
     *
     * @param string|null $cat Tax category name.
     *
     * @return $this
     */
    public function setCat($cat)
    {
        $this->container['cat'] = $cat;

        return $this;
    }

    /**
     * Gets cid
     *
     * @return int|null
     */
    public function getCid()
    {
        return $this->container['cid'];
    }

    /**
     * Sets cid
     *
     * @param int|null $cid Tax category ID.
     *
     * @return $this
     */
    public function setCid($cid)
    {
        $this->container['cid'] = $cid;

        return $this;
    }

    /**
     * Gets name
     *
     * @return string|null
     */
    public function getName()
    {
        return $this->container['name'];
    }

    /**
     * Sets name
     *
     * @param string|null $name Tax name.
     *
     * @return $this
     */
    public function setName($name)
    {
        $this->container['name'] = $name;

        return $this;
    }

    /**
     * Gets exm
     *
     * @return double|null
     */
    public function getExm()
    {
        return $this->container['exm'];
    }

    /**
     * Sets exm
     *
     * @param double|null $exm Exempt sale amount.
     *
     * @return $this
     */
    public function setExm($exm)
    {
        $this->container['exm'] = $exm;

        return $this;
    }

    /**
     * Gets lns
     *
     * @return int|null
     */
    public function getLns()
    {
        return $this->container['lns'];
    }

    /**
     * Sets lns
     *
     * @param int|null $lns Lines.
     *
     * @return $this
     */
    public function setLns($lns)
    {
        $this->container['lns'] = $lns;

        return $this;
    }

    /**
     * Gets min
     *
     * @return double|null
     */
    public function getMin()
    {
        return $this->container['min'];
    }

    /**
     * Sets min
     *
     * @param double|null $min Minutes.
     *
     * @return $this
     */
    public function setMin($min)
    {
        $this->container['min'] = $min;

        return $this;
    }

    /**
     * Gets pcd
     *
     * @return int|null
     */
    public function getPcd()
    {
        return $this->container['pcd'];
    }

    /**
     * Sets pcd
     *
     * @param int|null $pcd PCode for reporting jurisdiction.
     *
     * @return $this
     */
    public function setPcd($pcd)
    {
        $this->container['pcd'] = $pcd;

        return $this;
    }

    /**
     * Gets taxpcd
     *
     * @return int|null
     */
    public function getTaxpcd()
    {
        return $this->container['taxpcd'];
    }

    /**
     * Sets taxpcd
     *
     * @param int|null $taxpcd PCode for taxing jurisdiction.  Only returned if return extended tax data flag is true
     *
     * @return $this
     */
    public function setTaxpcd($taxpcd)
    {
        $this->container['taxpcd'] = $taxpcd;

        return $this;
    }

    /**
     * Gets rate
     *
     * @return double|null
     */
    public function getRate()
    {
        return $this->container['rate'];
    }

    /**
     * Sets rate
     *
     * @param double|null $rate Tax rate.
     *
     * @return $this
     */
    public function setRate($rate)
    {
        $this->container['rate'] = $rate;

        return $this;
    }

    /**
     * Gets sur
     *
     * @return bool|null
     */
    public function getSur()
    {
        return $this->container['sur'];
    }

    /**
     * Sets sur
     *
     * @param bool|null $sur Indicates if this tax is a surcharge.
     *
     * @return $this
     */
    public function setSur($sur)
    {
        $this->container['sur'] = $sur;

        return $this;
    }

    /**
     * Gets tax
     *
     * @return double|null
     */
    public function getTax()
    {
        return $this->container['tax'];
    }

    /**
     * Sets tax
     *
     * @param double|null $tax Tax amount.
     *
     * @return $this
     */
    public function setTax($tax)
    {
        $this->container['tax'] = $tax;

        return $this;
    }

    /**
     * Gets lvl
     *
     * @return int|null
     */
    public function getLvl()
    {
        return $this->container['lvl'];
    }

    /**
     * Sets lvl
     *
     * @param int|null $lvl Tax level ID.
     *
     * @return $this
     */
    public function setLvl($lvl)
    {
        $this->container['lvl'] = $lvl;

        return $this;
    }

    /**
     * Gets tid
     *
     * @return int|null
     */
    public function getTid()
    {
        return $this->container['tid'];
    }

    /**
     * Sets tid
     *
     * @param int|null $tid Tax type ID.
     *
     * @return $this
     */
    public function setTid($tid)
    {
        $this->container['tid'] = $tid;

        return $this;
    }

    /**
     * Gets usexm
     *
     * @return bool|null
     */
    public function getUsexm()
    {
        return $this->container['usexm'];
    }

    /**
     * Sets usexm
     *
     * @param bool|null $usexm Flag indicating if tax was user exempted  Only returned if return extended tax data flag is true
     *
     * @return $this
     */
    public function setUsexm($usexm)
    {
        $this->container['usexm'] = $usexm;

        return $this;
    }

    /**
     * Gets notax
     *
     * @return bool|null
     */
    public function getNotax()
    {
        return $this->container['notax'];
    }

    /**
     * Sets notax
     *
     * @param bool|null $notax Flag indicating the item is a no tax entry  There were no taxes generated, this entry is to convey back the taxing jurisdiction that was used in the response  Only returned if return extended tax data flag is true
     *
     * @return $this
     */
    public function setNotax($notax)
    {
        $this->container['notax'] = $notax;

        return $this;
    }

    /**
     * Gets trans
     *
     * @return int|null
     */
    public function getTrans()
    {
        return $this->container['trans'];
    }

    /**
     * Sets trans
     *
     * @param int|null $trans Transaction type used to calculate tax  For bundles will be specific bundled item transaction type  Only returned if return extended tax data flag is true
     *
     * @return $this
     */
    public function setTrans($trans)
    {
        $this->container['trans'] = $trans;

        return $this;
    }

    /**
     * Gets svc
     *
     * @return int|null
     */
    public function getSvc()
    {
        return $this->container['svc'];
    }

    /**
     * Sets svc
     *
     * @param int|null $svc Service type used to calculate tax  For bundles will be specific bundled item service type  Only returned if return extended tax data flag is true
     *
     * @return $this
     */
    public function setSvc($svc)
    {
        $this->container['svc'] = $svc;

        return $this;
    }

    /**
     * Gets chg
     *
     * @return double|null
     */
    public function getChg()
    {
        return $this->container['chg'];
    }

    /**
     * Sets chg
     *
     * @param double|null $chg Charge used to calculate tax  For bundles will be the percentage of charge applied to bundled item  For tax inclusive calls will be the calculated charge  Only returned if return extended tax data flag is true
     *
     * @return $this
     */
    public function setChg($chg)
    {
        $this->container['chg'] = $chg;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue()
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


