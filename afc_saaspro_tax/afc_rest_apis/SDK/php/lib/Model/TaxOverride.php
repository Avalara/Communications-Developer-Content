<?php
/**
 * TaxOverride
 *
 * PHP version 5
 *
 * @category Class
 * @package  OpenAPI\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * SaasPro
 *
 * APIs to interface with communications tax engine.<br />The API requires Basic authentication.<br />Users with access to multiple clients must also set request header parameter for <code>client_id</code>.<br />Set <code>client_profile_id</code> to specify profile to be used for taxation.<br /><br />Effective January 1st, 2022 all Avalara products will be enforcing TLS 1.2 server-side. Please ensure that your implementation sets a minimal of TLS 1.2 encryption when making web requests to Avalara APIs.
 *
 * The version of the OpenAPI document: v2
 * 
 * Generated by: https://openapi-generator.tech
 * OpenAPI Generator version: 4.3.1
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace OpenAPI\Client\Model;

use \ArrayAccess;
use \OpenAPI\Client\ObjectSerializer;

/**
 * TaxOverride Class Doc Comment
 *
 * @category Class
 * @description Tax rate override information.
 * @package  OpenAPI\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */
class TaxOverride implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = 'TaxOverride';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'loc' => '\OpenAPI\Client\Model\Location',
        'scp' => 'int',
        'tid' => 'int',
        'lvl' => 'int',
        'lvl_exm' => 'bool',
        'brkt' => '\OpenAPI\Client\Model\TaxBracket[]'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPIFormats = [
        'loc' => null,
        'scp' => 'int32',
        'tid' => 'int32',
        'lvl' => 'int32',
        'lvl_exm' => null,
        'brkt' => null
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'loc' => 'loc',
        'scp' => 'scp',
        'tid' => 'tid',
        'lvl' => 'lvl',
        'lvl_exm' => 'lvlExm',
        'brkt' => 'brkt'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'loc' => 'setLoc',
        'scp' => 'setScp',
        'tid' => 'setTid',
        'lvl' => 'setLvl',
        'lvl_exm' => 'setLvlExm',
        'brkt' => 'setBrkt'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'loc' => 'getLoc',
        'scp' => 'getScp',
        'tid' => 'getTid',
        'lvl' => 'getLvl',
        'lvl_exm' => 'getLvlExm',
        'brkt' => 'getBrkt'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }

    

    

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['loc'] = isset($data['loc']) ? $data['loc'] : null;
        $this->container['scp'] = isset($data['scp']) ? $data['scp'] : null;
        $this->container['tid'] = isset($data['tid']) ? $data['tid'] : null;
        $this->container['lvl'] = isset($data['lvl']) ? $data['lvl'] : null;
        $this->container['lvl_exm'] = isset($data['lvl_exm']) ? $data['lvl_exm'] : null;
        $this->container['brkt'] = isset($data['brkt']) ? $data['brkt'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets loc
     *
     * @return \OpenAPI\Client\Model\Location|null
     */
    public function getLoc()
    {
        return $this->container['loc'];
    }

    /**
     * Sets loc
     *
     * @param \OpenAPI\Client\Model\Location|null $loc loc
     *
     * @return $this
     */
    public function setLoc($loc)
    {
        $this->container['loc'] = $loc;

        return $this;
    }

    /**
     * Gets scp
     *
     * @return int|null
     */
    public function getScp()
    {
        return $this->container['scp'];
    }

    /**
     * Sets scp
     *
     * @param int|null $scp Scope for override. 0 = Country, 1 = State, 2 = County, 3 = City.
     *
     * @return $this
     */
    public function setScp($scp)
    {
        $this->container['scp'] = $scp;

        return $this;
    }

    /**
     * Gets tid
     *
     * @return int|null
     */
    public function getTid()
    {
        return $this->container['tid'];
    }

    /**
     * Sets tid
     *
     * @param int|null $tid Tax type ID.
     *
     * @return $this
     */
    public function setTid($tid)
    {
        $this->container['tid'] = $tid;

        return $this;
    }

    /**
     * Gets lvl
     *
     * @return int|null
     */
    public function getLvl()
    {
        return $this->container['lvl'];
    }

    /**
     * Sets lvl
     *
     * @param int|null $lvl Tax level ID. 0 = Federal, 1 = State, 2 = County, 3 = City.
     *
     * @return $this
     */
    public function setLvl($lvl)
    {
        $this->container['lvl'] = $lvl;

        return $this;
    }

    /**
     * Gets lvl_exm
     *
     * @return bool|null
     */
    public function getLvlExm()
    {
        return $this->container['lvl_exm'];
    }

    /**
     * Sets lvl_exm
     *
     * @param bool|null $lvl_exm Indicates if the tax can be exempted using level exemptions.
     *
     * @return $this
     */
    public function setLvlExm($lvl_exm)
    {
        $this->container['lvl_exm'] = $lvl_exm;

        return $this;
    }

    /**
     * Gets brkt
     *
     * @return \OpenAPI\Client\Model\TaxBracket[]|null
     */
    public function getBrkt()
    {
        return $this->container['brkt'];
    }

    /**
     * Sets brkt
     *
     * @param \OpenAPI\Client\Model\TaxBracket[]|null $brkt Tax rate/bracket information.
     *
     * @return $this
     */
    public function setBrkt($brkt)
    {
        $this->container['brkt'] = $brkt;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue()
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


