<?php
/**
 * InvoiceResult
 *
 * PHP version 5
 *
 * @category Class
 * @package  OpenAPI\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * SaasPro
 *
 * APIs to interface with communications tax engine.<br />The API requires Basic authentication.<br />Users with access to multiple clients must also set request header parameter for <code>client_id</code>.<br />Set <code>client_profile_id</code> to specify profile to be used for taxation.<br /><br />Effective January 1st, 2022 all Avalara products will be enforcing TLS 1.2 server-side. Please ensure that your implementation sets a minimal of TLS 1.2 encryption when making web requests to Avalara APIs.
 *
 * The version of the OpenAPI document: v2
 * 
 * Generated by: https://openapi-generator.tech
 * OpenAPI Generator version: 4.3.1
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace OpenAPI\Client\Model;

use \ArrayAccess;
use \OpenAPI\Client\ObjectSerializer;

/**
 * InvoiceResult Class Doc Comment
 *
 * @category Class
 * @description Tax calculation results for an invoice.
 * @package  OpenAPI\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */
class InvoiceResult implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = 'InvoiceResult';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'doc' => 'string',
        'itms' => '\OpenAPI\Client\Model\LineItemResult[]',
        'summ' => '\OpenAPI\Client\Model\SummarizedTax[]',
        'err' => '\OpenAPI\Client\Model\Error[]',
        'incrf' => '\OpenAPI\Client\Model\ReportingInformation'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPIFormats = [
        'doc' => null,
        'itms' => null,
        'summ' => null,
        'err' => null,
        'incrf' => null
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'doc' => 'doc',
        'itms' => 'itms',
        'summ' => 'summ',
        'err' => 'err',
        'incrf' => 'incrf'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'doc' => 'setDoc',
        'itms' => 'setItms',
        'summ' => 'setSumm',
        'err' => 'setErr',
        'incrf' => 'setIncrf'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'doc' => 'getDoc',
        'itms' => 'getItms',
        'summ' => 'getSumm',
        'err' => 'getErr',
        'incrf' => 'getIncrf'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }

    

    

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['doc'] = isset($data['doc']) ? $data['doc'] : null;
        $this->container['itms'] = isset($data['itms']) ? $data['itms'] : null;
        $this->container['summ'] = isset($data['summ']) ? $data['summ'] : null;
        $this->container['err'] = isset($data['err']) ? $data['err'] : null;
        $this->container['incrf'] = isset($data['incrf']) ? $data['incrf'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets doc
     *
     * @return string|null
     */
    public function getDoc()
    {
        return $this->container['doc'];
    }

    /**
     * Sets doc
     *
     * @param string|null $doc Document number for invoice.
     *
     * @return $this
     */
    public function setDoc($doc)
    {
        $this->container['doc'] = $doc;

        return $this;
    }

    /**
     * Gets itms
     *
     * @return \OpenAPI\Client\Model\LineItemResult[]|null
     */
    public function getItms()
    {
        return $this->container['itms'];
    }

    /**
     * Sets itms
     *
     * @param \OpenAPI\Client\Model\LineItemResult[]|null $itms Individual tax calculation results for each line item.
     *
     * @return $this
     */
    public function setItms($itms)
    {
        $this->container['itms'] = $itms;

        return $this;
    }

    /**
     * Gets summ
     *
     * @return \OpenAPI\Client\Model\SummarizedTax[]|null
     */
    public function getSumm()
    {
        return $this->container['summ'];
    }

    /**
     * Sets summ
     *
     * @param \OpenAPI\Client\Model\SummarizedTax[]|null $summ Summarized taxes for invoice.
     *
     * @return $this
     */
    public function setSumm($summ)
    {
        $this->container['summ'] = $summ;

        return $this;
    }

    /**
     * Gets err
     *
     * @return \OpenAPI\Client\Model\Error[]|null
     */
    public function getErr()
    {
        return $this->container['err'];
    }

    /**
     * Sets err
     *
     * @param \OpenAPI\Client\Model\Error[]|null $err Error description (as applicable).
     *
     * @return $this
     */
    public function setErr($err)
    {
        $this->container['err'] = $err;

        return $this;
    }

    /**
     * Gets incrf
     *
     * @return \OpenAPI\Client\Model\ReportingInformation|null
     */
    public function getIncrf()
    {
        return $this->container['incrf'];
    }

    /**
     * Sets incrf
     *
     * @param \OpenAPI\Client\Model\ReportingInformation|null $incrf incrf
     *
     * @return $this
     */
    public function setIncrf($incrf)
    {
        $this->container['incrf'] = $incrf;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue()
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


