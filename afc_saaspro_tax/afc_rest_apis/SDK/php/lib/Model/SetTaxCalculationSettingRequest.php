<?php
/**
 * SetTaxCalculationSettingRequest
 *
 * PHP version 5
 *
 * @category Class
 * @package  OpenAPI\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * SaasPro
 *
 * APIs to interface with communications tax engine.<br />The API requires Basic authentication.<br />Users with access to multiple clients must also set request header parameter for <code>client_id</code>.<br />Set <code>client_profile_id</code> to specify profile to be used for taxation.
 *
 * The version of the OpenAPI document: v2
 * 
 * Generated by: https://openapi-generator.tech
 * OpenAPI Generator version: 4.3.0-SNAPSHOT
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace OpenAPI\Client\Model;

use \ArrayAccess;
use \OpenAPI\Client\ObjectSerializer;

/**
 * SetTaxCalculationSettingRequest Class Doc Comment
 *
 * @category Class
 * @description Data for an invoice or quote line item.
 * @package  OpenAPI\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */
class SetTaxCalculationSettingRequest implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = 'SetTaxCalculationSettingRequest';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'profile_config_id' => 'int',
        'link_profile_ids' => 'int[]',
        'unlink_profile_ids' => 'int[]',
        'client_id' => 'int',
        'deactivate' => 'bool',
        'description' => 'string',
        'replace_existing_links' => 'bool',
        'settings' => 'Configuration',
        'exclusions' => '\OpenAPI\Client\Model\ExclusionConfig[]',
        'bundles' => '\OpenAPI\Client\Model\BundleConfig[]',
        'nexus' => '\OpenAPI\Client\Model\NexusConfig[]',
        'overrides' => 'string[]'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPIFormats = [
        'profile_config_id' => 'int64',
        'link_profile_ids' => 'int32',
        'unlink_profile_ids' => 'int32',
        'client_id' => 'int32',
        'deactivate' => null,
        'description' => null,
        'replace_existing_links' => null,
        'settings' => null,
        'exclusions' => null,
        'bundles' => null,
        'nexus' => null,
        'overrides' => null
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'profile_config_id' => 'ProfileConfigId',
        'link_profile_ids' => 'LinkProfileIds',
        'unlink_profile_ids' => 'UnlinkProfileIds',
        'client_id' => 'ClientId',
        'deactivate' => 'Deactivate',
        'description' => 'Description',
        'replace_existing_links' => 'ReplaceExistingLinks',
        'settings' => 'Settings',
        'exclusions' => 'Exclusions',
        'bundles' => 'Bundles',
        'nexus' => 'Nexus',
        'overrides' => 'Overrides'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'profile_config_id' => 'setProfileConfigId',
        'link_profile_ids' => 'setLinkProfileIds',
        'unlink_profile_ids' => 'setUnlinkProfileIds',
        'client_id' => 'setClientId',
        'deactivate' => 'setDeactivate',
        'description' => 'setDescription',
        'replace_existing_links' => 'setReplaceExistingLinks',
        'settings' => 'setSettings',
        'exclusions' => 'setExclusions',
        'bundles' => 'setBundles',
        'nexus' => 'setNexus',
        'overrides' => 'setOverrides'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'profile_config_id' => 'getProfileConfigId',
        'link_profile_ids' => 'getLinkProfileIds',
        'unlink_profile_ids' => 'getUnlinkProfileIds',
        'client_id' => 'getClientId',
        'deactivate' => 'getDeactivate',
        'description' => 'getDescription',
        'replace_existing_links' => 'getReplaceExistingLinks',
        'settings' => 'getSettings',
        'exclusions' => 'getExclusions',
        'bundles' => 'getBundles',
        'nexus' => 'getNexus',
        'overrides' => 'getOverrides'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }

    

    

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['profile_config_id'] = isset($data['profile_config_id']) ? $data['profile_config_id'] : null;
        $this->container['link_profile_ids'] = isset($data['link_profile_ids']) ? $data['link_profile_ids'] : null;
        $this->container['unlink_profile_ids'] = isset($data['unlink_profile_ids']) ? $data['unlink_profile_ids'] : null;
        $this->container['client_id'] = isset($data['client_id']) ? $data['client_id'] : null;
        $this->container['deactivate'] = isset($data['deactivate']) ? $data['deactivate'] : null;
        $this->container['description'] = isset($data['description']) ? $data['description'] : null;
        $this->container['replace_existing_links'] = isset($data['replace_existing_links']) ? $data['replace_existing_links'] : null;
        $this->container['settings'] = isset($data['settings']) ? $data['settings'] : null;
        $this->container['exclusions'] = isset($data['exclusions']) ? $data['exclusions'] : null;
        $this->container['bundles'] = isset($data['bundles']) ? $data['bundles'] : null;
        $this->container['nexus'] = isset($data['nexus']) ? $data['nexus'] : null;
        $this->container['overrides'] = isset($data['overrides']) ? $data['overrides'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets profile_config_id
     *
     * @return int|null
     */
    public function getProfileConfigId()
    {
        return $this->container['profile_config_id'];
    }

    /**
     * Sets profile_config_id
     *
     * @param int|null $profile_config_id Profile configuration id to be used when updating an existing profile  Use null for new configuration
     *
     * @return $this
     */
    public function setProfileConfigId($profile_config_id)
    {
        $this->container['profile_config_id'] = $profile_config_id;

        return $this;
    }

    /**
     * Gets link_profile_ids
     *
     * @return int[]|null
     */
    public function getLinkProfileIds()
    {
        return $this->container['link_profile_ids'];
    }

    /**
     * Sets link_profile_ids
     *
     * @param int[]|null $link_profile_ids Profile(s) to be added to configuration  Leave null to not change profiles associated with configuration settings
     *
     * @return $this
     */
    public function setLinkProfileIds($link_profile_ids)
    {
        $this->container['link_profile_ids'] = $link_profile_ids;

        return $this;
    }

    /**
     * Gets unlink_profile_ids
     *
     * @return int[]|null
     */
    public function getUnlinkProfileIds()
    {
        return $this->container['unlink_profile_ids'];
    }

    /**
     * Sets unlink_profile_ids
     *
     * @param int[]|null $unlink_profile_ids Profile(s) to be added to configuration  Leave null to not change profiles associated with configuration settings
     *
     * @return $this
     */
    public function setUnlinkProfileIds($unlink_profile_ids)
    {
        $this->container['unlink_profile_ids'] = $unlink_profile_ids;

        return $this;
    }

    /**
     * Gets client_id
     *
     * @return int|null
     */
    public function getClientId()
    {
        return $this->container['client_id'];
    }

    /**
     * Sets client_id
     *
     * @param int|null $client_id Client id associated with profile(s) to be fetched  Null value will use client id submitting the request or default client id as applicable
     *
     * @return $this
     */
    public function setClientId($client_id)
    {
        $this->container['client_id'] = $client_id;

        return $this;
    }

    /**
     * Gets deactivate
     *
     * @return bool|null
     */
    public function getDeactivate()
    {
        return $this->container['deactivate'];
    }

    /**
     * Sets deactivate
     *
     * @param bool|null $deactivate True = Deactivate the configuration  Requires ProfileConfigId to be provided and valid.  Automatically removes any profile mappings associated with the configuration.
     *
     * @return $this
     */
    public function setDeactivate($deactivate)
    {
        $this->container['deactivate'] = $deactivate;

        return $this;
    }

    /**
     * Gets description
     *
     * @return string|null
     */
    public function getDescription()
    {
        return $this->container['description'];
    }

    /**
     * Sets description
     *
     * @param string|null $description Description to be applied to requested configuration
     *
     * @return $this
     */
    public function setDescription($description)
    {
        $this->container['description'] = $description;

        return $this;
    }

    /**
     * Gets replace_existing_links
     *
     * @return bool|null
     */
    public function getReplaceExistingLinks()
    {
        return $this->container['replace_existing_links'];
    }

    /**
     * Sets replace_existing_links
     *
     * @param bool|null $replace_existing_links Flag indicating existing configuration links to profile should be replaced  This only applies when one or more profiles have been specified to be linked.   - If true, mapping conflicts will be resolved by removing other links.   - If false, mapping conflicts will cause the request to fail with an error returned.
     *
     * @return $this
     */
    public function setReplaceExistingLinks($replace_existing_links)
    {
        $this->container['replace_existing_links'] = $replace_existing_links;

        return $this;
    }

    /**
     * Gets settings
     *
     * @return Configuration|null
     */
    public function getSettings()
    {
        return $this->container['settings'];
    }

    /**
     * Sets settings
     *
     * @param Configuration|null $settings Configuration settings (required)
     *
     * @return $this
     */
    public function setSettings($settings)
    {
        $this->container['settings'] = $settings;

        return $this;
    }

    /**
     * Gets exclusions
     *
     * @return \OpenAPI\Client\Model\ExclusionConfig[]|null
     */
    public function getExclusions()
    {
        return $this->container['exclusions'];
    }

    /**
     * Sets exclusions
     *
     * @param \OpenAPI\Client\Model\ExclusionConfig[]|null $exclusions List of exclusions
     *
     * @return $this
     */
    public function setExclusions($exclusions)
    {
        $this->container['exclusions'] = $exclusions;

        return $this;
    }

    /**
     * Gets bundles
     *
     * @return \OpenAPI\Client\Model\BundleConfig[]|null
     */
    public function getBundles()
    {
        return $this->container['bundles'];
    }

    /**
     * Sets bundles
     *
     * @param \OpenAPI\Client\Model\BundleConfig[]|null $bundles List of bundles
     *
     * @return $this
     */
    public function setBundles($bundles)
    {
        $this->container['bundles'] = $bundles;

        return $this;
    }

    /**
     * Gets nexus
     *
     * @return \OpenAPI\Client\Model\NexusConfig[]|null
     */
    public function getNexus()
    {
        return $this->container['nexus'];
    }

    /**
     * Sets nexus
     *
     * @param \OpenAPI\Client\Model\NexusConfig[]|null $nexus List of nexus
     *
     * @return $this
     */
    public function setNexus($nexus)
    {
        $this->container['nexus'] = $nexus;

        return $this;
    }

    /**
     * Gets overrides
     *
     * @return string[]|null
     */
    public function getOverrides()
    {
        return $this->container['overrides'];
    }

    /**
     * Sets overrides
     *
     * @param string[]|null $overrides Overrides
     *
     * @return $this
     */
    public function setOverrides($overrides)
    {
        $this->container['overrides'] = $overrides;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue()
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


