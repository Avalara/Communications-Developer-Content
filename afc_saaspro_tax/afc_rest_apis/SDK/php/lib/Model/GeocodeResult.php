<?php
/**
 * GeocodeResult
 *
 * PHP version 5
 *
 * @category Class
 * @package  OpenAPI\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * SaasPro
 *
 * APIs to interface with communications tax engine.<br />The API requires Basic authentication.<br />Users with access to multiple clients must also set request header parameter for <code>client_id</code>.<br />Set <code>client_profile_id</code> to specify profile to be used for taxation.<br /><br />Effective January 1st, 2022 all Avalara products will be enforcing TLS 1.2 server-side. Please ensure that your implementation sets a minimal of TLS 1.2 encryption when making web requests to Avalara APIs.
 *
 * The version of the OpenAPI document: v2
 * 
 * Generated by: https://openapi-generator.tech
 * OpenAPI Generator version: 4.3.1
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace OpenAPI\Client\Model;

use \ArrayAccess;
use \OpenAPI\Client\ObjectSerializer;

/**
 * GeocodeResult Class Doc Comment
 *
 * @category Class
 * @description Results for geocoding request.
 * @package  OpenAPI\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */
class GeocodeResult implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = 'GeocodeResult';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'ref' => 'string',
        'cass' => '\OpenAPI\Client\Model\Address',
        'c_blk' => 'int',
        'c_trc' => 'int',
        'cnty' => 'string',
        'feat' => 'int',
        'fips' => 'string',
        'inc' => 'bool',
        'jur' => 'string',
        'lat' => 'double',
        'long' => 'double',
        'pcd' => 'int',
        'scr' => 'double',
        'err' => 'string'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPIFormats = [
        'ref' => null,
        'cass' => null,
        'c_blk' => 'int32',
        'c_trc' => 'int32',
        'cnty' => null,
        'feat' => 'int32',
        'fips' => null,
        'inc' => null,
        'jur' => null,
        'lat' => 'double',
        'long' => 'double',
        'pcd' => 'int32',
        'scr' => 'double',
        'err' => null
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'ref' => 'ref',
        'cass' => 'cass',
        'c_blk' => 'cBlk',
        'c_trc' => 'cTrc',
        'cnty' => 'cnty',
        'feat' => 'feat',
        'fips' => 'fips',
        'inc' => 'inc',
        'jur' => 'jur',
        'lat' => 'lat',
        'long' => 'long',
        'pcd' => 'pcd',
        'scr' => 'scr',
        'err' => 'err'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'ref' => 'setRef',
        'cass' => 'setCass',
        'c_blk' => 'setCBlk',
        'c_trc' => 'setCTrc',
        'cnty' => 'setCnty',
        'feat' => 'setFeat',
        'fips' => 'setFips',
        'inc' => 'setInc',
        'jur' => 'setJur',
        'lat' => 'setLat',
        'long' => 'setLong',
        'pcd' => 'setPcd',
        'scr' => 'setScr',
        'err' => 'setErr'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'ref' => 'getRef',
        'cass' => 'getCass',
        'c_blk' => 'getCBlk',
        'c_trc' => 'getCTrc',
        'cnty' => 'getCnty',
        'feat' => 'getFeat',
        'fips' => 'getFips',
        'inc' => 'getInc',
        'jur' => 'getJur',
        'lat' => 'getLat',
        'long' => 'getLong',
        'pcd' => 'getPcd',
        'scr' => 'getScr',
        'err' => 'getErr'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }

    

    

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['ref'] = isset($data['ref']) ? $data['ref'] : null;
        $this->container['cass'] = isset($data['cass']) ? $data['cass'] : null;
        $this->container['c_blk'] = isset($data['c_blk']) ? $data['c_blk'] : null;
        $this->container['c_trc'] = isset($data['c_trc']) ? $data['c_trc'] : null;
        $this->container['cnty'] = isset($data['cnty']) ? $data['cnty'] : null;
        $this->container['feat'] = isset($data['feat']) ? $data['feat'] : null;
        $this->container['fips'] = isset($data['fips']) ? $data['fips'] : null;
        $this->container['inc'] = isset($data['inc']) ? $data['inc'] : null;
        $this->container['jur'] = isset($data['jur']) ? $data['jur'] : null;
        $this->container['lat'] = isset($data['lat']) ? $data['lat'] : null;
        $this->container['long'] = isset($data['long']) ? $data['long'] : null;
        $this->container['pcd'] = isset($data['pcd']) ? $data['pcd'] : null;
        $this->container['scr'] = isset($data['scr']) ? $data['scr'] : null;
        $this->container['err'] = isset($data['err']) ? $data['err'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets ref
     *
     * @return string|null
     */
    public function getRef()
    {
        return $this->container['ref'];
    }

    /**
     * Sets ref
     *
     * @param string|null $ref Reference Id from geocode request input.
     *
     * @return $this
     */
    public function setRef($ref)
    {
        $this->container['ref'] = $ref;

        return $this;
    }

    /**
     * Gets cass
     *
     * @return \OpenAPI\Client\Model\Address|null
     */
    public function getCass()
    {
        return $this->container['cass'];
    }

    /**
     * Sets cass
     *
     * @param \OpenAPI\Client\Model\Address|null $cass cass
     *
     * @return $this
     */
    public function setCass($cass)
    {
        $this->container['cass'] = $cass;

        return $this;
    }

    /**
     * Gets c_blk
     *
     * @return int|null
     */
    public function getCBlk()
    {
        return $this->container['c_blk'];
    }

    /**
     * Sets c_blk
     *
     * @param int|null $c_blk Census block.
     *
     * @return $this
     */
    public function setCBlk($c_blk)
    {
        $this->container['c_blk'] = $c_blk;

        return $this;
    }

    /**
     * Gets c_trc
     *
     * @return int|null
     */
    public function getCTrc()
    {
        return $this->container['c_trc'];
    }

    /**
     * Sets c_trc
     *
     * @param int|null $c_trc Census tract.
     *
     * @return $this
     */
    public function setCTrc($c_trc)
    {
        $this->container['c_trc'] = $c_trc;

        return $this;
    }

    /**
     * Gets cnty
     *
     * @return string|null
     */
    public function getCnty()
    {
        return $this->container['cnty'];
    }

    /**
     * Sets cnty
     *
     * @param string|null $cnty County
     *
     * @return $this
     */
    public function setCnty($cnty)
    {
        $this->container['cnty'] = $cnty;

        return $this;
    }

    /**
     * Gets feat
     *
     * @return int|null
     */
    public function getFeat()
    {
        return $this->container['feat'];
    }

    /**
     * Sets feat
     *
     * @param int|null $feat Feature ID.
     *
     * @return $this
     */
    public function setFeat($feat)
    {
        $this->container['feat'] = $feat;

        return $this;
    }

    /**
     * Gets fips
     *
     * @return string|null
     */
    public function getFips()
    {
        return $this->container['fips'];
    }

    /**
     * Sets fips
     *
     * @param string|null $fips FIPS Code.
     *
     * @return $this
     */
    public function setFips($fips)
    {
        $this->container['fips'] = $fips;

        return $this;
    }

    /**
     * Gets inc
     *
     * @return bool|null
     */
    public function getInc()
    {
        return $this->container['inc'];
    }

    /**
     * Sets inc
     *
     * @param bool|null $inc Indicates if address is within city limits.
     *
     * @return $this
     */
    public function setInc($inc)
    {
        $this->container['inc'] = $inc;

        return $this;
    }

    /**
     * Gets jur
     *
     * @return string|null
     */
    public function getJur()
    {
        return $this->container['jur'];
    }

    /**
     * Sets jur
     *
     * @param string|null $jur Tax jurisdiction name.
     *
     * @return $this
     */
    public function setJur($jur)
    {
        $this->container['jur'] = $jur;

        return $this;
    }

    /**
     * Gets lat
     *
     * @return double|null
     */
    public function getLat()
    {
        return $this->container['lat'];
    }

    /**
     * Sets lat
     *
     * @param double|null $lat Latitude.
     *
     * @return $this
     */
    public function setLat($lat)
    {
        $this->container['lat'] = $lat;

        return $this;
    }

    /**
     * Gets long
     *
     * @return double|null
     */
    public function getLong()
    {
        return $this->container['long'];
    }

    /**
     * Sets long
     *
     * @param double|null $long Longitude.
     *
     * @return $this
     */
    public function setLong($long)
    {
        $this->container['long'] = $long;

        return $this;
    }

    /**
     * Gets pcd
     *
     * @return int|null
     */
    public function getPcd()
    {
        return $this->container['pcd'];
    }

    /**
     * Sets pcd
     *
     * @param int|null $pcd PCode for tax jurisdiction.
     *
     * @return $this
     */
    public function setPcd($pcd)
    {
        $this->container['pcd'] = $pcd;

        return $this;
    }

    /**
     * Gets scr
     *
     * @return double|null
     */
    public function getScr()
    {
        return $this->container['scr'];
    }

    /**
     * Sets scr
     *
     * @param double|null $scr Score indicating accuracy of address match in mapping database.
     *
     * @return $this
     */
    public function setScr($scr)
    {
        $this->container['scr'] = $scr;

        return $this;
    }

    /**
     * Gets err
     *
     * @return string|null
     */
    public function getErr()
    {
        return $this->container['err'];
    }

    /**
     * Sets err
     *
     * @param string|null $err Error message.
     *
     * @return $this
     */
    public function setErr($err)
    {
        $this->container['err'] = $err;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue()
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


