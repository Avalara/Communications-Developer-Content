<?php
/**
 * Invoice
 *
 * PHP version 5
 *
 * @category Class
 * @package  OpenAPI\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * SaasPro
 *
 * APIs to interface with communications tax engine.<br />The API requires Basic authentication.<br />Users with access to multiple clients must also set request header parameter for <code>client_id</code>.<br />Set <code>client_profile_id</code> to specify profile to be used for taxation.<br /><br />Effective January 1st, 2022 all Avalara products will be enforcing TLS 1.2 server-side. Please ensure that your implementation sets a minimal of TLS 1.2 encryption when making web requests to Avalara APIs.
 *
 * The version of the OpenAPI document: v2
 * 
 * Generated by: https://openapi-generator.tech
 * OpenAPI Generator version: 4.3.1
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace OpenAPI\Client\Model;

use \ArrayAccess;
use \OpenAPI\Client\ObjectSerializer;

/**
 * Invoice Class Doc Comment
 *
 * @category Class
 * @description Contains information about an invoice or quote.
 * @package  OpenAPI\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */
class Invoice implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = 'Invoice';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'doc' => 'string',
        'cmmt' => 'bool',
        'bill' => '\OpenAPI\Client\Model\Location',
        'cust' => 'int',
        'lfln' => 'bool',
        'date' => '\DateTime',
        'exms' => '\OpenAPI\Client\Model\TaxExemption[]',
        'itms' => '\OpenAPI\Client\Model\LineItem[]',
        'invm' => 'bool',
        'dtl' => 'bool',
        'summ' => 'bool',
        'opt' => '\OpenAPI\Client\Model\KeyValuePair[]',
        'acct' => 'string',
        'custref' => 'string',
        'invn' => 'string',
        'bcyc' => 'string',
        'bpd' => '\OpenAPI\Client\Model\BillingPeriod',
        'ccycd' => 'string'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPIFormats = [
        'doc' => null,
        'cmmt' => null,
        'bill' => null,
        'cust' => 'int32',
        'lfln' => null,
        'date' => 'date-time',
        'exms' => null,
        'itms' => null,
        'invm' => null,
        'dtl' => null,
        'summ' => null,
        'opt' => null,
        'acct' => null,
        'custref' => null,
        'invn' => null,
        'bcyc' => null,
        'bpd' => null,
        'ccycd' => null
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'doc' => 'doc',
        'cmmt' => 'cmmt',
        'bill' => 'bill',
        'cust' => 'cust',
        'lfln' => 'lfln',
        'date' => 'date',
        'exms' => 'exms',
        'itms' => 'itms',
        'invm' => 'invm',
        'dtl' => 'dtl',
        'summ' => 'summ',
        'opt' => 'opt',
        'acct' => 'acct',
        'custref' => 'custref',
        'invn' => 'invn',
        'bcyc' => 'bcyc',
        'bpd' => 'bpd',
        'ccycd' => 'ccycd'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'doc' => 'setDoc',
        'cmmt' => 'setCmmt',
        'bill' => 'setBill',
        'cust' => 'setCust',
        'lfln' => 'setLfln',
        'date' => 'setDate',
        'exms' => 'setExms',
        'itms' => 'setItms',
        'invm' => 'setInvm',
        'dtl' => 'setDtl',
        'summ' => 'setSumm',
        'opt' => 'setOpt',
        'acct' => 'setAcct',
        'custref' => 'setCustref',
        'invn' => 'setInvn',
        'bcyc' => 'setBcyc',
        'bpd' => 'setBpd',
        'ccycd' => 'setCcycd'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'doc' => 'getDoc',
        'cmmt' => 'getCmmt',
        'bill' => 'getBill',
        'cust' => 'getCust',
        'lfln' => 'getLfln',
        'date' => 'getDate',
        'exms' => 'getExms',
        'itms' => 'getItms',
        'invm' => 'getInvm',
        'dtl' => 'getDtl',
        'summ' => 'getSumm',
        'opt' => 'getOpt',
        'acct' => 'getAcct',
        'custref' => 'getCustref',
        'invn' => 'getInvn',
        'bcyc' => 'getBcyc',
        'bpd' => 'getBpd',
        'ccycd' => 'getCcycd'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }

    

    

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['doc'] = isset($data['doc']) ? $data['doc'] : null;
        $this->container['cmmt'] = isset($data['cmmt']) ? $data['cmmt'] : null;
        $this->container['bill'] = isset($data['bill']) ? $data['bill'] : null;
        $this->container['cust'] = isset($data['cust']) ? $data['cust'] : null;
        $this->container['lfln'] = isset($data['lfln']) ? $data['lfln'] : null;
        $this->container['date'] = isset($data['date']) ? $data['date'] : null;
        $this->container['exms'] = isset($data['exms']) ? $data['exms'] : null;
        $this->container['itms'] = isset($data['itms']) ? $data['itms'] : null;
        $this->container['invm'] = isset($data['invm']) ? $data['invm'] : null;
        $this->container['dtl'] = isset($data['dtl']) ? $data['dtl'] : null;
        $this->container['summ'] = isset($data['summ']) ? $data['summ'] : null;
        $this->container['opt'] = isset($data['opt']) ? $data['opt'] : null;
        $this->container['acct'] = isset($data['acct']) ? $data['acct'] : null;
        $this->container['custref'] = isset($data['custref']) ? $data['custref'] : null;
        $this->container['invn'] = isset($data['invn']) ? $data['invn'] : null;
        $this->container['bcyc'] = isset($data['bcyc']) ? $data['bcyc'] : null;
        $this->container['bpd'] = isset($data['bpd']) ? $data['bpd'] : null;
        $this->container['ccycd'] = isset($data['ccycd']) ? $data['ccycd'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets doc
     *
     * @return string|null
     */
    public function getDoc()
    {
        return $this->container['doc'];
    }

    /**
     * Sets doc
     *
     * @param string|null $doc Document code.
     *
     * @return $this
     */
    public function setDoc($doc)
    {
        $this->container['doc'] = $doc;

        return $this;
    }

    /**
     * Gets cmmt
     *
     * @return bool|null
     */
    public function getCmmt()
    {
        return $this->container['cmmt'];
    }

    /**
     * Sets cmmt
     *
     * @param bool|null $cmmt Indicates if invoice should be committed as soon as it is processed.  Default: false.
     *
     * @return $this
     */
    public function setCmmt($cmmt)
    {
        $this->container['cmmt'] = $cmmt;

        return $this;
    }

    /**
     * Gets bill
     *
     * @return \OpenAPI\Client\Model\Location|null
     */
    public function getBill()
    {
        return $this->container['bill'];
    }

    /**
     * Sets bill
     *
     * @param \OpenAPI\Client\Model\Location|null $bill bill
     *
     * @return $this
     */
    public function setBill($bill)
    {
        $this->container['bill'] = $bill;

        return $this;
    }

    /**
     * Gets cust
     *
     * @return int|null
     */
    public function getCust()
    {
        return $this->container['cust'];
    }

    /**
     * Sets cust
     *
     * @param int|null $cust Customer type.
     *
     * @return $this
     */
    public function setCust($cust)
    {
        $this->container['cust'] = $cust;

        return $this;
    }

    /**
     * Gets lfln
     *
     * @return bool|null
     */
    public function getLfln()
    {
        return $this->container['lfln'];
    }

    /**
     * Sets lfln
     *
     * @param bool|null $lfln Indicates if customer is a Lifeline participant.  Default: false.
     *
     * @return $this
     */
    public function setLfln($lfln)
    {
        $this->container['lfln'] = $lfln;

        return $this;
    }

    /**
     * Gets date
     *
     * @return \DateTime|null
     */
    public function getDate()
    {
        return $this->container['date'];
    }

    /**
     * Sets date
     *
     * @param \DateTime|null $date Invoice date.
     *
     * @return $this
     */
    public function setDate($date)
    {
        $this->container['date'] = $date;

        return $this;
    }

    /**
     * Gets exms
     *
     * @return \OpenAPI\Client\Model\TaxExemption[]|null
     */
    public function getExms()
    {
        return $this->container['exms'];
    }

    /**
     * Sets exms
     *
     * @param \OpenAPI\Client\Model\TaxExemption[]|null $exms Tax exemptions.
     *
     * @return $this
     */
    public function setExms($exms)
    {
        $this->container['exms'] = $exms;

        return $this;
    }

    /**
     * Gets itms
     *
     * @return \OpenAPI\Client\Model\LineItem[]|null
     */
    public function getItms()
    {
        return $this->container['itms'];
    }

    /**
     * Sets itms
     *
     * @param \OpenAPI\Client\Model\LineItem[]|null $itms Line items.
     *
     * @return $this
     */
    public function setItms($itms)
    {
        $this->container['itms'] = $itms;

        return $this;
    }

    /**
     * Gets invm
     *
     * @return bool|null
     */
    public function getInvm()
    {
        return $this->container['invm'];
    }

    /**
     * Sets invm
     *
     * @param bool|null $invm Indicates if all line items within invoice should be processed in invoice mode.  Default: true.
     *
     * @return $this
     */
    public function setInvm($invm)
    {
        $this->container['invm'] = $invm;

        return $this;
    }

    /**
     * Gets dtl
     *
     * @return bool|null
     */
    public function getDtl()
    {
        return $this->container['dtl'];
    }

    /**
     * Sets dtl
     *
     * @param bool|null $dtl Indicates if individual line item taxes should be included in response.  Default: true.
     *
     * @return $this
     */
    public function setDtl($dtl)
    {
        $this->container['dtl'] = $dtl;

        return $this;
    }

    /**
     * Gets summ
     *
     * @return bool|null
     */
    public function getSumm()
    {
        return $this->container['summ'];
    }

    /**
     * Sets summ
     *
     * @param bool|null $summ Indicates if the summarized taxes for the invoice should be included in the resonse.  Default: false.
     *
     * @return $this
     */
    public function setSumm($summ)
    {
        $this->container['summ'] = $summ;

        return $this;
    }

    /**
     * Gets opt
     *
     * @return \OpenAPI\Client\Model\KeyValuePair[]|null
     */
    public function getOpt()
    {
        return $this->container['opt'];
    }

    /**
     * Sets opt
     *
     * @param \OpenAPI\Client\Model\KeyValuePair[]|null $opt Optional values for invoice. Maximum of 5. Keys must be numeric from 1 to 5.
     *
     * @return $this
     */
    public function setOpt($opt)
    {
        $this->container['opt'] = $opt;

        return $this;
    }

    /**
     * Gets acct
     *
     * @return string|null
     */
    public function getAcct()
    {
        return $this->container['acct'];
    }

    /**
     * Sets acct
     *
     * @param string|null $acct Account reference for reporting
     *
     * @return $this
     */
    public function setAcct($acct)
    {
        $this->container['acct'] = $acct;

        return $this;
    }

    /**
     * Gets custref
     *
     * @return string|null
     */
    public function getCustref()
    {
        return $this->container['custref'];
    }

    /**
     * Sets custref
     *
     * @param string|null $custref Customer Reference for reporting
     *
     * @return $this
     */
    public function setCustref($custref)
    {
        $this->container['custref'] = $custref;

        return $this;
    }

    /**
     * Gets invn
     *
     * @return string|null
     */
    public function getInvn()
    {
        return $this->container['invn'];
    }

    /**
     * Sets invn
     *
     * @param string|null $invn Invoice Number reference for reporting
     *
     * @return $this
     */
    public function setInvn($invn)
    {
        $this->container['invn'] = $invn;

        return $this;
    }

    /**
     * Gets bcyc
     *
     * @return string|null
     */
    public function getBcyc()
    {
        return $this->container['bcyc'];
    }

    /**
     * Sets bcyc
     *
     * @param string|null $bcyc Bill Cycle reference for reporting
     *
     * @return $this
     */
    public function setBcyc($bcyc)
    {
        $this->container['bcyc'] = $bcyc;

        return $this;
    }

    /**
     * Gets bpd
     *
     * @return \OpenAPI\Client\Model\BillingPeriod|null
     */
    public function getBpd()
    {
        return $this->container['bpd'];
    }

    /**
     * Sets bpd
     *
     * @param \OpenAPI\Client\Model\BillingPeriod|null $bpd bpd
     *
     * @return $this
     */
    public function setBpd($bpd)
    {
        $this->container['bpd'] = $bpd;

        return $this;
    }

    /**
     * Gets ccycd
     *
     * @return string|null
     */
    public function getCcycd()
    {
        return $this->container['ccycd'];
    }

    /**
     * Sets ccycd
     *
     * @param string|null $ccycd Currency code for invoice.  Example: CAD = Canadian Dollar
     *
     * @return $this
     */
    public function setCcycd($ccycd)
    {
        $this->container['ccycd'] = $ccycd;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue()
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


