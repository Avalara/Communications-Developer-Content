=begin
#SaasPro

#APIs to interface with communications tax engine.<br />The API requires Basic authentication.<br />Users with access to multiple clients must also set request header parameter for <code>client_id</code>.<br />Set <code>client_profile_id</code> to specify profile to be used for taxation.

The version of the OpenAPI document: v2

Generated by: https://openapi-generator.tech
OpenAPI Generator version: 4.3.0-SNAPSHOT

=end

require 'cgi'

module OpenapiClient
  class TaxCalculationApi
    attr_accessor :api_client

    def initialize(api_client = ApiClient.default)
      @api_client = api_client
    end
    # Performs tax calculations on all invoices and line items within the request body.
    # @param [Hash] opts the optional parameters
    # @option opts [CalcTaxesRequest] :calc_taxes_request CalcTaxesRequest object containing invoices to process and data required               for performing tax calculations.
    # @return [CalcTaxesResponse]
    def api_v2_afc_calc_taxes_post(opts = {})
      data, _status_code, _headers = api_v2_afc_calc_taxes_post_with_http_info(opts)
      data
    end

    # Performs tax calculations on all invoices and line items within the request body.
    # @param [Hash] opts the optional parameters
    # @option opts [CalcTaxesRequest] :calc_taxes_request CalcTaxesRequest object containing invoices to process and data required               for performing tax calculations.
    # @return [Array<(CalcTaxesResponse, Integer, Hash)>] CalcTaxesResponse data, response status code and response headers
    def api_v2_afc_calc_taxes_post_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: TaxCalculationApi.api_v2_afc_calc_taxes_post ...'
      end
      # resource path
      local_var_path = '/api/v2/afc/CalcTaxes'

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['text/plain', 'application/json', 'text/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json-patch+json', 'application/json', 'text/json', 'application/*+json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:body] || @api_client.object_to_http_body(opts[:'calc_taxes_request']) 

      # return_type
      return_type = opts[:return_type] || 'CalcTaxesResponse' 

      # auth_names
      auth_names = opts[:auth_names] || ['Basic']

      new_options = opts.merge(
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: TaxCalculationApi#api_v2_afc_calc_taxes_post\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Commits or un-commits a document code.
    # @param [Hash] opts the optional parameters
    # @option opts [CommitRequest] :commit_request CommitRequest object containing document code and optional field data to override in reports.
    # @return [CommitResponse]
    def api_v2_afc_commit_post(opts = {})
      data, _status_code, _headers = api_v2_afc_commit_post_with_http_info(opts)
      data
    end

    # Commits or un-commits a document code.
    # @param [Hash] opts the optional parameters
    # @option opts [CommitRequest] :commit_request CommitRequest object containing document code and optional field data to override in reports.
    # @return [Array<(CommitResponse, Integer, Hash)>] CommitResponse data, response status code and response headers
    def api_v2_afc_commit_post_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: TaxCalculationApi.api_v2_afc_commit_post ...'
      end
      # resource path
      local_var_path = '/api/v2/afc/Commit'

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['text/plain', 'application/json', 'text/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json-patch+json', 'application/json', 'text/json', 'application/*+json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:body] || @api_client.object_to_http_body(opts[:'commit_request']) 

      # return_type
      return_type = opts[:return_type] || 'CommitResponse' 

      # auth_names
      auth_names = opts[:auth_names] || ['Basic']

      new_options = opts.merge(
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: TaxCalculationApi#api_v2_afc_commit_post\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
  end
end
