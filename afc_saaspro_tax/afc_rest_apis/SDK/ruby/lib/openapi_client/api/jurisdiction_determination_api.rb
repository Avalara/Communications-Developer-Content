=begin
#SaasPro

#APIs to interface with communications tax engine.<br />The API requires Basic authentication.<br />Users with access to multiple clients must also set request header parameter for <code>client_id</code>.<br />Set <code>client_profile_id</code> to specify profile to be used for taxation.

The version of the OpenAPI document: v2

Generated by: https://openapi-generator.tech
OpenAPI Generator version: 4.3.0-SNAPSHOT

=end

require 'cgi'

module OpenapiClient
  class JurisdictionDeterminationApi
    attr_accessor :api_client

    def initialize(api_client = ApiClient.default)
      @api_client = api_client
    end
    # Get PCode(s) associated with a location - Ctry/State/County/City/Zip/NpaNxx/Fips.
    # Requests supports using best match or exact match as well as limiting the number of matches returned. Use a * on the end of Fips/Npanxx Codes to find a range of values.
    # @param [Hash] opts the optional parameters
    # @option opts [PCodeLookupRequest] :p_code_lookup_request 
    # @return [PCodeLookupResult]
    def api_v2_afc_p_code_post(opts = {})
      data, _status_code, _headers = api_v2_afc_p_code_post_with_http_info(opts)
      data
    end

    # Get PCode(s) associated with a location - Ctry/State/County/City/Zip/NpaNxx/Fips.
    # Requests supports using best match or exact match as well as limiting the number of matches returned. Use a * on the end of Fips/Npanxx Codes to find a range of values.
    # @param [Hash] opts the optional parameters
    # @option opts [PCodeLookupRequest] :p_code_lookup_request 
    # @return [Array<(PCodeLookupResult, Integer, Hash)>] PCodeLookupResult data, response status code and response headers
    def api_v2_afc_p_code_post_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: JurisdictionDeterminationApi.api_v2_afc_p_code_post ...'
      end
      # resource path
      local_var_path = '/api/v2/afc/PCode'

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['text/plain', 'application/json', 'text/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json-patch+json', 'application/json', 'text/json', 'application/*+json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:body] || @api_client.object_to_http_body(opts[:'p_code_lookup_request']) 

      # return_type
      return_type = opts[:return_type] || 'PCodeLookupResult' 

      # auth_names
      auth_names = opts[:auth_names] || ['Basic']

      new_options = opts.merge(
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: JurisdictionDeterminationApi#api_v2_afc_p_code_post\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Retrieves log on Geo Batch file
    # @param process_id [String] Process Id for Geo Batch File.
    # @param [Hash] opts the optional parameters
    # @return [GeoBatchLog]
    def api_v2_geo_batch_log_process_id_get(process_id, opts = {})
      data, _status_code, _headers = api_v2_geo_batch_log_process_id_get_with_http_info(process_id, opts)
      data
    end

    # Retrieves log on Geo Batch file
    # @param process_id [String] Process Id for Geo Batch File.
    # @param [Hash] opts the optional parameters
    # @return [Array<(GeoBatchLog, Integer, Hash)>] GeoBatchLog data, response status code and response headers
    def api_v2_geo_batch_log_process_id_get_with_http_info(process_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: JurisdictionDeterminationApi.api_v2_geo_batch_log_process_id_get ...'
      end
      # verify the required parameter 'process_id' is set
      if @api_client.config.client_side_validation && process_id.nil?
        fail ArgumentError, "Missing the required parameter 'process_id' when calling JurisdictionDeterminationApi.api_v2_geo_batch_log_process_id_get"
      end
      # resource path
      local_var_path = '/api/v2/geo/batch/log/{processId}'.sub('{' + 'processId' + '}', CGI.escape(process_id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['text/plain', 'application/json', 'text/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:body] 

      # return_type
      return_type = opts[:return_type] || 'GeoBatchLog' 

      # auth_names
      auth_names = opts[:auth_names] || ['Basic']

      new_options = opts.merge(
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: JurisdictionDeterminationApi#api_v2_geo_batch_log_process_id_get\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Retrieves information on Geo Batch file status
    # @param process_id [String] Process Id for Geo Batch File.
    # @param [Hash] opts the optional parameters
    # @return [GeoBatchStatus]
    def api_v2_geo_batch_status_process_id_get(process_id, opts = {})
      data, _status_code, _headers = api_v2_geo_batch_status_process_id_get_with_http_info(process_id, opts)
      data
    end

    # Retrieves information on Geo Batch file status
    # @param process_id [String] Process Id for Geo Batch File.
    # @param [Hash] opts the optional parameters
    # @return [Array<(GeoBatchStatus, Integer, Hash)>] GeoBatchStatus data, response status code and response headers
    def api_v2_geo_batch_status_process_id_get_with_http_info(process_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: JurisdictionDeterminationApi.api_v2_geo_batch_status_process_id_get ...'
      end
      # verify the required parameter 'process_id' is set
      if @api_client.config.client_side_validation && process_id.nil?
        fail ArgumentError, "Missing the required parameter 'process_id' when calling JurisdictionDeterminationApi.api_v2_geo_batch_status_process_id_get"
      end
      # resource path
      local_var_path = '/api/v2/geo/batch/status/{processId}'.sub('{' + 'processId' + '}', CGI.escape(process_id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['text/plain', 'application/json', 'text/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:body] 

      # return_type
      return_type = opts[:return_type] || 'GeoBatchStatus' 

      # auth_names
      auth_names = opts[:auth_names] || ['Basic']

      new_options = opts.merge(
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: JurisdictionDeterminationApi#api_v2_geo_batch_status_process_id_get\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Uploads file to Geo Batch.
    # @param [Hash] opts the optional parameters
    # @option opts [File] :file 
    # @return [GeoBatchSubmitFileResponse]
    def api_v2_geo_batch_upload_post(opts = {})
      data, _status_code, _headers = api_v2_geo_batch_upload_post_with_http_info(opts)
      data
    end

    # Uploads file to Geo Batch.
    # @param [Hash] opts the optional parameters
    # @option opts [File] :file 
    # @return [Array<(GeoBatchSubmitFileResponse, Integer, Hash)>] GeoBatchSubmitFileResponse data, response status code and response headers
    def api_v2_geo_batch_upload_post_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: JurisdictionDeterminationApi.api_v2_geo_batch_upload_post ...'
      end
      # resource path
      local_var_path = '/api/v2/geo/batch/Upload'

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['text/plain', 'application/json', 'text/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['multipart/form-data'])

      # form parameters
      form_params = opts[:form_params] || {}
      form_params['file'] = opts[:'file'] if !opts[:'file'].nil?

      # http body (model)
      post_body = opts[:body] 

      # return_type
      return_type = opts[:return_type] || 'GeoBatchSubmitFileResponse' 

      # auth_names
      auth_names = opts[:auth_names] || ['Basic']

      new_options = opts.merge(
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: JurisdictionDeterminationApi#api_v2_geo_batch_upload_post\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Geocodes one or multiple street addresses and/or lat/long coordinate pairs.
    # @param [Hash] opts the optional parameters
    # @option opts [Array<GeocodeRequest>] :geocode_request List of street addresses and/or lat/long coordinate pairs to geocode.
    # @return [Array<GeocodeResult>]
    def api_v2_geo_geocode_post(opts = {})
      data, _status_code, _headers = api_v2_geo_geocode_post_with_http_info(opts)
      data
    end

    # Geocodes one or multiple street addresses and/or lat/long coordinate pairs.
    # @param [Hash] opts the optional parameters
    # @option opts [Array<GeocodeRequest>] :geocode_request List of street addresses and/or lat/long coordinate pairs to geocode.
    # @return [Array<(Array<GeocodeResult>, Integer, Hash)>] Array<GeocodeResult> data, response status code and response headers
    def api_v2_geo_geocode_post_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: JurisdictionDeterminationApi.api_v2_geo_geocode_post ...'
      end
      # resource path
      local_var_path = '/api/v2/geo/Geocode'

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['text/plain', 'application/json', 'text/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json-patch+json', 'application/json', 'text/json', 'application/*+json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:body] || @api_client.object_to_http_body(opts[:'geocode_request']) 

      # return_type
      return_type = opts[:return_type] || 'Array<GeocodeResult>' 

      # auth_names
      auth_names = opts[:auth_names] || ['Basic']

      new_options = opts.merge(
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: JurisdictionDeterminationApi#api_v2_geo_geocode_post\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
  end
end
