=begin
#SaasPro

#APIs to interface with communications tax engine.<br />The API requires Basic authentication.<br />Users with access to multiple clients must also set request header parameter for <code>client_id</code>.<br />Set <code>client_profile_id</code> to specify profile to be used for taxation.

The version of the OpenAPI document: v2

Generated by: https://openapi-generator.tech
OpenAPI Generator version: 4.3.0-SNAPSHOT

=end

require 'date'

module OpenapiClient
  # Data for an invoice or quote line item.
  class TaxCalculationSettingsResponse
    # Unique profile configuration id associated with configuration item
    attr_accessor :profile_config_id

    # Profile id's associated with configuration item
    attr_accessor :profile_ids

    # Client id associated with configuration item
    attr_accessor :client_id

    # User who last updated the configuration item
    attr_accessor :last_update_by

    # Active status of the configuration item
    attr_accessor :active

    attr_accessor :settings

    # Exclusions (as applicable)
    attr_accessor :exclusions

    # Bundles (as applicable)
    attr_accessor :bundles

    # Nexus (as applicable)
    attr_accessor :nexus

    attr_accessor :overrides

    # Description associated with this item
    attr_accessor :description

    # Error information.
    attr_accessor :error

    # Item Type  Examples:    Configuration, Bundle, Exclusion, Override
    attr_accessor :item_type

    # Error information.
    attr_accessor :errors

    # Warning information.
    attr_accessor :warnings

    # Status information.
    attr_accessor :status

    # Attribute mapping from ruby-style variable name to JSON key.
    def self.attribute_map
      {
        :'profile_config_id' => :'ProfileConfigId',
        :'profile_ids' => :'ProfileIds',
        :'client_id' => :'ClientId',
        :'last_update_by' => :'LastUpdateBy',
        :'active' => :'Active',
        :'settings' => :'Settings',
        :'exclusions' => :'Exclusions',
        :'bundles' => :'Bundles',
        :'nexus' => :'Nexus',
        :'overrides' => :'Overrides',
        :'description' => :'Description',
        :'error' => :'Error',
        :'item_type' => :'ItemType',
        :'errors' => :'Errors',
        :'warnings' => :'Warnings',
        :'status' => :'Status'
      }
    end

    # Attribute type mapping.
    def self.openapi_types
      {
        :'profile_config_id' => :'Integer',
        :'profile_ids' => :'Array<Integer>',
        :'client_id' => :'Integer',
        :'last_update_by' => :'String',
        :'active' => :'Boolean',
        :'settings' => :'Configuration',
        :'exclusions' => :'Array<ExclusionConfig>',
        :'bundles' => :'Array<BundleConfig>',
        :'nexus' => :'Array<NexusConfig>',
        :'overrides' => :'OverrideConfig',
        :'description' => :'String',
        :'error' => :'String',
        :'item_type' => :'String',
        :'errors' => :'Array<Error>',
        :'warnings' => :'Array<Warning>',
        :'status' => :'Array<Status>'
      }
    end

    # List of attributes with nullable: true
    def self.openapi_nullable
      Set.new([
        :'profile_config_id',
        :'profile_ids',
        :'client_id',
        :'last_update_by',
        :'active',
        :'exclusions',
        :'bundles',
        :'nexus',
        :'description',
        :'error',
        :'item_type',
        :'errors',
        :'warnings',
        :'status'
      ])
    end

    # Initializes the object
    # @param [Hash] attributes Model attributes in the form of hash
    def initialize(attributes = {})
      if (!attributes.is_a?(Hash))
        fail ArgumentError, "The input argument (attributes) must be a hash in `OpenapiClient::TaxCalculationSettingsResponse` initialize method"
      end

      # check to see if the attribute exists and convert string to symbol for hash key
      attributes = attributes.each_with_object({}) { |(k, v), h|
        if (!self.class.attribute_map.key?(k.to_sym))
          fail ArgumentError, "`#{k}` is not a valid attribute in `OpenapiClient::TaxCalculationSettingsResponse`. Please check the name to make sure it's valid. List of attributes: " + self.class.attribute_map.keys.inspect
        end
        h[k.to_sym] = v
      }

      if attributes.key?(:'profile_config_id')
        self.profile_config_id = attributes[:'profile_config_id']
      end

      if attributes.key?(:'profile_ids')
        if (value = attributes[:'profile_ids']).is_a?(Array)
          self.profile_ids = value
        end
      end

      if attributes.key?(:'client_id')
        self.client_id = attributes[:'client_id']
      end

      if attributes.key?(:'last_update_by')
        self.last_update_by = attributes[:'last_update_by']
      end

      if attributes.key?(:'active')
        self.active = attributes[:'active']
      end

      if attributes.key?(:'settings')
        self.settings = attributes[:'settings']
      end

      if attributes.key?(:'exclusions')
        if (value = attributes[:'exclusions']).is_a?(Array)
          self.exclusions = value
        end
      end

      if attributes.key?(:'bundles')
        if (value = attributes[:'bundles']).is_a?(Array)
          self.bundles = value
        end
      end

      if attributes.key?(:'nexus')
        if (value = attributes[:'nexus']).is_a?(Array)
          self.nexus = value
        end
      end

      if attributes.key?(:'overrides')
        self.overrides = attributes[:'overrides']
      end

      if attributes.key?(:'description')
        self.description = attributes[:'description']
      end

      if attributes.key?(:'error')
        self.error = attributes[:'error']
      end

      if attributes.key?(:'item_type')
        self.item_type = attributes[:'item_type']
      end

      if attributes.key?(:'errors')
        if (value = attributes[:'errors']).is_a?(Array)
          self.errors = value
        end
      end

      if attributes.key?(:'warnings')
        if (value = attributes[:'warnings']).is_a?(Array)
          self.warnings = value
        end
      end

      if attributes.key?(:'status')
        if (value = attributes[:'status']).is_a?(Array)
          self.status = value
        end
      end
    end

    # Show invalid properties with the reasons. Usually used together with valid?
    # @return Array for valid properties with the reasons
    def list_invalid_properties
      invalid_properties = Array.new
      invalid_properties
    end

    # Check to see if the all the properties in the model are valid
    # @return true if the model is valid
    def valid?
      true
    end

    # Checks equality by comparing each attribute.
    # @param [Object] Object to be compared
    def ==(o)
      return true if self.equal?(o)
      self.class == o.class &&
          profile_config_id == o.profile_config_id &&
          profile_ids == o.profile_ids &&
          client_id == o.client_id &&
          last_update_by == o.last_update_by &&
          active == o.active &&
          settings == o.settings &&
          exclusions == o.exclusions &&
          bundles == o.bundles &&
          nexus == o.nexus &&
          overrides == o.overrides &&
          description == o.description &&
          error == o.error &&
          item_type == o.item_type &&
          errors == o.errors &&
          warnings == o.warnings &&
          status == o.status
    end

    # @see the `==` method
    # @param [Object] Object to be compared
    def eql?(o)
      self == o
    end

    # Calculates hash code according to all attributes.
    # @return [Integer] Hash code
    def hash
      [profile_config_id, profile_ids, client_id, last_update_by, active, settings, exclusions, bundles, nexus, overrides, description, error, item_type, errors, warnings, status].hash
    end

    # Builds the object from hash
    # @param [Hash] attributes Model attributes in the form of hash
    # @return [Object] Returns the model itself
    def self.build_from_hash(attributes)
      new.build_from_hash(attributes)
    end

    # Builds the object from hash
    # @param [Hash] attributes Model attributes in the form of hash
    # @return [Object] Returns the model itself
    def build_from_hash(attributes)
      return nil unless attributes.is_a?(Hash)
      self.class.openapi_types.each_pair do |key, type|
        if type =~ /\AArray<(.*)>/i
          # check to ensure the input is an array given that the attribute
          # is documented as an array but the input is not
          if attributes[self.class.attribute_map[key]].is_a?(Array)
            self.send("#{key}=", attributes[self.class.attribute_map[key]].map { |v| _deserialize($1, v) })
          end
        elsif !attributes[self.class.attribute_map[key]].nil?
          self.send("#{key}=", _deserialize(type, attributes[self.class.attribute_map[key]]))
        end # or else data not found in attributes(hash), not an issue as the data can be optional
      end

      self
    end

    # Deserializes the data based on type
    # @param string type Data type
    # @param string value Value to be deserialized
    # @return [Object] Deserialized data
    def _deserialize(type, value)
      case type.to_sym
      when :DateTime
        DateTime.parse(value)
      when :Date
        Date.parse(value)
      when :String
        value.to_s
      when :Integer
        value.to_i
      when :Float
        value.to_f
      when :Boolean
        if value.to_s =~ /\A(true|t|yes|y|1)\z/i
          true
        else
          false
        end
      when :Object
        # generic object (usually a Hash), return directly
        value
      when /\AArray<(?<inner_type>.+)>\z/
        inner_type = Regexp.last_match[:inner_type]
        value.map { |v| _deserialize(inner_type, v) }
      when /\AHash<(?<k_type>.+?), (?<v_type>.+)>\z/
        k_type = Regexp.last_match[:k_type]
        v_type = Regexp.last_match[:v_type]
        {}.tap do |hash|
          value.each do |k, v|
            hash[_deserialize(k_type, k)] = _deserialize(v_type, v)
          end
        end
      else # model
        OpenapiClient.const_get(type).build_from_hash(value)
      end
    end

    # Returns the string representation of the object
    # @return [String] String presentation of the object
    def to_s
      to_hash.to_s
    end

    # to_body is an alias to to_hash (backward compatibility)
    # @return [Hash] Returns the object in the form of hash
    def to_body
      to_hash
    end

    # Returns the object in the form of hash
    # @return [Hash] Returns the object in the form of hash
    def to_hash
      hash = {}
      self.class.attribute_map.each_pair do |attr, param|
        value = self.send(attr)
        if value.nil?
          is_nullable = self.class.openapi_nullable.include?(attr)
          next if !is_nullable || (is_nullable && !instance_variable_defined?(:"@#{attr}"))
        end
        
        hash[param] = _to_hash(value)
      end
      hash
    end

    # Outputs non-array value in the form of hash
    # For object, use to_hash. Otherwise, just return the value
    # @param [Object] value Any valid value
    # @return [Hash] Returns the value in the form of hash
    def _to_hash(value)
      if value.is_a?(Array)
        value.compact.map { |v| _to_hash(v) }
      elsif value.is_a?(Hash)
        {}.tap do |hash|
          value.each { |k, v| hash[k] = _to_hash(v) }
        end
      elsif value.respond_to? :to_hash
        value.to_hash
      else
        value
      end
    end
  end
end
