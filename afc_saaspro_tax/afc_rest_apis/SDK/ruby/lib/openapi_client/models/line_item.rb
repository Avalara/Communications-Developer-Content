=begin
#SaasPro

#APIs to interface with communications tax engine.<br />The API requires Basic authentication.<br />Users with access to multiple clients must also set request header parameter for <code>client_id</code>.<br />Set <code>client_profile_id</code> to specify profile to be used for taxation.

The version of the OpenAPI document: v2

Generated by: https://openapi-generator.tech
OpenAPI Generator version: 4.3.0-SNAPSHOT

=end

require 'date'

module OpenapiClient
  # Data for an invoice or quote line item.
  class LineItem
    # Reference ID for line item.
    attr_accessor :ref

    attr_accessor :from

    attr_accessor :to

    # Charge amount.  Default: 0.
    attr_accessor :chg

    # Number of lines.  Default: 0.
    attr_accessor :line

    # Number of locations.  Default: 0.
    attr_accessor :loc

    # Number of minutes.  Default: 0.
    attr_accessor :min

    # 0 - Wholesale : Indicates that the item was sold to a wholeseller.  1 - Retail : Indicates that the item was sold to an end user - a retail sale.  2 - Consumed : Indicates that the item was consumed directly (SAU products only).  3 - VendorUse : Indicates that the item is subject to vendor use tax (SAU products only).
    attr_accessor :sale

    # Split for private-line transactions.
    attr_accessor :plsp

    # Indicates if the charge for this line item is tax-inclusive.
    attr_accessor :incl

    # For pro-rated tax calculations. Percentage to pro-rate.
    attr_accessor :pror

    # For pro-rated credit or adjustment calculations.  0 = default  1 = do not return non-proratable fixed taxes in response  2 = return non-proratable fixed taxes in response
    attr_accessor :proadj

    # Transaction type ID.
    attr_accessor :tran

    # Service type ID.
    attr_accessor :serv

    # Indicates if this line item is a debit card transaction.  Default: false.
    attr_accessor :dbt

    # Indicates if this line item is an adjustment.  Default: false.
    attr_accessor :adj

    # Adjustment method.
    attr_accessor :adjm

    # Discount type for adjustments.
    attr_accessor :disc

    # Optional values for line item. Maximum of 5. Keys must be numeric from 5 to 10.
    attr_accessor :opt

    # Attribute/property value for sales and use transaction/service pairs.
    attr_accessor :prop

    attr_accessor :bill

    # Customer type.
    attr_accessor :cust

    # Indicates if customer is a Lifeline participant.  Default: false.
    attr_accessor :lfln

    # Invoice date.
    attr_accessor :date

    # Quantity to be applied to the item - taxation is equivalent to repeating the item the number of times of the quantity
    attr_accessor :qty

    # General Ledger reference to be used in reporting
    attr_accessor :glref

    # Attribute mapping from ruby-style variable name to JSON key.
    def self.attribute_map
      {
        :'ref' => :'ref',
        :'from' => :'from',
        :'to' => :'to',
        :'chg' => :'chg',
        :'line' => :'line',
        :'loc' => :'loc',
        :'min' => :'min',
        :'sale' => :'sale',
        :'plsp' => :'plsp',
        :'incl' => :'incl',
        :'pror' => :'pror',
        :'proadj' => :'proadj',
        :'tran' => :'tran',
        :'serv' => :'serv',
        :'dbt' => :'dbt',
        :'adj' => :'adj',
        :'adjm' => :'adjm',
        :'disc' => :'disc',
        :'opt' => :'opt',
        :'prop' => :'prop',
        :'bill' => :'bill',
        :'cust' => :'cust',
        :'lfln' => :'lfln',
        :'date' => :'date',
        :'qty' => :'qty',
        :'glref' => :'glref'
      }
    end

    # Attribute type mapping.
    def self.openapi_types
      {
        :'ref' => :'String',
        :'from' => :'Location',
        :'to' => :'Location',
        :'chg' => :'Float',
        :'line' => :'Integer',
        :'loc' => :'Integer',
        :'min' => :'Float',
        :'sale' => :'Integer',
        :'plsp' => :'Float',
        :'incl' => :'Boolean',
        :'pror' => :'Float',
        :'proadj' => :'Integer',
        :'tran' => :'Integer',
        :'serv' => :'Integer',
        :'dbt' => :'Boolean',
        :'adj' => :'Boolean',
        :'adjm' => :'Integer',
        :'disc' => :'Integer',
        :'opt' => :'Array<KeyValuePair>',
        :'prop' => :'Integer',
        :'bill' => :'Location',
        :'cust' => :'Integer',
        :'lfln' => :'Boolean',
        :'date' => :'DateTime',
        :'qty' => :'Integer',
        :'glref' => :'String'
      }
    end

    # List of attributes with nullable: true
    def self.openapi_nullable
      Set.new([
        :'ref',
        :'chg',
        :'line',
        :'loc',
        :'min',
        :'sale',
        :'plsp',
        :'incl',
        :'pror',
        :'tran',
        :'serv',
        :'dbt',
        :'adj',
        :'adjm',
        :'disc',
        :'opt',
        :'prop',
        :'cust',
        :'lfln',
        :'date',
        :'qty',
        :'glref'
      ])
    end

    # Initializes the object
    # @param [Hash] attributes Model attributes in the form of hash
    def initialize(attributes = {})
      if (!attributes.is_a?(Hash))
        fail ArgumentError, "The input argument (attributes) must be a hash in `OpenapiClient::LineItem` initialize method"
      end

      # check to see if the attribute exists and convert string to symbol for hash key
      attributes = attributes.each_with_object({}) { |(k, v), h|
        if (!self.class.attribute_map.key?(k.to_sym))
          fail ArgumentError, "`#{k}` is not a valid attribute in `OpenapiClient::LineItem`. Please check the name to make sure it's valid. List of attributes: " + self.class.attribute_map.keys.inspect
        end
        h[k.to_sym] = v
      }

      if attributes.key?(:'ref')
        self.ref = attributes[:'ref']
      end

      if attributes.key?(:'from')
        self.from = attributes[:'from']
      end

      if attributes.key?(:'to')
        self.to = attributes[:'to']
      end

      if attributes.key?(:'chg')
        self.chg = attributes[:'chg']
      end

      if attributes.key?(:'line')
        self.line = attributes[:'line']
      end

      if attributes.key?(:'loc')
        self.loc = attributes[:'loc']
      end

      if attributes.key?(:'min')
        self.min = attributes[:'min']
      end

      if attributes.key?(:'sale')
        self.sale = attributes[:'sale']
      end

      if attributes.key?(:'plsp')
        self.plsp = attributes[:'plsp']
      end

      if attributes.key?(:'incl')
        self.incl = attributes[:'incl']
      end

      if attributes.key?(:'pror')
        self.pror = attributes[:'pror']
      end

      if attributes.key?(:'proadj')
        self.proadj = attributes[:'proadj']
      end

      if attributes.key?(:'tran')
        self.tran = attributes[:'tran']
      end

      if attributes.key?(:'serv')
        self.serv = attributes[:'serv']
      end

      if attributes.key?(:'dbt')
        self.dbt = attributes[:'dbt']
      end

      if attributes.key?(:'adj')
        self.adj = attributes[:'adj']
      end

      if attributes.key?(:'adjm')
        self.adjm = attributes[:'adjm']
      end

      if attributes.key?(:'disc')
        self.disc = attributes[:'disc']
      end

      if attributes.key?(:'opt')
        if (value = attributes[:'opt']).is_a?(Array)
          self.opt = value
        end
      end

      if attributes.key?(:'prop')
        self.prop = attributes[:'prop']
      end

      if attributes.key?(:'bill')
        self.bill = attributes[:'bill']
      end

      if attributes.key?(:'cust')
        self.cust = attributes[:'cust']
      end

      if attributes.key?(:'lfln')
        self.lfln = attributes[:'lfln']
      end

      if attributes.key?(:'date')
        self.date = attributes[:'date']
      end

      if attributes.key?(:'qty')
        self.qty = attributes[:'qty']
      end

      if attributes.key?(:'glref')
        self.glref = attributes[:'glref']
      end
    end

    # Show invalid properties with the reasons. Usually used together with valid?
    # @return Array for valid properties with the reasons
    def list_invalid_properties
      invalid_properties = Array.new
      invalid_properties
    end

    # Check to see if the all the properties in the model are valid
    # @return true if the model is valid
    def valid?
      true
    end

    # Checks equality by comparing each attribute.
    # @param [Object] Object to be compared
    def ==(o)
      return true if self.equal?(o)
      self.class == o.class &&
          ref == o.ref &&
          from == o.from &&
          to == o.to &&
          chg == o.chg &&
          line == o.line &&
          loc == o.loc &&
          min == o.min &&
          sale == o.sale &&
          plsp == o.plsp &&
          incl == o.incl &&
          pror == o.pror &&
          proadj == o.proadj &&
          tran == o.tran &&
          serv == o.serv &&
          dbt == o.dbt &&
          adj == o.adj &&
          adjm == o.adjm &&
          disc == o.disc &&
          opt == o.opt &&
          prop == o.prop &&
          bill == o.bill &&
          cust == o.cust &&
          lfln == o.lfln &&
          date == o.date &&
          qty == o.qty &&
          glref == o.glref
    end

    # @see the `==` method
    # @param [Object] Object to be compared
    def eql?(o)
      self == o
    end

    # Calculates hash code according to all attributes.
    # @return [Integer] Hash code
    def hash
      [ref, from, to, chg, line, loc, min, sale, plsp, incl, pror, proadj, tran, serv, dbt, adj, adjm, disc, opt, prop, bill, cust, lfln, date, qty, glref].hash
    end

    # Builds the object from hash
    # @param [Hash] attributes Model attributes in the form of hash
    # @return [Object] Returns the model itself
    def self.build_from_hash(attributes)
      new.build_from_hash(attributes)
    end

    # Builds the object from hash
    # @param [Hash] attributes Model attributes in the form of hash
    # @return [Object] Returns the model itself
    def build_from_hash(attributes)
      return nil unless attributes.is_a?(Hash)
      self.class.openapi_types.each_pair do |key, type|
        if type =~ /\AArray<(.*)>/i
          # check to ensure the input is an array given that the attribute
          # is documented as an array but the input is not
          if attributes[self.class.attribute_map[key]].is_a?(Array)
            self.send("#{key}=", attributes[self.class.attribute_map[key]].map { |v| _deserialize($1, v) })
          end
        elsif !attributes[self.class.attribute_map[key]].nil?
          self.send("#{key}=", _deserialize(type, attributes[self.class.attribute_map[key]]))
        end # or else data not found in attributes(hash), not an issue as the data can be optional
      end

      self
    end

    # Deserializes the data based on type
    # @param string type Data type
    # @param string value Value to be deserialized
    # @return [Object] Deserialized data
    def _deserialize(type, value)
      case type.to_sym
      when :DateTime
        DateTime.parse(value)
      when :Date
        Date.parse(value)
      when :String
        value.to_s
      when :Integer
        value.to_i
      when :Float
        value.to_f
      when :Boolean
        if value.to_s =~ /\A(true|t|yes|y|1)\z/i
          true
        else
          false
        end
      when :Object
        # generic object (usually a Hash), return directly
        value
      when /\AArray<(?<inner_type>.+)>\z/
        inner_type = Regexp.last_match[:inner_type]
        value.map { |v| _deserialize(inner_type, v) }
      when /\AHash<(?<k_type>.+?), (?<v_type>.+)>\z/
        k_type = Regexp.last_match[:k_type]
        v_type = Regexp.last_match[:v_type]
        {}.tap do |hash|
          value.each do |k, v|
            hash[_deserialize(k_type, k)] = _deserialize(v_type, v)
          end
        end
      else # model
        OpenapiClient.const_get(type).build_from_hash(value)
      end
    end

    # Returns the string representation of the object
    # @return [String] String presentation of the object
    def to_s
      to_hash.to_s
    end

    # to_body is an alias to to_hash (backward compatibility)
    # @return [Hash] Returns the object in the form of hash
    def to_body
      to_hash
    end

    # Returns the object in the form of hash
    # @return [Hash] Returns the object in the form of hash
    def to_hash
      hash = {}
      self.class.attribute_map.each_pair do |attr, param|
        value = self.send(attr)
        if value.nil?
          is_nullable = self.class.openapi_nullable.include?(attr)
          next if !is_nullable || (is_nullable && !instance_variable_defined?(:"@#{attr}"))
        end
        
        hash[param] = _to_hash(value)
      end
      hash
    end

    # Outputs non-array value in the form of hash
    # For object, use to_hash. Otherwise, just return the value
    # @param [Object] value Any valid value
    # @return [Hash] Returns the value in the form of hash
    def _to_hash(value)
      if value.is_a?(Array)
        value.compact.map { |v| _to_hash(v) }
      elsif value.is_a?(Hash)
        {}.tap do |hash|
          value.each { |k, v| hash[k] = _to_hash(v) }
        end
      elsif value.respond_to? :to_hash
        value.to_hash
      else
        value
      end
    end
  end
end
