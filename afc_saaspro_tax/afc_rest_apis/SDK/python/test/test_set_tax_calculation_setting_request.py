# coding: utf-8

"""
    SaasPro

    APIs to interface with communications tax engine.<br />The API requires Basic authentication.<br />Users with access to multiple clients must also set request header parameter for <code>client_id</code>.<br />Set <code>client_profile_id</code> to specify profile to be used for taxation.  # noqa: E501

    The version of the OpenAPI document: v2
    Generated by: https://openapi-generator.tech
"""


from __future__ import absolute_import

import unittest
import datetime

import avalara.comms.rest.v2
from avalara.comms.rest.v2.models.set_tax_calculation_setting_request import SetTaxCalculationSettingRequest  # noqa: E501
from avalara.comms.rest.v2.rest import ApiException

class TestSetTaxCalculationSettingRequest(unittest.TestCase):
    """SetTaxCalculationSettingRequest unit test stubs"""

    def setUp(self):
        pass

    def tearDown(self):
        pass

    def make_instance(self, include_optional):
        """Test SetTaxCalculationSettingRequest
            include_option is a boolean, when False only required
            params are included, when True both required and
            optional params are included """
        # model = avalara.comms.rest.v2.models.set_tax_calculation_setting_request.SetTaxCalculationSettingRequest()  # noqa: E501
        if include_optional :
            return SetTaxCalculationSettingRequest(
                profile_config_id = 56, 
                link_profile_ids = [
                    56
                    ], 
                unlink_profile_ids = [
                    56
                    ], 
                client_id = 56, 
                deactivate = True, 
                description = '0', 
                replace_existing_links = True, 
                settings = null, 
                exclusions = [
                    avalara.comms.rest.v2.models.exclusion_config.ExclusionConfig(
                        country_iso = '0', 
                        state = '0', )
                    ], 
                bundles = [
                    avalara.comms.rest.v2.models.bundle_config.BundleConfig(
                        bundle_package = 56, 
                        bundle_id = 56, 
                        description = '0', 
                        bundle_items = [
                            avalara.comms.rest.v2.models.bundle_item.BundleItem(
                                transaction_id = 56, 
                                service_id = 56, 
                                percentage = 1.337, 
                                fixed_amount = 1.337, 
                                lines = 56, 
                                minutes = 1.337, 
                                transaction_desc = '0', 
                                service_desc = '0', )
                            ], 
                        version = '0', )
                    ], 
                nexus = [
                    avalara.comms.rest.v2.models.nexus_config.NexusConfig(
                        state = '0', )
                    ], 
                overrides = [
                    '0'
                    ]
            )
        else :
            return SetTaxCalculationSettingRequest(
        )

    def testSetTaxCalculationSettingRequest(self):
        """Test SetTaxCalculationSettingRequest"""
        inst_req_only = self.make_instance(include_optional=False)
        inst_req_and_optional = self.make_instance(include_optional=True)


if __name__ == '__main__':
    unittest.main()
