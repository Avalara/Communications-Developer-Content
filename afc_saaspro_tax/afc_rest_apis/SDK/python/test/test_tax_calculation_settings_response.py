# coding: utf-8

"""
    SaasPro

    APIs to interface with communications tax engine.<br />The API requires Basic authentication.<br />Users with access to multiple clients must also set request header parameter for <code>client_id</code>.<br />Set <code>client_profile_id</code> to specify profile to be used for taxation.  # noqa: E501

    The version of the OpenAPI document: v2
    Generated by: https://openapi-generator.tech
"""


from __future__ import absolute_import

import unittest
import datetime

import avalara.comms.rest.v2
from avalara.comms.rest.v2.models.tax_calculation_settings_response import TaxCalculationSettingsResponse  # noqa: E501
from avalara.comms.rest.v2.rest import ApiException

class TestTaxCalculationSettingsResponse(unittest.TestCase):
    """TaxCalculationSettingsResponse unit test stubs"""

    def setUp(self):
        pass

    def tearDown(self):
        pass

    def make_instance(self, include_optional):
        """Test TaxCalculationSettingsResponse
            include_option is a boolean, when False only required
            params are included, when True both required and
            optional params are included """
        # model = avalara.comms.rest.v2.models.tax_calculation_settings_response.TaxCalculationSettingsResponse()  # noqa: E501
        if include_optional :
            return TaxCalculationSettingsResponse(
                profile_config_id = 56, 
                profile_ids = [
                    56
                    ], 
                client_id = 56, 
                last_update_by = '0', 
                active = True, 
                settings = avalara.comms.rest.v2.models.configuration.Configuration(
                    traffic_study_overrides = [
                        avalara.comms.rest.v2.models.traffic_study_override.TrafficStudyOverride(
                            traffic_study_type = 56, 
                            safe_harbor_fed_pcnt = 1.337, 
                            traffic_study_fed_pcnt = 1.337, )
                        ], 
                    return_non_billable = True, 
                    tax_on_tax_algorithm = 56, 
                    self_tax_algorithm = 56, ), 
                exclusions = [
                    avalara.comms.rest.v2.models.exclusion_config.ExclusionConfig(
                        country_iso = '0', 
                        state = '0', )
                    ], 
                bundles = [
                    avalara.comms.rest.v2.models.bundle_config.BundleConfig(
                        bundle_package = 56, 
                        bundle_id = 56, 
                        description = '0', 
                        bundle_items = [
                            avalara.comms.rest.v2.models.bundle_item.BundleItem(
                                transaction_id = 56, 
                                service_id = 56, 
                                percentage = 1.337, 
                                fixed_amount = 1.337, 
                                lines = 56, 
                                minutes = 1.337, 
                                transaction_desc = '0', 
                                service_desc = '0', )
                            ], 
                        version = '0', )
                    ], 
                nexus = [
                    avalara.comms.rest.v2.models.nexus_config.NexusConfig(
                        state = '0', )
                    ], 
                overrides = avalara.comms.rest.v2.models.override_config.OverrideConfig(
                    raw_data = [
                        '0'
                        ], ), 
                description = '0', 
                error = '0', 
                item_type = '0', 
                errors = [
                    avalara.comms.rest.v2.models.error.Error(
                        code = 56, 
                        msg = '0', )
                    ], 
                warnings = [
                    avalara.comms.rest.v2.models.warning.Warning(
                        code = 56, 
                        msg = '0', )
                    ], 
                status = [
                    avalara.comms.rest.v2.models.status.Status(
                        code = 56, 
                        msg = '0', )
                    ]
            )
        else :
            return TaxCalculationSettingsResponse(
        )

    def testTaxCalculationSettingsResponse(self):
        """Test TaxCalculationSettingsResponse"""
        inst_req_only = self.make_instance(include_optional=False)
        inst_req_and_optional = self.make_instance(include_optional=True)


if __name__ == '__main__':
    unittest.main()
