# coding: utf-8

"""
    SaasPro

    APIs to interface with communications tax engine.<br />The API requires Basic authentication.<br />Users with access to multiple clients must also set request header parameter for <code>client_id</code>.<br />Set <code>client_profile_id</code> to specify profile to be used for taxation.  # noqa: E501

    The version of the OpenAPI document: v2
    Generated by: https://openapi-generator.tech
"""


from __future__ import absolute_import

import unittest
import datetime

import avalara.comms.rest.v2
from avalara.comms.rest.v2.models.calc_taxes_request import CalcTaxesRequest  # noqa: E501
from avalara.comms.rest.v2.rest import ApiException

class TestCalcTaxesRequest(unittest.TestCase):
    """CalcTaxesRequest unit test stubs"""

    def setUp(self):
        pass

    def tearDown(self):
        pass

    def make_instance(self, include_optional):
        """Test CalcTaxesRequest
            include_option is a boolean, when False only required
            params are included, when True both required and
            optional params are included """
        # model = avalara.comms.rest.v2.models.calc_taxes_request.CalcTaxesRequest()  # noqa: E501
        if include_optional :
            return CalcTaxesRequest(
                cfg = avalara.comms.rest.v2.models.request_config.RequestConfig(
                    retnb = True, 
                    retext = True, 
                    incrf = True, ), 
                cmpn = avalara.comms.rest.v2.models.company_data.CompanyData(
                    bscl = 56, 
                    svcl = 56, 
                    fclt = True, 
                    frch = True, 
                    reg = True, 
                    excl = [
                        avalara.comms.rest.v2.models.exclusion.Exclusion(
                            ctry = '0', 
                            st = '0', )
                        ], 
                    idnt = '0', ), 
                inv = [
                    avalara.comms.rest.v2.models.invoice.Invoice(
                        doc = '0', 
                        cmmt = True, 
                        bill = avalara.comms.rest.v2.models.location.Location(
                            cnty = '0', 
                            ctry = '0', 
                            int = True, 
                            geo = True, 
                            pcd = 56, 
                            npa = 56, 
                            fips = '0', 
                            addr = '0', 
                            city = '0', 
                            st = '0', 
                            zip = '0', ), 
                        cust = 56, 
                        lfln = True, 
                        date = datetime.datetime.strptime('2013-10-20 19:20:30.00', '%Y-%m-%d %H:%M:%S.%f'), 
                        exms = [
                            avalara.comms.rest.v2.models.tax_exemption.TaxExemption(
                                frc = True, 
                                loc = avalara.comms.rest.v2.models.location.Location(
                                    cnty = '0', 
                                    ctry = '0', 
                                    int = True, 
                                    geo = True, 
                                    pcd = 56, 
                                    npa = 56, 
                                    fips = '0', 
                                    addr = '0', 
                                    city = '0', 
                                    st = '0', 
                                    zip = '0', ), 
                                tpe = 56, 
                                lvl = 56, 
                                cat = 56, 
                                dom = 56, 
                                scp = 56, 
                                exnb = True, )
                            ], 
                        itms = [
                            avalara.comms.rest.v2.models.line_item.LineItem(
                                ref = '0', 
                                from = avalara.comms.rest.v2.models.location.Location(
                                    cnty = '0', 
                                    ctry = '0', 
                                    int = True, 
                                    geo = True, 
                                    pcd = 56, 
                                    npa = 56, 
                                    fips = '0', 
                                    addr = '0', 
                                    city = '0', 
                                    st = '0', 
                                    zip = '0', ), 
                                to = avalara.comms.rest.v2.models.location.Location(
                                    cnty = '0', 
                                    ctry = '0', 
                                    int = True, 
                                    geo = True, 
                                    pcd = 56, 
                                    npa = 56, 
                                    fips = '0', 
                                    addr = '0', 
                                    city = '0', 
                                    st = '0', 
                                    zip = '0', ), 
                                chg = 1.337, 
                                line = 56, 
                                min = 1.337, 
                                sale = 56, 
                                plsp = 1.337, 
                                incl = True, 
                                pror = 1.337, 
                                proadj = 56, 
                                tran = 56, 
                                serv = 56, 
                                dbt = True, 
                                adj = True, 
                                adjm = 56, 
                                disc = 56, 
                                opt = [
                                    avalara.comms.rest.v2.models.key_value_pair.KeyValuePair(
                                        key = '0', 
                                        val = '0', )
                                    ], 
                                prop = 56, 
                                cust = 56, 
                                lfln = True, 
                                date = datetime.datetime.strptime('2013-10-20 19:20:30.00', '%Y-%m-%d %H:%M:%S.%f'), 
                                qty = 56, 
                                glref = '0', )
                            ], 
                        invm = True, 
                        dtl = True, 
                        summ = True, 
                        opt = [
                            avalara.comms.rest.v2.models.key_value_pair.KeyValuePair(
                                key = '0', 
                                val = '0', )
                            ], 
                        acct = '0', 
                        custref = '0', 
                        invn = '0', 
                        bcyc = '0', 
                        bpd = avalara.comms.rest.v2.models.billing_period.BillingPeriod(
                            month = 56, 
                            year = 56, ), 
                        ccycd = '0', )
                    ], 
                ovr = [
                    avalara.comms.rest.v2.models.tax_override.TaxOverride(
                        loc = avalara.comms.rest.v2.models.location.Location(
                            cnty = '0', 
                            ctry = '0', 
                            int = True, 
                            geo = True, 
                            pcd = 56, 
                            npa = 56, 
                            fips = '0', 
                            addr = '0', 
                            city = '0', 
                            st = '0', 
                            zip = '0', ), 
                        scp = 56, 
                        tid = 56, 
                        lvl = 56, 
                        lvl_exm = True, 
                        brkt = [
                            avalara.comms.rest.v2.models.tax_bracket.TaxBracket(
                                rate = 1.337, 
                                max = 1.337, )
                            ], )
                    ], 
                sovr = [
                    avalara.comms.rest.v2.models.safe_harbor_override.SafeHarborOverride(
                        sh = 56, 
                        old = 1.337, 
                        new = 1.337, )
                    ]
            )
        else :
            return CalcTaxesRequest(
        )

    def testCalcTaxesRequest(self):
        """Test CalcTaxesRequest"""
        inst_req_only = self.make_instance(include_optional=False)
        inst_req_and_optional = self.make_instance(include_optional=True)


if __name__ == '__main__':
    unittest.main()
