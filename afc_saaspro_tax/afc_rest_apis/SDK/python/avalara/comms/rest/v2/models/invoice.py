# coding: utf-8

"""
    SaasPro

    APIs to interface with communications tax engine.<br />The API requires Basic authentication.<br />Users with access to multiple clients must also set request header parameter for <code>client_id</code>.<br />Set <code>client_profile_id</code> to specify profile to be used for taxation.  # noqa: E501

    The version of the OpenAPI document: v2
    Generated by: https://openapi-generator.tech
"""


import pprint
import re  # noqa: F401

import six

from avalara.comms.rest.v2.configuration import Configuration


class Invoice(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'doc': 'str',
        'cmmt': 'bool',
        'bill': 'Location',
        'cust': 'int',
        'lfln': 'bool',
        'date': 'datetime',
        'exms': 'list[TaxExemption]',
        'itms': 'list[LineItem]',
        'invm': 'bool',
        'dtl': 'bool',
        'summ': 'bool',
        'opt': 'list[KeyValuePair]',
        'acct': 'str',
        'custref': 'str',
        'invn': 'str',
        'bcyc': 'str',
        'bpd': 'BillingPeriod',
        'ccycd': 'str'
    }

    attribute_map = {
        'doc': 'doc',
        'cmmt': 'cmmt',
        'bill': 'bill',
        'cust': 'cust',
        'lfln': 'lfln',
        'date': 'date',
        'exms': 'exms',
        'itms': 'itms',
        'invm': 'invm',
        'dtl': 'dtl',
        'summ': 'summ',
        'opt': 'opt',
        'acct': 'acct',
        'custref': 'custref',
        'invn': 'invn',
        'bcyc': 'bcyc',
        'bpd': 'bpd',
        'ccycd': 'ccycd'
    }

    def __init__(self, doc=None, cmmt=None, bill=None, cust=None, lfln=None, date=None, exms=None, itms=None, invm=None, dtl=None, summ=None, opt=None, acct=None, custref=None, invn=None, bcyc=None, bpd=None, ccycd=None, local_vars_configuration=None):  # noqa: E501
        """Invoice - a model defined in OpenAPI"""  # noqa: E501
        if local_vars_configuration is None:
            local_vars_configuration = Configuration()
        self.local_vars_configuration = local_vars_configuration

        self._doc = None
        self._cmmt = None
        self._bill = None
        self._cust = None
        self._lfln = None
        self._date = None
        self._exms = None
        self._itms = None
        self._invm = None
        self._dtl = None
        self._summ = None
        self._opt = None
        self._acct = None
        self._custref = None
        self._invn = None
        self._bcyc = None
        self._bpd = None
        self._ccycd = None
        self.discriminator = None

        self.doc = doc
        self.cmmt = cmmt
        self.bill = bill
        self.cust = cust
        self.lfln = lfln
        self.date = date
        self.exms = exms
        self.itms = itms
        self.invm = invm
        self.dtl = dtl
        self.summ = summ
        self.opt = opt
        self.acct = acct
        self.custref = custref
        self.invn = invn
        self.bcyc = bcyc
        self.bpd = bpd
        self.ccycd = ccycd

    @property
    def doc(self):
        """Gets the doc of this Invoice.  # noqa: E501


        :return: The doc of this Invoice.  # noqa: E501
        :rtype: str
        """
        return self._doc

    @doc.setter
    def doc(self, doc):
        """Sets the doc of this Invoice.


        :param doc: The doc of this Invoice.  # noqa: E501
        :type: str
        """

        self._doc = doc

    @property
    def cmmt(self):
        """Gets the cmmt of this Invoice.  # noqa: E501


        :return: The cmmt of this Invoice.  # noqa: E501
        :rtype: bool
        """
        return self._cmmt

    @cmmt.setter
    def cmmt(self, cmmt):
        """Sets the cmmt of this Invoice.


        :param cmmt: The cmmt of this Invoice.  # noqa: E501
        :type: bool
        """

        self._cmmt = cmmt

    @property
    def bill(self):
        """Gets the bill of this Invoice.  # noqa: E501


        :return: The bill of this Invoice.  # noqa: E501
        :rtype: Location
        """
        return self._bill

    @bill.setter
    def bill(self, bill):
        """Sets the bill of this Invoice.


        :param bill: The bill of this Invoice.  # noqa: E501
        :type: Location
        """

        self._bill = bill

    @property
    def cust(self):
        """Gets the cust of this Invoice.  # noqa: E501


        :return: The cust of this Invoice.  # noqa: E501
        :rtype: int
        """
        return self._cust

    @cust.setter
    def cust(self, cust):
        """Sets the cust of this Invoice.


        :param cust: The cust of this Invoice.  # noqa: E501
        :type: int
        """

        self._cust = cust

    @property
    def lfln(self):
        """Gets the lfln of this Invoice.  # noqa: E501


        :return: The lfln of this Invoice.  # noqa: E501
        :rtype: bool
        """
        return self._lfln

    @lfln.setter
    def lfln(self, lfln):
        """Sets the lfln of this Invoice.


        :param lfln: The lfln of this Invoice.  # noqa: E501
        :type: bool
        """

        self._lfln = lfln

    @property
    def date(self):
        """Gets the date of this Invoice.  # noqa: E501

        Invoice date.  # noqa: E501

        :return: The date of this Invoice.  # noqa: E501
        :rtype: datetime
        """
        return self._date

    @date.setter
    def date(self, date):
        """Sets the date of this Invoice.

        Invoice date.  # noqa: E501

        :param date: The date of this Invoice.  # noqa: E501
        :type: datetime
        """

        self._date = date

    @property
    def exms(self):
        """Gets the exms of this Invoice.  # noqa: E501


        :return: The exms of this Invoice.  # noqa: E501
        :rtype: list[TaxExemption]
        """
        return self._exms

    @exms.setter
    def exms(self, exms):
        """Sets the exms of this Invoice.


        :param exms: The exms of this Invoice.  # noqa: E501
        :type: list[TaxExemption]
        """

        self._exms = exms

    @property
    def itms(self):
        """Gets the itms of this Invoice.  # noqa: E501


        :return: The itms of this Invoice.  # noqa: E501
        :rtype: list[LineItem]
        """
        return self._itms

    @itms.setter
    def itms(self, itms):
        """Sets the itms of this Invoice.


        :param itms: The itms of this Invoice.  # noqa: E501
        :type: list[LineItem]
        """

        self._itms = itms

    @property
    def invm(self):
        """Gets the invm of this Invoice.  # noqa: E501


        :return: The invm of this Invoice.  # noqa: E501
        :rtype: bool
        """
        return self._invm

    @invm.setter
    def invm(self, invm):
        """Sets the invm of this Invoice.


        :param invm: The invm of this Invoice.  # noqa: E501
        :type: bool
        """

        self._invm = invm

    @property
    def dtl(self):
        """Gets the dtl of this Invoice.  # noqa: E501


        :return: The dtl of this Invoice.  # noqa: E501
        :rtype: bool
        """
        return self._dtl

    @dtl.setter
    def dtl(self, dtl):
        """Sets the dtl of this Invoice.


        :param dtl: The dtl of this Invoice.  # noqa: E501
        :type: bool
        """

        self._dtl = dtl

    @property
    def summ(self):
        """Gets the summ of this Invoice.  # noqa: E501


        :return: The summ of this Invoice.  # noqa: E501
        :rtype: bool
        """
        return self._summ

    @summ.setter
    def summ(self, summ):
        """Sets the summ of this Invoice.


        :param summ: The summ of this Invoice.  # noqa: E501
        :type: bool
        """

        self._summ = summ

    @property
    def opt(self):
        """Gets the opt of this Invoice.  # noqa: E501


        :return: The opt of this Invoice.  # noqa: E501
        :rtype: list[KeyValuePair]
        """
        return self._opt

    @opt.setter
    def opt(self, opt):
        """Sets the opt of this Invoice.


        :param opt: The opt of this Invoice.  # noqa: E501
        :type: list[KeyValuePair]
        """

        self._opt = opt

    @property
    def acct(self):
        """Gets the acct of this Invoice.  # noqa: E501


        :return: The acct of this Invoice.  # noqa: E501
        :rtype: str
        """
        return self._acct

    @acct.setter
    def acct(self, acct):
        """Sets the acct of this Invoice.


        :param acct: The acct of this Invoice.  # noqa: E501
        :type: str
        """

        self._acct = acct

    @property
    def custref(self):
        """Gets the custref of this Invoice.  # noqa: E501


        :return: The custref of this Invoice.  # noqa: E501
        :rtype: str
        """
        return self._custref

    @custref.setter
    def custref(self, custref):
        """Sets the custref of this Invoice.


        :param custref: The custref of this Invoice.  # noqa: E501
        :type: str
        """

        self._custref = custref

    @property
    def invn(self):
        """Gets the invn of this Invoice.  # noqa: E501


        :return: The invn of this Invoice.  # noqa: E501
        :rtype: str
        """
        return self._invn

    @invn.setter
    def invn(self, invn):
        """Sets the invn of this Invoice.


        :param invn: The invn of this Invoice.  # noqa: E501
        :type: str
        """

        self._invn = invn

    @property
    def bcyc(self):
        """Gets the bcyc of this Invoice.  # noqa: E501


        :return: The bcyc of this Invoice.  # noqa: E501
        :rtype: str
        """
        return self._bcyc

    @bcyc.setter
    def bcyc(self, bcyc):
        """Sets the bcyc of this Invoice.


        :param bcyc: The bcyc of this Invoice.  # noqa: E501
        :type: str
        """

        self._bcyc = bcyc

    @property
    def bpd(self):
        """Gets the bpd of this Invoice.  # noqa: E501


        :return: The bpd of this Invoice.  # noqa: E501
        :rtype: BillingPeriod
        """
        return self._bpd

    @bpd.setter
    def bpd(self, bpd):
        """Sets the bpd of this Invoice.


        :param bpd: The bpd of this Invoice.  # noqa: E501
        :type: BillingPeriod
        """

        self._bpd = bpd

    @property
    def ccycd(self):
        """Gets the ccycd of this Invoice.  # noqa: E501


        :return: The ccycd of this Invoice.  # noqa: E501
        :rtype: str
        """
        return self._ccycd

    @ccycd.setter
    def ccycd(self, ccycd):
        """Sets the ccycd of this Invoice.


        :param ccycd: The ccycd of this Invoice.  # noqa: E501
        :type: str
        """

        self._ccycd = ccycd

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, Invoice):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, Invoice):
            return True

        return self.to_dict() != other.to_dict()
