# coding: utf-8

"""
    SaasPro

    APIs to interface with communications tax engine.<br />The API requires Basic authentication.<br />Users with access to multiple clients must also set request header parameter for <code>client_id</code>.<br />Set <code>client_profile_id</code> to specify profile to be used for taxation.  # noqa: E501

    The version of the OpenAPI document: v2
    Generated by: https://openapi-generator.tech
"""


import pprint
import re  # noqa: F401

import six

from avalara.comms.rest.v2.configuration import Configuration


class CalcTaxesRequest(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'cfg': 'RequestConfig',
        'cmpn': 'CompanyData',
        'inv': 'list[Invoice]',
        'ovr': 'list[TaxOverride]',
        'sovr': 'list[SafeHarborOverride]'
    }

    attribute_map = {
        'cfg': 'cfg',
        'cmpn': 'cmpn',
        'inv': 'inv',
        'ovr': 'ovr',
        'sovr': 'sovr'
    }

    def __init__(self, cfg=None, cmpn=None, inv=None, ovr=None, sovr=None, local_vars_configuration=None):  # noqa: E501
        """CalcTaxesRequest - a model defined in OpenAPI"""  # noqa: E501
        if local_vars_configuration is None:
            local_vars_configuration = Configuration()
        self.local_vars_configuration = local_vars_configuration

        self._cfg = None
        self._cmpn = None
        self._inv = None
        self._ovr = None
        self._sovr = None
        self.discriminator = None

        if cfg is not None:
            self.cfg = cfg
        if cmpn is not None:
            self.cmpn = cmpn
        self.inv = inv
        self.ovr = ovr
        self.sovr = sovr

    @property
    def cfg(self):
        """Gets the cfg of this CalcTaxesRequest.  # noqa: E501


        :return: The cfg of this CalcTaxesRequest.  # noqa: E501
        :rtype: RequestConfig
        """
        return self._cfg

    @cfg.setter
    def cfg(self, cfg):
        """Sets the cfg of this CalcTaxesRequest.


        :param cfg: The cfg of this CalcTaxesRequest.  # noqa: E501
        :type: RequestConfig
        """

        self._cfg = cfg

    @property
    def cmpn(self):
        """Gets the cmpn of this CalcTaxesRequest.  # noqa: E501


        :return: The cmpn of this CalcTaxesRequest.  # noqa: E501
        :rtype: CompanyData
        """
        return self._cmpn

    @cmpn.setter
    def cmpn(self, cmpn):
        """Sets the cmpn of this CalcTaxesRequest.


        :param cmpn: The cmpn of this CalcTaxesRequest.  # noqa: E501
        :type: CompanyData
        """

        self._cmpn = cmpn

    @property
    def inv(self):
        """Gets the inv of this CalcTaxesRequest.  # noqa: E501

        List of invoices to process.  # noqa: E501

        :return: The inv of this CalcTaxesRequest.  # noqa: E501
        :rtype: list[Invoice]
        """
        return self._inv

    @inv.setter
    def inv(self, inv):
        """Sets the inv of this CalcTaxesRequest.

        List of invoices to process.  # noqa: E501

        :param inv: The inv of this CalcTaxesRequest.  # noqa: E501
        :type: list[Invoice]
        """

        self._inv = inv

    @property
    def ovr(self):
        """Gets the ovr of this CalcTaxesRequest.  # noqa: E501

        Tax rate overrides.  # noqa: E501

        :return: The ovr of this CalcTaxesRequest.  # noqa: E501
        :rtype: list[TaxOverride]
        """
        return self._ovr

    @ovr.setter
    def ovr(self, ovr):
        """Sets the ovr of this CalcTaxesRequest.

        Tax rate overrides.  # noqa: E501

        :param ovr: The ovr of this CalcTaxesRequest.  # noqa: E501
        :type: list[TaxOverride]
        """

        self._ovr = ovr

    @property
    def sovr(self):
        """Gets the sovr of this CalcTaxesRequest.  # noqa: E501

        Safe harbor overrides for USF taxes.  # noqa: E501

        :return: The sovr of this CalcTaxesRequest.  # noqa: E501
        :rtype: list[SafeHarborOverride]
        """
        return self._sovr

    @sovr.setter
    def sovr(self, sovr):
        """Sets the sovr of this CalcTaxesRequest.

        Safe harbor overrides for USF taxes.  # noqa: E501

        :param sovr: The sovr of this CalcTaxesRequest.  # noqa: E501
        :type: list[SafeHarborOverride]
        """

        self._sovr = sovr

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, CalcTaxesRequest):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, CalcTaxesRequest):
            return True

        return self.to_dict() != other.to_dict()
