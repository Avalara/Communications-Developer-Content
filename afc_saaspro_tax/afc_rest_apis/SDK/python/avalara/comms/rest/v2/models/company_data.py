# coding: utf-8

"""
    SaasPro

    APIs to interface with communications tax engine.<br />The API requires Basic authentication.<br />Users with access to multiple clients must also set request header parameter for <code>client_id</code>.<br />Set <code>client_profile_id</code> to specify profile to be used for taxation.  # noqa: E501

    The version of the OpenAPI document: v2
    Generated by: https://openapi-generator.tech
"""


import pprint
import re  # noqa: F401

import six

from avalara.comms.rest.v2.configuration import Configuration


class CompanyData(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'bscl': 'int',
        'svcl': 'int',
        'fclt': 'bool',
        'frch': 'bool',
        'reg': 'bool',
        'excl': 'list[Exclusion]',
        'idnt': 'str'
    }

    attribute_map = {
        'bscl': 'bscl',
        'svcl': 'svcl',
        'fclt': 'fclt',
        'frch': 'frch',
        'reg': 'reg',
        'excl': 'excl',
        'idnt': 'idnt'
    }

    def __init__(self, bscl=None, svcl=None, fclt=None, frch=None, reg=None, excl=None, idnt=None, local_vars_configuration=None):  # noqa: E501
        """CompanyData - a model defined in OpenAPI"""  # noqa: E501
        if local_vars_configuration is None:
            local_vars_configuration = Configuration()
        self.local_vars_configuration = local_vars_configuration

        self._bscl = None
        self._svcl = None
        self._fclt = None
        self._frch = None
        self._reg = None
        self._excl = None
        self._idnt = None
        self.discriminator = None

        self.bscl = bscl
        self.svcl = svcl
        self.fclt = fclt
        self.frch = frch
        self.reg = reg
        self.excl = excl
        self.idnt = idnt

    @property
    def bscl(self):
        """Gets the bscl of this CompanyData.  # noqa: E501

        Business class. 0 = ILEC, 1 = CLEC.  # noqa: E501

        :return: The bscl of this CompanyData.  # noqa: E501
        :rtype: int
        """
        return self._bscl

    @bscl.setter
    def bscl(self, bscl):
        """Sets the bscl of this CompanyData.

        Business class. 0 = ILEC, 1 = CLEC.  # noqa: E501

        :param bscl: The bscl of this CompanyData.  # noqa: E501
        :type: int
        """

        self._bscl = bscl

    @property
    def svcl(self):
        """Gets the svcl of this CompanyData.  # noqa: E501

        Service class. 0 = Primary Local, 1 = Primary Long Distance.  # noqa: E501

        :return: The svcl of this CompanyData.  # noqa: E501
        :rtype: int
        """
        return self._svcl

    @svcl.setter
    def svcl(self, svcl):
        """Sets the svcl of this CompanyData.

        Service class. 0 = Primary Local, 1 = Primary Long Distance.  # noqa: E501

        :param svcl: The svcl of this CompanyData.  # noqa: E501
        :type: int
        """

        self._svcl = svcl

    @property
    def fclt(self):
        """Gets the fclt of this CompanyData.  # noqa: E501

        Specifies if the carrier delivering the service has company owned facilities to provide the service.  # noqa: E501

        :return: The fclt of this CompanyData.  # noqa: E501
        :rtype: bool
        """
        return self._fclt

    @fclt.setter
    def fclt(self, fclt):
        """Sets the fclt of this CompanyData.

        Specifies if the carrier delivering the service has company owned facilities to provide the service.  # noqa: E501

        :param fclt: The fclt of this CompanyData.  # noqa: E501
        :type: bool
        """

        self._fclt = fclt

    @property
    def frch(self):
        """Gets the frch of this CompanyData.  # noqa: E501

        Indicates if the company provides services sold pursuant to a franchise agreement between the carrier and jurisdiction.  # noqa: E501

        :return: The frch of this CompanyData.  # noqa: E501
        :rtype: bool
        """
        return self._frch

    @frch.setter
    def frch(self, frch):
        """Sets the frch of this CompanyData.

        Indicates if the company provides services sold pursuant to a franchise agreement between the carrier and jurisdiction.  # noqa: E501

        :param frch: The frch of this CompanyData.  # noqa: E501
        :type: bool
        """

        self._frch = frch

    @property
    def reg(self):
        """Gets the reg of this CompanyData.  # noqa: E501

        Indicates if company is regulated.  # noqa: E501

        :return: The reg of this CompanyData.  # noqa: E501
        :rtype: bool
        """
        return self._reg

    @reg.setter
    def reg(self, reg):
        """Sets the reg of this CompanyData.

        Indicates if company is regulated.  # noqa: E501

        :param reg: The reg of this CompanyData.  # noqa: E501
        :type: bool
        """

        self._reg = reg

    @property
    def excl(self):
        """Gets the excl of this CompanyData.  # noqa: E501

        Exclusion list.  # noqa: E501

        :return: The excl of this CompanyData.  # noqa: E501
        :rtype: list[Exclusion]
        """
        return self._excl

    @excl.setter
    def excl(self, excl):
        """Sets the excl of this CompanyData.

        Exclusion list.  # noqa: E501

        :param excl: The excl of this CompanyData.  # noqa: E501
        :type: list[Exclusion]
        """

        self._excl = excl

    @property
    def idnt(self):
        """Gets the idnt of this CompanyData.  # noqa: E501

        An optional company identifier for reporting  # noqa: E501

        :return: The idnt of this CompanyData.  # noqa: E501
        :rtype: str
        """
        return self._idnt

    @idnt.setter
    def idnt(self, idnt):
        """Sets the idnt of this CompanyData.

        An optional company identifier for reporting  # noqa: E501

        :param idnt: The idnt of this CompanyData.  # noqa: E501
        :type: str
        """

        self._idnt = idnt

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, CompanyData):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, CompanyData):
            return True

        return self.to_dict() != other.to_dict()
