# coding: utf-8

"""
    SaasPro

    APIs to interface with communications tax engine.<br />The API requires Basic authentication.<br />Users with access to multiple clients must also set request header parameter for <code>client_id</code>.<br />Set <code>client_profile_id</code> to specify profile to be used for taxation.  # noqa: E501

    The version of the OpenAPI document: v2
    Generated by: https://openapi-generator.tech
"""


import pprint
import re  # noqa: F401

import six

from avalara.comms.rest.v2.configuration import Configuration


class Location(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'cnty': 'str',
        'ctry': 'str',
        'int': 'bool',
        'geo': 'bool',
        'pcd': 'int',
        'npa': 'int',
        'fips': 'str',
        'addr': 'str',
        'city': 'str',
        'st': 'str',
        'zip': 'str'
    }

    attribute_map = {
        'cnty': 'cnty',
        'ctry': 'ctry',
        'int': 'int',
        'geo': 'geo',
        'pcd': 'pcd',
        'npa': 'npa',
        'fips': 'fips',
        'addr': 'addr',
        'city': 'city',
        'st': 'st',
        'zip': 'zip'
    }

    def __init__(self, cnty=None, ctry=None, int=None, geo=None, pcd=None, npa=None, fips=None, addr=None, city=None, st=None, zip=None, local_vars_configuration=None):  # noqa: E501
        """Location - a model defined in OpenAPI"""  # noqa: E501
        if local_vars_configuration is None:
            local_vars_configuration = Configuration()
        self.local_vars_configuration = local_vars_configuration

        self._cnty = None
        self._ctry = None
        self._int = None
        self._geo = None
        self._pcd = None
        self._npa = None
        self._fips = None
        self._addr = None
        self._city = None
        self._st = None
        self._zip = None
        self.discriminator = None

        self.cnty = cnty
        self.ctry = ctry
        self.int = int
        self.geo = geo
        self.pcd = pcd
        self.npa = npa
        self.fips = fips
        self.addr = addr
        self.city = city
        self.st = st
        self.zip = zip

    @property
    def cnty(self):
        """Gets the cnty of this Location.  # noqa: E501

        County name.  # noqa: E501

        :return: The cnty of this Location.  # noqa: E501
        :rtype: str
        """
        return self._cnty

    @cnty.setter
    def cnty(self, cnty):
        """Sets the cnty of this Location.

        County name.  # noqa: E501

        :param cnty: The cnty of this Location.  # noqa: E501
        :type: str
        """

        self._cnty = cnty

    @property
    def ctry(self):
        """Gets the ctry of this Location.  # noqa: E501

        Country ISO code.  # noqa: E501

        :return: The ctry of this Location.  # noqa: E501
        :rtype: str
        """
        return self._ctry

    @ctry.setter
    def ctry(self, ctry):
        """Sets the ctry of this Location.

        Country ISO code.  # noqa: E501

        :param ctry: The ctry of this Location.  # noqa: E501
        :type: str
        """

        self._ctry = ctry

    @property
    def int(self):
        """Gets the int of this Location.  # noqa: E501

        Indicates if the location is within city limits.  Default: true.  # noqa: E501

        :return: The int of this Location.  # noqa: E501
        :rtype: bool
        """
        return self._int

    @int.setter
    def int(self, int):
        """Sets the int of this Location.

        Indicates if the location is within city limits.  Default: true.  # noqa: E501

        :param int: The int of this Location.  # noqa: E501
        :type: bool
        """

        self._int = int

    @property
    def geo(self):
        """Gets the geo of this Location.  # noqa: E501

        Indicates if this address should be geocoded in order to obtain taxing jurisdiction.  Default: false.  # noqa: E501

        :return: The geo of this Location.  # noqa: E501
        :rtype: bool
        """
        return self._geo

    @geo.setter
    def geo(self, geo):
        """Sets the geo of this Location.

        Indicates if this address should be geocoded in order to obtain taxing jurisdiction.  Default: false.  # noqa: E501

        :param geo: The geo of this Location.  # noqa: E501
        :type: bool
        """

        self._geo = geo

    @property
    def pcd(self):
        """Gets the pcd of this Location.  # noqa: E501

        PCode for taxing jurisdiction.  # noqa: E501

        :return: The pcd of this Location.  # noqa: E501
        :rtype: int
        """
        return self._pcd

    @pcd.setter
    def pcd(self, pcd):
        """Sets the pcd of this Location.

        PCode for taxing jurisdiction.  # noqa: E501

        :param pcd: The pcd of this Location.  # noqa: E501
        :type: int
        """

        self._pcd = pcd

    @property
    def npa(self):
        """Gets the npa of this Location.  # noqa: E501

        NPANXX number.  # noqa: E501

        :return: The npa of this Location.  # noqa: E501
        :rtype: int
        """
        return self._npa

    @npa.setter
    def npa(self, npa):
        """Sets the npa of this Location.

        NPANXX number.  # noqa: E501

        :param npa: The npa of this Location.  # noqa: E501
        :type: int
        """

        self._npa = npa

    @property
    def fips(self):
        """Gets the fips of this Location.  # noqa: E501

        FIPS code for taxing jurisdiction.  # noqa: E501

        :return: The fips of this Location.  # noqa: E501
        :rtype: str
        """
        return self._fips

    @fips.setter
    def fips(self, fips):
        """Sets the fips of this Location.

        FIPS code for taxing jurisdiction.  # noqa: E501

        :param fips: The fips of this Location.  # noqa: E501
        :type: str
        """

        self._fips = fips

    @property
    def addr(self):
        """Gets the addr of this Location.  # noqa: E501

        Street address.  # noqa: E501

        :return: The addr of this Location.  # noqa: E501
        :rtype: str
        """
        return self._addr

    @addr.setter
    def addr(self, addr):
        """Sets the addr of this Location.

        Street address.  # noqa: E501

        :param addr: The addr of this Location.  # noqa: E501
        :type: str
        """

        self._addr = addr

    @property
    def city(self):
        """Gets the city of this Location.  # noqa: E501

        City name.  # noqa: E501

        :return: The city of this Location.  # noqa: E501
        :rtype: str
        """
        return self._city

    @city.setter
    def city(self, city):
        """Sets the city of this Location.

        City name.  # noqa: E501

        :param city: The city of this Location.  # noqa: E501
        :type: str
        """

        self._city = city

    @property
    def st(self):
        """Gets the st of this Location.  # noqa: E501

        State name or abbreviation.  # noqa: E501

        :return: The st of this Location.  # noqa: E501
        :rtype: str
        """
        return self._st

    @st.setter
    def st(self, st):
        """Sets the st of this Location.

        State name or abbreviation.  # noqa: E501

        :param st: The st of this Location.  # noqa: E501
        :type: str
        """

        self._st = st

    @property
    def zip(self):
        """Gets the zip of this Location.  # noqa: E501

        Postal code.  # noqa: E501

        :return: The zip of this Location.  # noqa: E501
        :rtype: str
        """
        return self._zip

    @zip.setter
    def zip(self, zip):
        """Sets the zip of this Location.

        Postal code.  # noqa: E501

        :param zip: The zip of this Location.  # noqa: E501
        :type: str
        """

        self._zip = zip

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, Location):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, Location):
            return True

        return self.to_dict() != other.to_dict()
