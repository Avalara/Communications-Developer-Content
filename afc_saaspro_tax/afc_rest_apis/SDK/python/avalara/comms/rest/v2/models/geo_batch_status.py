# coding: utf-8

"""
    SaasPro

    APIs to interface with communications tax engine.<br />The API requires Basic authentication.<br />Users with access to multiple clients must also set request header parameter for <code>client_id</code>.<br />Set <code>client_profile_id</code> to specify profile to be used for taxation.<br /><br />Effective January 1st, 2022 all Avalara products will be enforcing TLS 1.2 server-side. Please ensure that your implementation sets a minimal of TLS 1.2 encryption when making web requests to Avalara APIs.  # noqa: E501

    The version of the OpenAPI document: v2
    Generated by: https://openapi-generator.tech
"""


import pprint
import re  # noqa: F401

import six

from avalara.comms.rest.v2.configuration import Configuration


class GeoBatchStatus(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'process_id': 'int',
        'request_date': 'datetime',
        'processing_start': 'datetime',
        'processing_end': 'datetime',
        'status': 'str',
        'downloads': 'GeoBatchDownloadResponse',
        'error': 'list[Error]'
    }

    attribute_map = {
        'process_id': 'ProcessId',
        'request_date': 'RequestDate',
        'processing_start': 'ProcessingStart',
        'processing_end': 'ProcessingEnd',
        'status': 'Status',
        'downloads': 'Downloads',
        'error': 'Error'
    }

    def __init__(self, process_id=None, request_date=None, processing_start=None, processing_end=None, status=None, downloads=None, error=None, local_vars_configuration=None):  # noqa: E501
        """GeoBatchStatus - a model defined in OpenAPI"""  # noqa: E501
        if local_vars_configuration is None:
            local_vars_configuration = Configuration()
        self.local_vars_configuration = local_vars_configuration

        self._process_id = None
        self._request_date = None
        self._processing_start = None
        self._processing_end = None
        self._status = None
        self._downloads = None
        self._error = None
        self.discriminator = None

        self.process_id = process_id
        self.request_date = request_date
        self.processing_start = processing_start
        self.processing_end = processing_end
        self.status = status
        if downloads is not None:
            self.downloads = downloads
        self.error = error

    @property
    def process_id(self):
        """Gets the process_id of this GeoBatchStatus.  # noqa: E501

        Process ID for Batch file.  # noqa: E501

        :return: The process_id of this GeoBatchStatus.  # noqa: E501
        :rtype: int
        """
        return self._process_id

    @process_id.setter
    def process_id(self, process_id):
        """Sets the process_id of this GeoBatchStatus.

        Process ID for Batch file.  # noqa: E501

        :param process_id: The process_id of this GeoBatchStatus.  # noqa: E501
        :type: int
        """

        self._process_id = process_id

    @property
    def request_date(self):
        """Gets the request_date of this GeoBatchStatus.  # noqa: E501

        Request Date.  # noqa: E501

        :return: The request_date of this GeoBatchStatus.  # noqa: E501
        :rtype: datetime
        """
        return self._request_date

    @request_date.setter
    def request_date(self, request_date):
        """Sets the request_date of this GeoBatchStatus.

        Request Date.  # noqa: E501

        :param request_date: The request_date of this GeoBatchStatus.  # noqa: E501
        :type: datetime
        """

        self._request_date = request_date

    @property
    def processing_start(self):
        """Gets the processing_start of this GeoBatchStatus.  # noqa: E501

        Processing Start.  # noqa: E501

        :return: The processing_start of this GeoBatchStatus.  # noqa: E501
        :rtype: datetime
        """
        return self._processing_start

    @processing_start.setter
    def processing_start(self, processing_start):
        """Sets the processing_start of this GeoBatchStatus.

        Processing Start.  # noqa: E501

        :param processing_start: The processing_start of this GeoBatchStatus.  # noqa: E501
        :type: datetime
        """

        self._processing_start = processing_start

    @property
    def processing_end(self):
        """Gets the processing_end of this GeoBatchStatus.  # noqa: E501

        Processing End.  # noqa: E501

        :return: The processing_end of this GeoBatchStatus.  # noqa: E501
        :rtype: datetime
        """
        return self._processing_end

    @processing_end.setter
    def processing_end(self, processing_end):
        """Sets the processing_end of this GeoBatchStatus.

        Processing End.  # noqa: E501

        :param processing_end: The processing_end of this GeoBatchStatus.  # noqa: E501
        :type: datetime
        """

        self._processing_end = processing_end

    @property
    def status(self):
        """Gets the status of this GeoBatchStatus.  # noqa: E501

        Status Of Batch File.  # noqa: E501

        :return: The status of this GeoBatchStatus.  # noqa: E501
        :rtype: str
        """
        return self._status

    @status.setter
    def status(self, status):
        """Sets the status of this GeoBatchStatus.

        Status Of Batch File.  # noqa: E501

        :param status: The status of this GeoBatchStatus.  # noqa: E501
        :type: str
        """

        self._status = status

    @property
    def downloads(self):
        """Gets the downloads of this GeoBatchStatus.  # noqa: E501


        :return: The downloads of this GeoBatchStatus.  # noqa: E501
        :rtype: GeoBatchDownloadResponse
        """
        return self._downloads

    @downloads.setter
    def downloads(self, downloads):
        """Sets the downloads of this GeoBatchStatus.


        :param downloads: The downloads of this GeoBatchStatus.  # noqa: E501
        :type: GeoBatchDownloadResponse
        """

        self._downloads = downloads

    @property
    def error(self):
        """Gets the error of this GeoBatchStatus.  # noqa: E501

        Error information.  # noqa: E501

        :return: The error of this GeoBatchStatus.  # noqa: E501
        :rtype: list[Error]
        """
        return self._error

    @error.setter
    def error(self, error):
        """Sets the error of this GeoBatchStatus.

        Error information.  # noqa: E501

        :param error: The error of this GeoBatchStatus.  # noqa: E501
        :type: list[Error]
        """

        self._error = error

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, GeoBatchStatus):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, GeoBatchStatus):
            return True

        return self.to_dict() != other.to_dict()
