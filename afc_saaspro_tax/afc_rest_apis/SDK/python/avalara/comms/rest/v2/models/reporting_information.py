# coding: utf-8

"""
    SaasPro

    APIs to interface with communications tax engine.<br />The API requires Basic authentication.<br />Users with access to multiple clients must also set request header parameter for <code>client_id</code>.<br />Set <code>client_profile_id</code> to specify profile to be used for taxation.  # noqa: E501

    The version of the OpenAPI document: v2
    Generated by: https://openapi-generator.tech
"""


import pprint
import re  # noqa: F401

import six

from avalara.comms.rest.v2.configuration import Configuration


class ReportingInformation(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'acct': 'str',
        'custref': 'str',
        'invn': 'str',
        'bcyc': 'str',
        'ccycd': 'str',
        'ccydesc': 'str'
    }

    attribute_map = {
        'acct': 'acct',
        'custref': 'custref',
        'invn': 'invn',
        'bcyc': 'bcyc',
        'ccycd': 'ccycd',
        'ccydesc': 'ccydesc'
    }

    def __init__(self, acct=None, custref=None, invn=None, bcyc=None, ccycd=None, ccydesc=None, local_vars_configuration=None):  # noqa: E501
        """ReportingInformation - a model defined in OpenAPI"""  # noqa: E501
        if local_vars_configuration is None:
            local_vars_configuration = Configuration()
        self.local_vars_configuration = local_vars_configuration

        self._acct = None
        self._custref = None
        self._invn = None
        self._bcyc = None
        self._ccycd = None
        self._ccydesc = None
        self.discriminator = None

        self.acct = acct
        self.custref = custref
        self.invn = invn
        self.bcyc = bcyc
        self.ccycd = ccycd
        self.ccydesc = ccydesc

    @property
    def acct(self):
        """Gets the acct of this ReportingInformation.  # noqa: E501


        :return: The acct of this ReportingInformation.  # noqa: E501
        :rtype: str
        """
        return self._acct

    @acct.setter
    def acct(self, acct):
        """Sets the acct of this ReportingInformation.


        :param acct: The acct of this ReportingInformation.  # noqa: E501
        :type: str
        """

        self._acct = acct

    @property
    def custref(self):
        """Gets the custref of this ReportingInformation.  # noqa: E501


        :return: The custref of this ReportingInformation.  # noqa: E501
        :rtype: str
        """
        return self._custref

    @custref.setter
    def custref(self, custref):
        """Sets the custref of this ReportingInformation.


        :param custref: The custref of this ReportingInformation.  # noqa: E501
        :type: str
        """

        self._custref = custref

    @property
    def invn(self):
        """Gets the invn of this ReportingInformation.  # noqa: E501


        :return: The invn of this ReportingInformation.  # noqa: E501
        :rtype: str
        """
        return self._invn

    @invn.setter
    def invn(self, invn):
        """Sets the invn of this ReportingInformation.


        :param invn: The invn of this ReportingInformation.  # noqa: E501
        :type: str
        """

        self._invn = invn

    @property
    def bcyc(self):
        """Gets the bcyc of this ReportingInformation.  # noqa: E501


        :return: The bcyc of this ReportingInformation.  # noqa: E501
        :rtype: str
        """
        return self._bcyc

    @bcyc.setter
    def bcyc(self, bcyc):
        """Sets the bcyc of this ReportingInformation.


        :param bcyc: The bcyc of this ReportingInformation.  # noqa: E501
        :type: str
        """

        self._bcyc = bcyc

    @property
    def ccycd(self):
        """Gets the ccycd of this ReportingInformation.  # noqa: E501


        :return: The ccycd of this ReportingInformation.  # noqa: E501
        :rtype: str
        """
        return self._ccycd

    @ccycd.setter
    def ccycd(self, ccycd):
        """Sets the ccycd of this ReportingInformation.


        :param ccycd: The ccycd of this ReportingInformation.  # noqa: E501
        :type: str
        """

        self._ccycd = ccycd

    @property
    def ccydesc(self):
        """Gets the ccydesc of this ReportingInformation.  # noqa: E501


        :return: The ccydesc of this ReportingInformation.  # noqa: E501
        :rtype: str
        """
        return self._ccydesc

    @ccydesc.setter
    def ccydesc(self, ccydesc):
        """Sets the ccydesc of this ReportingInformation.


        :param ccydesc: The ccydesc of this ReportingInformation.  # noqa: E501
        :type: str
        """

        self._ccydesc = ccydesc

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, ReportingInformation):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, ReportingInformation):
            return True

        return self.to_dict() != other.to_dict()
