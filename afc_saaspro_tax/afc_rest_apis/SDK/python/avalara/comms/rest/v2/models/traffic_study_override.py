# coding: utf-8

"""
    SaasPro

    APIs to interface with communications tax engine.<br />The API requires Basic authentication.<br />Users with access to multiple clients must also set request header parameter for <code>client_id</code>.<br />Set <code>client_profile_id</code> to specify profile to be used for taxation.<br /><br />Effective January 1st, 2022 all Avalara products will be enforcing TLS 1.2 server-side. Please ensure that your implementation sets a minimal of TLS 1.2 encryption when making web requests to Avalara APIs.  # noqa: E501

    The version of the OpenAPI document: v2
    Generated by: https://openapi-generator.tech
"""


import pprint
import re  # noqa: F401

import six

from avalara.comms.rest.v2.configuration import Configuration


class TrafficStudyOverride(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'traffic_study_type': 'int',
        'safe_harbor_fed_pcnt': 'float',
        'traffic_study_fed_pcnt': 'float'
    }

    attribute_map = {
        'traffic_study_type': 'TrafficStudyType',
        'safe_harbor_fed_pcnt': 'SafeHarborFedPcnt',
        'traffic_study_fed_pcnt': 'TrafficStudyFedPcnt'
    }

    def __init__(self, traffic_study_type=None, safe_harbor_fed_pcnt=None, traffic_study_fed_pcnt=None, local_vars_configuration=None):  # noqa: E501
        """TrafficStudyOverride - a model defined in OpenAPI"""  # noqa: E501
        if local_vars_configuration is None:
            local_vars_configuration = Configuration()
        self.local_vars_configuration = local_vars_configuration

        self._traffic_study_type = None
        self._safe_harbor_fed_pcnt = None
        self._traffic_study_fed_pcnt = None
        self.discriminator = None

        if traffic_study_type is not None:
            self.traffic_study_type = traffic_study_type
        self.safe_harbor_fed_pcnt = safe_harbor_fed_pcnt
        if traffic_study_fed_pcnt is not None:
            self.traffic_study_fed_pcnt = traffic_study_fed_pcnt

    @property
    def traffic_study_type(self):
        """Gets the traffic_study_type of this TrafficStudyOverride.  # noqa: E501

        Defines which transaction type the traffic study override applies to.  Ref enum SafeHarborType for list.  # noqa: E501

        :return: The traffic_study_type of this TrafficStudyOverride.  # noqa: E501
        :rtype: int
        """
        return self._traffic_study_type

    @traffic_study_type.setter
    def traffic_study_type(self, traffic_study_type):
        """Sets the traffic_study_type of this TrafficStudyOverride.

        Defines which transaction type the traffic study override applies to.  Ref enum SafeHarborType for list.  # noqa: E501

        :param traffic_study_type: The traffic_study_type of this TrafficStudyOverride.  # noqa: E501
        :type: int
        """

        self._traffic_study_type = traffic_study_type

    @property
    def safe_harbor_fed_pcnt(self):
        """Gets the safe_harbor_fed_pcnt of this TrafficStudyOverride.  # noqa: E501

        Safe harbor value to be overriden.  Ref class SafeHarborTams for default values.  # noqa: E501

        :return: The safe_harbor_fed_pcnt of this TrafficStudyOverride.  # noqa: E501
        :rtype: float
        """
        return self._safe_harbor_fed_pcnt

    @safe_harbor_fed_pcnt.setter
    def safe_harbor_fed_pcnt(self, safe_harbor_fed_pcnt):
        """Sets the safe_harbor_fed_pcnt of this TrafficStudyOverride.

        Safe harbor value to be overriden.  Ref class SafeHarborTams for default values.  # noqa: E501

        :param safe_harbor_fed_pcnt: The safe_harbor_fed_pcnt of this TrafficStudyOverride.  # noqa: E501
        :type: float
        """

        self._safe_harbor_fed_pcnt = safe_harbor_fed_pcnt

    @property
    def traffic_study_fed_pcnt(self):
        """Gets the traffic_study_fed_pcnt of this TrafficStudyOverride.  # noqa: E501

        Client provided traffic study rate (Federal) to be used instead of safe harbor.  # noqa: E501

        :return: The traffic_study_fed_pcnt of this TrafficStudyOverride.  # noqa: E501
        :rtype: float
        """
        return self._traffic_study_fed_pcnt

    @traffic_study_fed_pcnt.setter
    def traffic_study_fed_pcnt(self, traffic_study_fed_pcnt):
        """Sets the traffic_study_fed_pcnt of this TrafficStudyOverride.

        Client provided traffic study rate (Federal) to be used instead of safe harbor.  # noqa: E501

        :param traffic_study_fed_pcnt: The traffic_study_fed_pcnt of this TrafficStudyOverride.  # noqa: E501
        :type: float
        """

        self._traffic_study_fed_pcnt = traffic_study_fed_pcnt

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, TrafficStudyOverride):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, TrafficStudyOverride):
            return True

        return self.to_dict() != other.to_dict()
