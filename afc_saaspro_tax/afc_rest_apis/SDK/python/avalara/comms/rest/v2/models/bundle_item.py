# coding: utf-8

"""
    SaasPro

    APIs to interface with communications tax engine.<br />The API requires Basic authentication.<br />Users with access to multiple clients must also set request header parameter for <code>client_id</code>.<br />Set <code>client_profile_id</code> to specify profile to be used for taxation.  # noqa: E501

    The version of the OpenAPI document: v2
    Generated by: https://openapi-generator.tech
"""


import pprint
import re  # noqa: F401

import six

from avalara.comms.rest.v2.configuration import Configuration


class BundleItem(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'transaction_id': 'int',
        'service_id': 'int',
        'percentage': 'float',
        'fixed_amount': 'float',
        'lines': 'int',
        'minutes': 'float',
        'transaction_desc': 'str',
        'service_desc': 'str'
    }

    attribute_map = {
        'transaction_id': 'TransactionId',
        'service_id': 'ServiceId',
        'percentage': 'Percentage',
        'fixed_amount': 'FixedAmount',
        'lines': 'Lines',
        'minutes': 'Minutes',
        'transaction_desc': 'TransactionDesc',
        'service_desc': 'ServiceDesc'
    }

    def __init__(self, transaction_id=None, service_id=None, percentage=None, fixed_amount=None, lines=None, minutes=None, transaction_desc=None, service_desc=None, local_vars_configuration=None):  # noqa: E501
        """BundleItem - a model defined in OpenAPI"""  # noqa: E501
        if local_vars_configuration is None:
            local_vars_configuration = Configuration()
        self.local_vars_configuration = local_vars_configuration

        self._transaction_id = None
        self._service_id = None
        self._percentage = None
        self._fixed_amount = None
        self._lines = None
        self._minutes = None
        self._transaction_desc = None
        self._service_desc = None
        self.discriminator = None

        if transaction_id is not None:
            self.transaction_id = transaction_id
        if service_id is not None:
            self.service_id = service_id
        self.percentage = percentage
        self.fixed_amount = fixed_amount
        self.lines = lines
        self.minutes = minutes
        self.transaction_desc = transaction_desc
        self.service_desc = service_desc

    @property
    def transaction_id(self):
        """Gets the transaction_id of this BundleItem.  # noqa: E501

        Transaction id for item  # noqa: E501

        :return: The transaction_id of this BundleItem.  # noqa: E501
        :rtype: int
        """
        return self._transaction_id

    @transaction_id.setter
    def transaction_id(self, transaction_id):
        """Sets the transaction_id of this BundleItem.

        Transaction id for item  # noqa: E501

        :param transaction_id: The transaction_id of this BundleItem.  # noqa: E501
        :type: int
        """

        self._transaction_id = transaction_id

    @property
    def service_id(self):
        """Gets the service_id of this BundleItem.  # noqa: E501

        Service id for item  # noqa: E501

        :return: The service_id of this BundleItem.  # noqa: E501
        :rtype: int
        """
        return self._service_id

    @service_id.setter
    def service_id(self, service_id):
        """Sets the service_id of this BundleItem.

        Service id for item  # noqa: E501

        :param service_id: The service_id of this BundleItem.  # noqa: E501
        :type: int
        """

        self._service_id = service_id

    @property
    def percentage(self):
        """Gets the percentage of this BundleItem.  # noqa: E501

        Percentage of package charge to be applied to item  # noqa: E501

        :return: The percentage of this BundleItem.  # noqa: E501
        :rtype: float
        """
        return self._percentage

    @percentage.setter
    def percentage(self, percentage):
        """Sets the percentage of this BundleItem.

        Percentage of package charge to be applied to item  # noqa: E501

        :param percentage: The percentage of this BundleItem.  # noqa: E501
        :type: float
        """

        self._percentage = percentage

    @property
    def fixed_amount(self):
        """Gets the fixed_amount of this BundleItem.  # noqa: E501

        Fixed charge to be applied to item  # noqa: E501

        :return: The fixed_amount of this BundleItem.  # noqa: E501
        :rtype: float
        """
        return self._fixed_amount

    @fixed_amount.setter
    def fixed_amount(self, fixed_amount):
        """Sets the fixed_amount of this BundleItem.

        Fixed charge to be applied to item  # noqa: E501

        :param fixed_amount: The fixed_amount of this BundleItem.  # noqa: E501
        :type: float
        """

        self._fixed_amount = fixed_amount

    @property
    def lines(self):
        """Gets the lines of this BundleItem.  # noqa: E501

        Fixed lines to be applied to item  # noqa: E501

        :return: The lines of this BundleItem.  # noqa: E501
        :rtype: int
        """
        return self._lines

    @lines.setter
    def lines(self, lines):
        """Sets the lines of this BundleItem.

        Fixed lines to be applied to item  # noqa: E501

        :param lines: The lines of this BundleItem.  # noqa: E501
        :type: int
        """

        self._lines = lines

    @property
    def minutes(self):
        """Gets the minutes of this BundleItem.  # noqa: E501

        Fixed minutes to be applied to item  # noqa: E501

        :return: The minutes of this BundleItem.  # noqa: E501
        :rtype: float
        """
        return self._minutes

    @minutes.setter
    def minutes(self, minutes):
        """Sets the minutes of this BundleItem.

        Fixed minutes to be applied to item  # noqa: E501

        :param minutes: The minutes of this BundleItem.  # noqa: E501
        :type: float
        """

        self._minutes = minutes

    @property
    def transaction_desc(self):
        """Gets the transaction_desc of this BundleItem.  # noqa: E501

        Transaction id for item  # noqa: E501

        :return: The transaction_desc of this BundleItem.  # noqa: E501
        :rtype: str
        """
        return self._transaction_desc

    @transaction_desc.setter
    def transaction_desc(self, transaction_desc):
        """Sets the transaction_desc of this BundleItem.

        Transaction id for item  # noqa: E501

        :param transaction_desc: The transaction_desc of this BundleItem.  # noqa: E501
        :type: str
        """

        self._transaction_desc = transaction_desc

    @property
    def service_desc(self):
        """Gets the service_desc of this BundleItem.  # noqa: E501

        Service id for item  # noqa: E501

        :return: The service_desc of this BundleItem.  # noqa: E501
        :rtype: str
        """
        return self._service_desc

    @service_desc.setter
    def service_desc(self, service_desc):
        """Sets the service_desc of this BundleItem.

        Service id for item  # noqa: E501

        :param service_desc: The service_desc of this BundleItem.  # noqa: E501
        :type: str
        """

        self._service_desc = service_desc

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, BundleItem):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, BundleItem):
            return True

        return self.to_dict() != other.to_dict()
