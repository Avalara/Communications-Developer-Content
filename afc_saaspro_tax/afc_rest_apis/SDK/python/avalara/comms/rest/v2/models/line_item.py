# coding: utf-8

"""
    SaasPro

    APIs to interface with communications tax engine.<br />The API requires Basic authentication.<br />Users with access to multiple clients must also set request header parameter for <code>client_id</code>.<br />Set <code>client_profile_id</code> to specify profile to be used for taxation.  # noqa: E501

    The version of the OpenAPI document: v2
    Generated by: https://openapi-generator.tech
"""


import pprint
import re  # noqa: F401

import six

from avalara.comms.rest.v2.configuration import Configuration


class LineItem(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'ref': 'str',
        '_from': 'Location',
        'to': 'Location',
        'chg': 'float',
        'line': 'int',
        'loc': 'int',
        'min': 'float',
        'sale': 'int',
        'plsp': 'float',
        'incl': 'bool',
        'pror': 'float',
        'proadj': 'int',
        'tran': 'int',
        'serv': 'int',
        'dbt': 'bool',
        'adj': 'bool',
        'adjm': 'int',
        'disc': 'int',
        'opt': 'list[KeyValuePair]',
        'prop': 'int',
        'bill': 'Location',
        'cust': 'int',
        'lfln': 'bool',
        'date': 'datetime',
        'qty': 'int',
        'glref': 'str'
    }

    attribute_map = {
        'ref': 'ref',
        '_from': 'from',
        'to': 'to',
        'chg': 'chg',
        'line': 'line',
        'loc': 'loc',
        'min': 'min',
        'sale': 'sale',
        'plsp': 'plsp',
        'incl': 'incl',
        'pror': 'pror',
        'proadj': 'proadj',
        'tran': 'tran',
        'serv': 'serv',
        'dbt': 'dbt',
        'adj': 'adj',
        'adjm': 'adjm',
        'disc': 'disc',
        'opt': 'opt',
        'prop': 'prop',
        'bill': 'bill',
        'cust': 'cust',
        'lfln': 'lfln',
        'date': 'date',
        'qty': 'qty',
        'glref': 'glref'
    }

    def __init__(self, ref=None, _from=None, to=None, chg=None, line=None, loc=None, min=None, sale=None, plsp=None, incl=None, pror=None, proadj=None, tran=None, serv=None, dbt=None, adj=None, adjm=None, disc=None, opt=None, prop=None, bill=None, cust=None, lfln=None, date=None, qty=None, glref=None, local_vars_configuration=None):  # noqa: E501
        """LineItem - a model defined in OpenAPI"""  # noqa: E501
        if local_vars_configuration is None:
            local_vars_configuration = Configuration()
        self.local_vars_configuration = local_vars_configuration

        self._ref = None
        self.__from = None
        self._to = None
        self._chg = None
        self._line = None
        self._loc = None
        self._min = None
        self._sale = None
        self._plsp = None
        self._incl = None
        self._pror = None
        self._proadj = None
        self._tran = None
        self._serv = None
        self._dbt = None
        self._adj = None
        self._adjm = None
        self._disc = None
        self._opt = None
        self._prop = None
        self._bill = None
        self._cust = None
        self._lfln = None
        self._date = None
        self._qty = None
        self._glref = None
        self.discriminator = None

        self.ref = ref
        if _from is not None:
            self._from = _from
        if to is not None:
            self.to = to
        self.chg = chg
        self.line = line
        self.loc = loc
        self.min = min
        self.sale = sale
        self.plsp = plsp
        self.incl = incl
        self.pror = pror
        if proadj is not None:
            self.proadj = proadj
        self.tran = tran
        self.serv = serv
        self.dbt = dbt
        self.adj = adj
        self.adjm = adjm
        self.disc = disc
        self.opt = opt
        self.prop = prop
        if bill is not None:
            self.bill = bill
        self.cust = cust
        self.lfln = lfln
        self.date = date
        self.qty = qty
        self.glref = glref

    @property
    def ref(self):
        """Gets the ref of this LineItem.  # noqa: E501

        Reference ID for line item.  # noqa: E501

        :return: The ref of this LineItem.  # noqa: E501
        :rtype: str
        """
        return self._ref

    @ref.setter
    def ref(self, ref):
        """Sets the ref of this LineItem.

        Reference ID for line item.  # noqa: E501

        :param ref: The ref of this LineItem.  # noqa: E501
        :type: str
        """

        self._ref = ref

    @property
    def _from(self):
        """Gets the _from of this LineItem.  # noqa: E501


        :return: The _from of this LineItem.  # noqa: E501
        :rtype: Location
        """
        return self.__from

    @_from.setter
    def _from(self, _from):
        """Sets the _from of this LineItem.


        :param _from: The _from of this LineItem.  # noqa: E501
        :type: Location
        """

        self.__from = _from

    @property
    def to(self):
        """Gets the to of this LineItem.  # noqa: E501


        :return: The to of this LineItem.  # noqa: E501
        :rtype: Location
        """
        return self._to

    @to.setter
    def to(self, to):
        """Sets the to of this LineItem.


        :param to: The to of this LineItem.  # noqa: E501
        :type: Location
        """

        self._to = to

    @property
    def chg(self):
        """Gets the chg of this LineItem.  # noqa: E501

        Charge amount.  Default: 0.  # noqa: E501

        :return: The chg of this LineItem.  # noqa: E501
        :rtype: float
        """
        return self._chg

    @chg.setter
    def chg(self, chg):
        """Sets the chg of this LineItem.

        Charge amount.  Default: 0.  # noqa: E501

        :param chg: The chg of this LineItem.  # noqa: E501
        :type: float
        """

        self._chg = chg

    @property
    def line(self):
        """Gets the line of this LineItem.  # noqa: E501

        Number of lines.  Default: 0.  # noqa: E501

        :return: The line of this LineItem.  # noqa: E501
        :rtype: int
        """
        return self._line

    @line.setter
    def line(self, line):
        """Sets the line of this LineItem.

        Number of lines.  Default: 0.  # noqa: E501

        :param line: The line of this LineItem.  # noqa: E501
        :type: int
        """

        self._line = line

    @property
    def loc(self):
        """Gets the loc of this LineItem.  # noqa: E501

        Number of locations.  Default: 0.  # noqa: E501

        :return: The loc of this LineItem.  # noqa: E501
        :rtype: int
        """
        return self._loc

    @loc.setter
    def loc(self, loc):
        """Sets the loc of this LineItem.

        Number of locations.  Default: 0.  # noqa: E501

        :param loc: The loc of this LineItem.  # noqa: E501
        :type: int
        """

        self._loc = loc

    @property
    def min(self):
        """Gets the min of this LineItem.  # noqa: E501

        Number of minutes.  Default: 0.  # noqa: E501

        :return: The min of this LineItem.  # noqa: E501
        :rtype: float
        """
        return self._min

    @min.setter
    def min(self, min):
        """Sets the min of this LineItem.

        Number of minutes.  Default: 0.  # noqa: E501

        :param min: The min of this LineItem.  # noqa: E501
        :type: float
        """

        self._min = min

    @property
    def sale(self):
        """Gets the sale of this LineItem.  # noqa: E501

        0 - Wholesale : Indicates that the item was sold to a wholeseller.  1 - Retail : Indicates that the item was sold to an end user - a retail sale.  2 - Consumed : Indicates that the item was consumed directly (SAU products only).  3 - VendorUse : Indicates that the item is subject to vendor use tax (SAU products only).  # noqa: E501

        :return: The sale of this LineItem.  # noqa: E501
        :rtype: int
        """
        return self._sale

    @sale.setter
    def sale(self, sale):
        """Sets the sale of this LineItem.

        0 - Wholesale : Indicates that the item was sold to a wholeseller.  1 - Retail : Indicates that the item was sold to an end user - a retail sale.  2 - Consumed : Indicates that the item was consumed directly (SAU products only).  3 - VendorUse : Indicates that the item is subject to vendor use tax (SAU products only).  # noqa: E501

        :param sale: The sale of this LineItem.  # noqa: E501
        :type: int
        """

        self._sale = sale

    @property
    def plsp(self):
        """Gets the plsp of this LineItem.  # noqa: E501

        Split for private-line transactions.  # noqa: E501

        :return: The plsp of this LineItem.  # noqa: E501
        :rtype: float
        """
        return self._plsp

    @plsp.setter
    def plsp(self, plsp):
        """Sets the plsp of this LineItem.

        Split for private-line transactions.  # noqa: E501

        :param plsp: The plsp of this LineItem.  # noqa: E501
        :type: float
        """

        self._plsp = plsp

    @property
    def incl(self):
        """Gets the incl of this LineItem.  # noqa: E501

        Indicates if the charge for this line item is tax-inclusive.  # noqa: E501

        :return: The incl of this LineItem.  # noqa: E501
        :rtype: bool
        """
        return self._incl

    @incl.setter
    def incl(self, incl):
        """Sets the incl of this LineItem.

        Indicates if the charge for this line item is tax-inclusive.  # noqa: E501

        :param incl: The incl of this LineItem.  # noqa: E501
        :type: bool
        """

        self._incl = incl

    @property
    def pror(self):
        """Gets the pror of this LineItem.  # noqa: E501

        For pro-rated tax calculations. Percentage to pro-rate.  # noqa: E501

        :return: The pror of this LineItem.  # noqa: E501
        :rtype: float
        """
        return self._pror

    @pror.setter
    def pror(self, pror):
        """Sets the pror of this LineItem.

        For pro-rated tax calculations. Percentage to pro-rate.  # noqa: E501

        :param pror: The pror of this LineItem.  # noqa: E501
        :type: float
        """

        self._pror = pror

    @property
    def proadj(self):
        """Gets the proadj of this LineItem.  # noqa: E501

        For pro-rated credit or adjustment calculations.  0 = default  1 = do not return non-proratable fixed taxes in response  2 = return non-proratable fixed taxes in response  # noqa: E501

        :return: The proadj of this LineItem.  # noqa: E501
        :rtype: int
        """
        return self._proadj

    @proadj.setter
    def proadj(self, proadj):
        """Sets the proadj of this LineItem.

        For pro-rated credit or adjustment calculations.  0 = default  1 = do not return non-proratable fixed taxes in response  2 = return non-proratable fixed taxes in response  # noqa: E501

        :param proadj: The proadj of this LineItem.  # noqa: E501
        :type: int
        """

        self._proadj = proadj

    @property
    def tran(self):
        """Gets the tran of this LineItem.  # noqa: E501

        Transaction type ID.  # noqa: E501

        :return: The tran of this LineItem.  # noqa: E501
        :rtype: int
        """
        return self._tran

    @tran.setter
    def tran(self, tran):
        """Sets the tran of this LineItem.

        Transaction type ID.  # noqa: E501

        :param tran: The tran of this LineItem.  # noqa: E501
        :type: int
        """

        self._tran = tran

    @property
    def serv(self):
        """Gets the serv of this LineItem.  # noqa: E501

        Service type ID.  # noqa: E501

        :return: The serv of this LineItem.  # noqa: E501
        :rtype: int
        """
        return self._serv

    @serv.setter
    def serv(self, serv):
        """Sets the serv of this LineItem.

        Service type ID.  # noqa: E501

        :param serv: The serv of this LineItem.  # noqa: E501
        :type: int
        """

        self._serv = serv

    @property
    def dbt(self):
        """Gets the dbt of this LineItem.  # noqa: E501

        Indicates if this line item is a debit card transaction.  Default: false.  # noqa: E501

        :return: The dbt of this LineItem.  # noqa: E501
        :rtype: bool
        """
        return self._dbt

    @dbt.setter
    def dbt(self, dbt):
        """Sets the dbt of this LineItem.

        Indicates if this line item is a debit card transaction.  Default: false.  # noqa: E501

        :param dbt: The dbt of this LineItem.  # noqa: E501
        :type: bool
        """

        self._dbt = dbt

    @property
    def adj(self):
        """Gets the adj of this LineItem.  # noqa: E501

        Indicates if this line item is an adjustment.  Default: false.  # noqa: E501

        :return: The adj of this LineItem.  # noqa: E501
        :rtype: bool
        """
        return self._adj

    @adj.setter
    def adj(self, adj):
        """Sets the adj of this LineItem.

        Indicates if this line item is an adjustment.  Default: false.  # noqa: E501

        :param adj: The adj of this LineItem.  # noqa: E501
        :type: bool
        """

        self._adj = adj

    @property
    def adjm(self):
        """Gets the adjm of this LineItem.  # noqa: E501

        Adjustment method.  # noqa: E501

        :return: The adjm of this LineItem.  # noqa: E501
        :rtype: int
        """
        return self._adjm

    @adjm.setter
    def adjm(self, adjm):
        """Sets the adjm of this LineItem.

        Adjustment method.  # noqa: E501

        :param adjm: The adjm of this LineItem.  # noqa: E501
        :type: int
        """

        self._adjm = adjm

    @property
    def disc(self):
        """Gets the disc of this LineItem.  # noqa: E501

        Discount type for adjustments.  # noqa: E501

        :return: The disc of this LineItem.  # noqa: E501
        :rtype: int
        """
        return self._disc

    @disc.setter
    def disc(self, disc):
        """Sets the disc of this LineItem.

        Discount type for adjustments.  # noqa: E501

        :param disc: The disc of this LineItem.  # noqa: E501
        :type: int
        """

        self._disc = disc

    @property
    def opt(self):
        """Gets the opt of this LineItem.  # noqa: E501

        Optional values for line item. Maximum of 5. Keys must be numeric from 5 to 10.  # noqa: E501

        :return: The opt of this LineItem.  # noqa: E501
        :rtype: list[KeyValuePair]
        """
        return self._opt

    @opt.setter
    def opt(self, opt):
        """Sets the opt of this LineItem.

        Optional values for line item. Maximum of 5. Keys must be numeric from 5 to 10.  # noqa: E501

        :param opt: The opt of this LineItem.  # noqa: E501
        :type: list[KeyValuePair]
        """

        self._opt = opt

    @property
    def prop(self):
        """Gets the prop of this LineItem.  # noqa: E501

        Attribute/property value for sales and use transaction/service pairs.  # noqa: E501

        :return: The prop of this LineItem.  # noqa: E501
        :rtype: int
        """
        return self._prop

    @prop.setter
    def prop(self, prop):
        """Sets the prop of this LineItem.

        Attribute/property value for sales and use transaction/service pairs.  # noqa: E501

        :param prop: The prop of this LineItem.  # noqa: E501
        :type: int
        """

        self._prop = prop

    @property
    def bill(self):
        """Gets the bill of this LineItem.  # noqa: E501


        :return: The bill of this LineItem.  # noqa: E501
        :rtype: Location
        """
        return self._bill

    @bill.setter
    def bill(self, bill):
        """Sets the bill of this LineItem.


        :param bill: The bill of this LineItem.  # noqa: E501
        :type: Location
        """

        self._bill = bill

    @property
    def cust(self):
        """Gets the cust of this LineItem.  # noqa: E501

        Customer type.  # noqa: E501

        :return: The cust of this LineItem.  # noqa: E501
        :rtype: int
        """
        return self._cust

    @cust.setter
    def cust(self, cust):
        """Sets the cust of this LineItem.

        Customer type.  # noqa: E501

        :param cust: The cust of this LineItem.  # noqa: E501
        :type: int
        """

        self._cust = cust

    @property
    def lfln(self):
        """Gets the lfln of this LineItem.  # noqa: E501

        Indicates if customer is a Lifeline participant.  Default: false.  # noqa: E501

        :return: The lfln of this LineItem.  # noqa: E501
        :rtype: bool
        """
        return self._lfln

    @lfln.setter
    def lfln(self, lfln):
        """Sets the lfln of this LineItem.

        Indicates if customer is a Lifeline participant.  Default: false.  # noqa: E501

        :param lfln: The lfln of this LineItem.  # noqa: E501
        :type: bool
        """

        self._lfln = lfln

    @property
    def date(self):
        """Gets the date of this LineItem.  # noqa: E501

        Invoice date.  # noqa: E501

        :return: The date of this LineItem.  # noqa: E501
        :rtype: datetime
        """
        return self._date

    @date.setter
    def date(self, date):
        """Sets the date of this LineItem.

        Invoice date.  # noqa: E501

        :param date: The date of this LineItem.  # noqa: E501
        :type: datetime
        """

        self._date = date

    @property
    def qty(self):
        """Gets the qty of this LineItem.  # noqa: E501

        Quantity to be applied to the item - taxation is equivalent to repeating the item the number of times of the quantity  # noqa: E501

        :return: The qty of this LineItem.  # noqa: E501
        :rtype: int
        """
        return self._qty

    @qty.setter
    def qty(self, qty):
        """Sets the qty of this LineItem.

        Quantity to be applied to the item - taxation is equivalent to repeating the item the number of times of the quantity  # noqa: E501

        :param qty: The qty of this LineItem.  # noqa: E501
        :type: int
        """

        self._qty = qty

    @property
    def glref(self):
        """Gets the glref of this LineItem.  # noqa: E501

        General Ledger reference to be used in reporting  # noqa: E501

        :return: The glref of this LineItem.  # noqa: E501
        :rtype: str
        """
        return self._glref

    @glref.setter
    def glref(self, glref):
        """Sets the glref of this LineItem.

        General Ledger reference to be used in reporting  # noqa: E501

        :param glref: The glref of this LineItem.  # noqa: E501
        :type: str
        """

        self._glref = glref

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, LineItem):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, LineItem):
            return True

        return self.to_dict() != other.to_dict()
