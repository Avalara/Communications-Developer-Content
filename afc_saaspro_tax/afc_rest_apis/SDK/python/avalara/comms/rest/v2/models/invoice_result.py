# coding: utf-8

"""
    SaasPro

    APIs to interface with communications tax engine.<br />The API requires Basic authentication.<br />Users with access to multiple clients must also set request header parameter for <code>client_id</code>.<br />Set <code>client_profile_id</code> to specify profile to be used for taxation.  # noqa: E501

    The version of the OpenAPI document: v2
    Generated by: https://openapi-generator.tech
"""


import pprint
import re  # noqa: F401

import six

from avalara.comms.rest.v2.configuration import Configuration


class InvoiceResult(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'doc': 'str',
        'itms': 'list[LineItemResult]',
        'summ': 'list[SummarizedTax]',
        'err': 'list[Error]',
        'incrf': 'ReportingInformation'
    }

    attribute_map = {
        'doc': 'doc',
        'itms': 'itms',
        'summ': 'summ',
        'err': 'err',
        'incrf': 'incrf'
    }

    def __init__(self, doc=None, itms=None, summ=None, err=None, incrf=None, local_vars_configuration=None):  # noqa: E501
        """InvoiceResult - a model defined in OpenAPI"""  # noqa: E501
        if local_vars_configuration is None:
            local_vars_configuration = Configuration()
        self.local_vars_configuration = local_vars_configuration

        self._doc = None
        self._itms = None
        self._summ = None
        self._err = None
        self._incrf = None
        self.discriminator = None

        self.doc = doc
        self.itms = itms
        self.summ = summ
        self.err = err
        if incrf is not None:
            self.incrf = incrf

    @property
    def doc(self):
        """Gets the doc of this InvoiceResult.  # noqa: E501

        Document number for invoice.  # noqa: E501

        :return: The doc of this InvoiceResult.  # noqa: E501
        :rtype: str
        """
        return self._doc

    @doc.setter
    def doc(self, doc):
        """Sets the doc of this InvoiceResult.

        Document number for invoice.  # noqa: E501

        :param doc: The doc of this InvoiceResult.  # noqa: E501
        :type: str
        """

        self._doc = doc

    @property
    def itms(self):
        """Gets the itms of this InvoiceResult.  # noqa: E501

        Individual tax calculation results for each line item.  # noqa: E501

        :return: The itms of this InvoiceResult.  # noqa: E501
        :rtype: list[LineItemResult]
        """
        return self._itms

    @itms.setter
    def itms(self, itms):
        """Sets the itms of this InvoiceResult.

        Individual tax calculation results for each line item.  # noqa: E501

        :param itms: The itms of this InvoiceResult.  # noqa: E501
        :type: list[LineItemResult]
        """

        self._itms = itms

    @property
    def summ(self):
        """Gets the summ of this InvoiceResult.  # noqa: E501

        Summarized taxes for invoice.  # noqa: E501

        :return: The summ of this InvoiceResult.  # noqa: E501
        :rtype: list[SummarizedTax]
        """
        return self._summ

    @summ.setter
    def summ(self, summ):
        """Sets the summ of this InvoiceResult.

        Summarized taxes for invoice.  # noqa: E501

        :param summ: The summ of this InvoiceResult.  # noqa: E501
        :type: list[SummarizedTax]
        """

        self._summ = summ

    @property
    def err(self):
        """Gets the err of this InvoiceResult.  # noqa: E501

        Error description (as applicable).  # noqa: E501

        :return: The err of this InvoiceResult.  # noqa: E501
        :rtype: list[Error]
        """
        return self._err

    @err.setter
    def err(self, err):
        """Sets the err of this InvoiceResult.

        Error description (as applicable).  # noqa: E501

        :param err: The err of this InvoiceResult.  # noqa: E501
        :type: list[Error]
        """

        self._err = err

    @property
    def incrf(self):
        """Gets the incrf of this InvoiceResult.  # noqa: E501


        :return: The incrf of this InvoiceResult.  # noqa: E501
        :rtype: ReportingInformation
        """
        return self._incrf

    @incrf.setter
    def incrf(self, incrf):
        """Sets the incrf of this InvoiceResult.


        :param incrf: The incrf of this InvoiceResult.  # noqa: E501
        :type: ReportingInformation
        """

        self._incrf = incrf

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, InvoiceResult):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, InvoiceResult):
            return True

        return self.to_dict() != other.to_dict()
