# coding: utf-8

"""
    SaasPro

    APIs to interface with communications tax engine.<br />The API requires Basic authentication.<br />Users with access to multiple clients must also set request header parameter for <code>client_id</code>.<br />Set <code>client_profile_id</code> to specify profile to be used for taxation.  # noqa: E501

    The version of the OpenAPI document: v2
    Generated by: https://openapi-generator.tech
"""


import pprint
import re  # noqa: F401

import six

from avalara.comms.rest.v2.configuration import Configuration


class PCodeLookupRequest(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'country_iso': 'str',
        'state': 'str',
        'county': 'str',
        'city': 'str',
        'zip_code': 'str',
        'best_match': 'bool',
        'limit_results': 'int',
        'npa_nxx': 'str',
        'fips': 'str'
    }

    attribute_map = {
        'country_iso': 'CountryIso',
        'state': 'State',
        'county': 'County',
        'city': 'City',
        'zip_code': 'ZipCode',
        'best_match': 'BestMatch',
        'limit_results': 'LimitResults',
        'npa_nxx': 'NpaNxx',
        'fips': 'Fips'
    }

    def __init__(self, country_iso=None, state=None, county=None, city=None, zip_code=None, best_match=None, limit_results=None, npa_nxx=None, fips=None, local_vars_configuration=None):  # noqa: E501
        """PCodeLookupRequest - a model defined in OpenAPI"""  # noqa: E501
        if local_vars_configuration is None:
            local_vars_configuration = Configuration()
        self.local_vars_configuration = local_vars_configuration

        self._country_iso = None
        self._state = None
        self._county = None
        self._city = None
        self._zip_code = None
        self._best_match = None
        self._limit_results = None
        self._npa_nxx = None
        self._fips = None
        self.discriminator = None

        self.country_iso = country_iso
        self.state = state
        self.county = county
        self.city = city
        self.zip_code = zip_code
        self.best_match = best_match
        self.limit_results = limit_results
        self.npa_nxx = npa_nxx
        self.fips = fips

    @property
    def country_iso(self):
        """Gets the country_iso of this PCodeLookupRequest.  # noqa: E501


        :return: The country_iso of this PCodeLookupRequest.  # noqa: E501
        :rtype: str
        """
        return self._country_iso

    @country_iso.setter
    def country_iso(self, country_iso):
        """Sets the country_iso of this PCodeLookupRequest.


        :param country_iso: The country_iso of this PCodeLookupRequest.  # noqa: E501
        :type: str
        """

        self._country_iso = country_iso

    @property
    def state(self):
        """Gets the state of this PCodeLookupRequest.  # noqa: E501


        :return: The state of this PCodeLookupRequest.  # noqa: E501
        :rtype: str
        """
        return self._state

    @state.setter
    def state(self, state):
        """Sets the state of this PCodeLookupRequest.


        :param state: The state of this PCodeLookupRequest.  # noqa: E501
        :type: str
        """

        self._state = state

    @property
    def county(self):
        """Gets the county of this PCodeLookupRequest.  # noqa: E501


        :return: The county of this PCodeLookupRequest.  # noqa: E501
        :rtype: str
        """
        return self._county

    @county.setter
    def county(self, county):
        """Sets the county of this PCodeLookupRequest.


        :param county: The county of this PCodeLookupRequest.  # noqa: E501
        :type: str
        """

        self._county = county

    @property
    def city(self):
        """Gets the city of this PCodeLookupRequest.  # noqa: E501


        :return: The city of this PCodeLookupRequest.  # noqa: E501
        :rtype: str
        """
        return self._city

    @city.setter
    def city(self, city):
        """Sets the city of this PCodeLookupRequest.


        :param city: The city of this PCodeLookupRequest.  # noqa: E501
        :type: str
        """

        self._city = city

    @property
    def zip_code(self):
        """Gets the zip_code of this PCodeLookupRequest.  # noqa: E501


        :return: The zip_code of this PCodeLookupRequest.  # noqa: E501
        :rtype: str
        """
        return self._zip_code

    @zip_code.setter
    def zip_code(self, zip_code):
        """Sets the zip_code of this PCodeLookupRequest.


        :param zip_code: The zip_code of this PCodeLookupRequest.  # noqa: E501
        :type: str
        """

        self._zip_code = zip_code

    @property
    def best_match(self):
        """Gets the best_match of this PCodeLookupRequest.  # noqa: E501


        :return: The best_match of this PCodeLookupRequest.  # noqa: E501
        :rtype: bool
        """
        return self._best_match

    @best_match.setter
    def best_match(self, best_match):
        """Sets the best_match of this PCodeLookupRequest.


        :param best_match: The best_match of this PCodeLookupRequest.  # noqa: E501
        :type: bool
        """

        self._best_match = best_match

    @property
    def limit_results(self):
        """Gets the limit_results of this PCodeLookupRequest.  # noqa: E501


        :return: The limit_results of this PCodeLookupRequest.  # noqa: E501
        :rtype: int
        """
        return self._limit_results

    @limit_results.setter
    def limit_results(self, limit_results):
        """Sets the limit_results of this PCodeLookupRequest.


        :param limit_results: The limit_results of this PCodeLookupRequest.  # noqa: E501
        :type: int
        """

        self._limit_results = limit_results

    @property
    def npa_nxx(self):
        """Gets the npa_nxx of this PCodeLookupRequest.  # noqa: E501


        :return: The npa_nxx of this PCodeLookupRequest.  # noqa: E501
        :rtype: str
        """
        return self._npa_nxx

    @npa_nxx.setter
    def npa_nxx(self, npa_nxx):
        """Sets the npa_nxx of this PCodeLookupRequest.


        :param npa_nxx: The npa_nxx of this PCodeLookupRequest.  # noqa: E501
        :type: str
        """

        self._npa_nxx = npa_nxx

    @property
    def fips(self):
        """Gets the fips of this PCodeLookupRequest.  # noqa: E501


        :return: The fips of this PCodeLookupRequest.  # noqa: E501
        :rtype: str
        """
        return self._fips

    @fips.setter
    def fips(self, fips):
        """Sets the fips of this PCodeLookupRequest.


        :param fips: The fips of this PCodeLookupRequest.  # noqa: E501
        :type: str
        """

        self._fips = fips

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, PCodeLookupRequest):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, PCodeLookupRequest):
            return True

        return self.to_dict() != other.to_dict()
