# coding: utf-8

"""
    SaasPro

    APIs to interface with communications tax engine.<br />The API requires Basic authentication.<br />Users with access to multiple clients must also set request header parameter for <code>client_id</code>.<br />Set <code>client_profile_id</code> to specify profile to be used for taxation.  # noqa: E501

    The version of the OpenAPI document: v2
    Generated by: https://openapi-generator.tech
"""


import pprint
import re  # noqa: F401

import six

from avalara.comms.rest.v2.configuration import Configuration


class CommitRequest(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'doc': 'str',
        'cmmt': 'bool',
        'opt': 'list[KeyValuePair]'
    }

    attribute_map = {
        'doc': 'doc',
        'cmmt': 'cmmt',
        'opt': 'opt'
    }

    def __init__(self, doc=None, cmmt=None, opt=None, local_vars_configuration=None):  # noqa: E501
        """CommitRequest - a model defined in OpenAPI"""  # noqa: E501
        if local_vars_configuration is None:
            local_vars_configuration = Configuration()
        self.local_vars_configuration = local_vars_configuration

        self._doc = None
        self._cmmt = None
        self._opt = None
        self.discriminator = None

        self.doc = doc
        self.cmmt = cmmt
        self.opt = opt

    @property
    def doc(self):
        """Gets the doc of this CommitRequest.  # noqa: E501

        Document code.  # noqa: E501

        :return: The doc of this CommitRequest.  # noqa: E501
        :rtype: str
        """
        return self._doc

    @doc.setter
    def doc(self, doc):
        """Sets the doc of this CommitRequest.

        Document code.  # noqa: E501

        :param doc: The doc of this CommitRequest.  # noqa: E501
        :type: str
        """

        self._doc = doc

    @property
    def cmmt(self):
        """Gets the cmmt of this CommitRequest.  # noqa: E501

        Indicates if transactions for the specified document code should be committed.  # noqa: E501

        :return: The cmmt of this CommitRequest.  # noqa: E501
        :rtype: bool
        """
        return self._cmmt

    @cmmt.setter
    def cmmt(self, cmmt):
        """Sets the cmmt of this CommitRequest.

        Indicates if transactions for the specified document code should be committed.  # noqa: E501

        :param cmmt: The cmmt of this CommitRequest.  # noqa: E501
        :type: bool
        """

        self._cmmt = cmmt

    @property
    def opt(self):
        """Gets the opt of this CommitRequest.  # noqa: E501

        Overrides value for OptionalFields field in reports.  # noqa: E501

        :return: The opt of this CommitRequest.  # noqa: E501
        :rtype: list[KeyValuePair]
        """
        return self._opt

    @opt.setter
    def opt(self, opt):
        """Sets the opt of this CommitRequest.

        Overrides value for OptionalFields field in reports.  # noqa: E501

        :param opt: The opt of this CommitRequest.  # noqa: E501
        :type: list[KeyValuePair]
        """

        self._opt = opt

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, CommitRequest):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, CommitRequest):
            return True

        return self.to_dict() != other.to_dict()
