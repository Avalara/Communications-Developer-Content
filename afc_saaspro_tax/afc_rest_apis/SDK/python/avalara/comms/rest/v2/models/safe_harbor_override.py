# coding: utf-8

"""
    SaasPro

    APIs to interface with communications tax engine.<br />The API requires Basic authentication.<br />Users with access to multiple clients must also set request header parameter for <code>client_id</code>.<br />Set <code>client_profile_id</code> to specify profile to be used for taxation.  # noqa: E501

    The version of the OpenAPI document: v2
    Generated by: https://openapi-generator.tech
"""


import pprint
import re  # noqa: F401

import six

from avalara.comms.rest.v2.configuration import Configuration


class SafeHarborOverride(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'sh': 'int',
        'old': 'float',
        'new': 'float'
    }

    attribute_map = {
        'sh': 'sh',
        'old': 'old',
        'new': 'new'
    }

    def __init__(self, sh=None, old=None, new=None, local_vars_configuration=None):  # noqa: E501
        """SafeHarborOverride - a model defined in OpenAPI"""  # noqa: E501
        if local_vars_configuration is None:
            local_vars_configuration = Configuration()
        self.local_vars_configuration = local_vars_configuration

        self._sh = None
        self._old = None
        self._new = None
        self.discriminator = None

        self.sh = sh
        self.old = old
        self.new = new

    @property
    def sh(self):
        """Gets the sh of this SafeHarborOverride.  # noqa: E501


        :return: The sh of this SafeHarborOverride.  # noqa: E501
        :rtype: int
        """
        return self._sh

    @sh.setter
    def sh(self, sh):
        """Sets the sh of this SafeHarborOverride.


        :param sh: The sh of this SafeHarborOverride.  # noqa: E501
        :type: int
        """

        self._sh = sh

    @property
    def old(self):
        """Gets the old of this SafeHarborOverride.  # noqa: E501


        :return: The old of this SafeHarborOverride.  # noqa: E501
        :rtype: float
        """
        return self._old

    @old.setter
    def old(self, old):
        """Sets the old of this SafeHarborOverride.


        :param old: The old of this SafeHarborOverride.  # noqa: E501
        :type: float
        """

        self._old = old

    @property
    def new(self):
        """Gets the new of this SafeHarborOverride.  # noqa: E501


        :return: The new of this SafeHarborOverride.  # noqa: E501
        :rtype: float
        """
        return self._new

    @new.setter
    def new(self, new):
        """Sets the new of this SafeHarborOverride.


        :param new: The new of this SafeHarborOverride.  # noqa: E501
        :type: float
        """

        self._new = new

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, SafeHarborOverride):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, SafeHarborOverride):
            return True

        return self.to_dict() != other.to_dict()
