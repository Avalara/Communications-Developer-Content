# coding: utf-8

"""
    SaasPro

    APIs to interface with communications tax engine.<br />The API requires Basic authentication.<br />Users with access to multiple clients must also set request header parameter for <code>client_id</code>.<br />Set <code>client_profile_id</code> to specify profile to be used for taxation.  # noqa: E501

    The version of the OpenAPI document: v2
    Generated by: https://openapi-generator.tech
"""


import pprint
import re  # noqa: F401

import six

from avalara.comms.rest.v2.configuration import Configuration


class LocationItem(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'is_alternate': 'bool',
        'country_iso': 'str',
        'state': 'str',
        'county': 'str',
        'locality': 'str',
        'p_code': 'int'
    }

    attribute_map = {
        'is_alternate': 'IsAlternate',
        'country_iso': 'CountryIso',
        'state': 'State',
        'county': 'County',
        'locality': 'Locality',
        'p_code': 'PCode'
    }

    def __init__(self, is_alternate=None, country_iso=None, state=None, county=None, locality=None, p_code=None, local_vars_configuration=None):  # noqa: E501
        """LocationItem - a model defined in OpenAPI"""  # noqa: E501
        if local_vars_configuration is None:
            local_vars_configuration = Configuration()
        self.local_vars_configuration = local_vars_configuration

        self._is_alternate = None
        self._country_iso = None
        self._state = None
        self._county = None
        self._locality = None
        self._p_code = None
        self.discriminator = None

        if is_alternate is not None:
            self.is_alternate = is_alternate
        self.country_iso = country_iso
        self.state = state
        self.county = county
        self.locality = locality
        if p_code is not None:
            self.p_code = p_code

    @property
    def is_alternate(self):
        """Gets the is_alternate of this LocationItem.  # noqa: E501


        :return: The is_alternate of this LocationItem.  # noqa: E501
        :rtype: bool
        """
        return self._is_alternate

    @is_alternate.setter
    def is_alternate(self, is_alternate):
        """Sets the is_alternate of this LocationItem.


        :param is_alternate: The is_alternate of this LocationItem.  # noqa: E501
        :type: bool
        """

        self._is_alternate = is_alternate

    @property
    def country_iso(self):
        """Gets the country_iso of this LocationItem.  # noqa: E501


        :return: The country_iso of this LocationItem.  # noqa: E501
        :rtype: str
        """
        return self._country_iso

    @country_iso.setter
    def country_iso(self, country_iso):
        """Sets the country_iso of this LocationItem.


        :param country_iso: The country_iso of this LocationItem.  # noqa: E501
        :type: str
        """

        self._country_iso = country_iso

    @property
    def state(self):
        """Gets the state of this LocationItem.  # noqa: E501


        :return: The state of this LocationItem.  # noqa: E501
        :rtype: str
        """
        return self._state

    @state.setter
    def state(self, state):
        """Sets the state of this LocationItem.


        :param state: The state of this LocationItem.  # noqa: E501
        :type: str
        """

        self._state = state

    @property
    def county(self):
        """Gets the county of this LocationItem.  # noqa: E501


        :return: The county of this LocationItem.  # noqa: E501
        :rtype: str
        """
        return self._county

    @county.setter
    def county(self, county):
        """Sets the county of this LocationItem.


        :param county: The county of this LocationItem.  # noqa: E501
        :type: str
        """

        self._county = county

    @property
    def locality(self):
        """Gets the locality of this LocationItem.  # noqa: E501


        :return: The locality of this LocationItem.  # noqa: E501
        :rtype: str
        """
        return self._locality

    @locality.setter
    def locality(self, locality):
        """Sets the locality of this LocationItem.


        :param locality: The locality of this LocationItem.  # noqa: E501
        :type: str
        """

        self._locality = locality

    @property
    def p_code(self):
        """Gets the p_code of this LocationItem.  # noqa: E501


        :return: The p_code of this LocationItem.  # noqa: E501
        :rtype: int
        """
        return self._p_code

    @p_code.setter
    def p_code(self, p_code):
        """Sets the p_code of this LocationItem.


        :param p_code: The p_code of this LocationItem.  # noqa: E501
        :type: int
        """

        self._p_code = p_code

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, LocationItem):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, LocationItem):
            return True

        return self.to_dict() != other.to_dict()
