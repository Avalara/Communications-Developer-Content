# coding: utf-8

"""
    SaasPro

    APIs to interface with communications tax engine.<br />The API requires Basic authentication.<br />Users with access to multiple clients must also set request header parameter for <code>client_id</code>.<br />Set <code>client_profile_id</code> to specify profile to be used for taxation.<br /><br />Effective January 1st, 2022 all Avalara products will be enforcing TLS 1.2 server-side. Please ensure that your implementation sets a minimal of TLS 1.2 encryption when making web requests to Avalara APIs.  # noqa: E501

    The version of the OpenAPI document: v2
    Generated by: https://openapi-generator.tech
"""


import pprint
import re  # noqa: F401

import six

from avalara.comms.rest.v2.configuration import Configuration


class GeoBatchDownloadResponse(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'input_file': 'str',
        'input_file_download': 'str',
        'output_file': 'str',
        'output_file_download': 'str'
    }

    attribute_map = {
        'input_file': 'InputFile',
        'input_file_download': 'InputFileDownload',
        'output_file': 'OutputFile',
        'output_file_download': 'OutputFileDownload'
    }

    def __init__(self, input_file=None, input_file_download=None, output_file=None, output_file_download=None, local_vars_configuration=None):  # noqa: E501
        """GeoBatchDownloadResponse - a model defined in OpenAPI"""  # noqa: E501
        if local_vars_configuration is None:
            local_vars_configuration = Configuration()
        self.local_vars_configuration = local_vars_configuration

        self._input_file = None
        self._input_file_download = None
        self._output_file = None
        self._output_file_download = None
        self.discriminator = None

        self.input_file = input_file
        self.input_file_download = input_file_download
        self.output_file = output_file
        self.output_file_download = output_file_download

    @property
    def input_file(self):
        """Gets the input_file of this GeoBatchDownloadResponse.  # noqa: E501

        Input File Name.  # noqa: E501

        :return: The input_file of this GeoBatchDownloadResponse.  # noqa: E501
        :rtype: str
        """
        return self._input_file

    @input_file.setter
    def input_file(self, input_file):
        """Sets the input_file of this GeoBatchDownloadResponse.

        Input File Name.  # noqa: E501

        :param input_file: The input_file of this GeoBatchDownloadResponse.  # noqa: E501
        :type: str
        """

        self._input_file = input_file

    @property
    def input_file_download(self):
        """Gets the input_file_download of this GeoBatchDownloadResponse.  # noqa: E501

        Input File Download.  # noqa: E501

        :return: The input_file_download of this GeoBatchDownloadResponse.  # noqa: E501
        :rtype: str
        """
        return self._input_file_download

    @input_file_download.setter
    def input_file_download(self, input_file_download):
        """Sets the input_file_download of this GeoBatchDownloadResponse.

        Input File Download.  # noqa: E501

        :param input_file_download: The input_file_download of this GeoBatchDownloadResponse.  # noqa: E501
        :type: str
        """

        self._input_file_download = input_file_download

    @property
    def output_file(self):
        """Gets the output_file of this GeoBatchDownloadResponse.  # noqa: E501

        Output File Name.  # noqa: E501

        :return: The output_file of this GeoBatchDownloadResponse.  # noqa: E501
        :rtype: str
        """
        return self._output_file

    @output_file.setter
    def output_file(self, output_file):
        """Sets the output_file of this GeoBatchDownloadResponse.

        Output File Name.  # noqa: E501

        :param output_file: The output_file of this GeoBatchDownloadResponse.  # noqa: E501
        :type: str
        """

        self._output_file = output_file

    @property
    def output_file_download(self):
        """Gets the output_file_download of this GeoBatchDownloadResponse.  # noqa: E501

        Output File Name.  # noqa: E501

        :return: The output_file_download of this GeoBatchDownloadResponse.  # noqa: E501
        :rtype: str
        """
        return self._output_file_download

    @output_file_download.setter
    def output_file_download(self, output_file_download):
        """Sets the output_file_download of this GeoBatchDownloadResponse.

        Output File Name.  # noqa: E501

        :param output_file_download: The output_file_download of this GeoBatchDownloadResponse.  # noqa: E501
        :type: str
        """

        self._output_file_download = output_file_download

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, GeoBatchDownloadResponse):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, GeoBatchDownloadResponse):
            return True

        return self.to_dict() != other.to_dict()
