# coding: utf-8

"""
    SaasPro

    APIs to interface with communications tax engine.<br />The API requires Basic authentication.<br />Users with access to multiple clients must also set request header parameter for <code>client_id</code>.<br />Set <code>client_profile_id</code> to specify profile to be used for taxation.<br /><br />Effective January 1st, 2022 all Avalara products will be enforcing TLS 1.2 server-side. Please ensure that your implementation sets a minimal of TLS 1.2 encryption when making web requests to Avalara APIs.  # noqa: E501

    The version of the OpenAPI document: v2
    Generated by: https://openapi-generator.tech
"""


import pprint
import re  # noqa: F401

import six

from avalara.comms.rest.v2.configuration import Configuration


class PCodeLookupResult(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'location_data': 'list[LocationItem]',
        'match_count': 'int',
        'input_match_type': 'str',
        'match_type_applied': 'str',
        'results_limit': 'int'
    }

    attribute_map = {
        'location_data': 'LocationData',
        'match_count': 'MatchCount',
        'input_match_type': 'InputMatchType',
        'match_type_applied': 'MatchTypeApplied',
        'results_limit': 'ResultsLimit'
    }

    def __init__(self, location_data=None, match_count=None, input_match_type=None, match_type_applied=None, results_limit=None, local_vars_configuration=None):  # noqa: E501
        """PCodeLookupResult - a model defined in OpenAPI"""  # noqa: E501
        if local_vars_configuration is None:
            local_vars_configuration = Configuration()
        self.local_vars_configuration = local_vars_configuration

        self._location_data = None
        self._match_count = None
        self._input_match_type = None
        self._match_type_applied = None
        self._results_limit = None
        self.discriminator = None

        self.location_data = location_data
        if match_count is not None:
            self.match_count = match_count
        self.input_match_type = input_match_type
        self.match_type_applied = match_type_applied
        if results_limit is not None:
            self.results_limit = results_limit

    @property
    def location_data(self):
        """Gets the location_data of this PCodeLookupResult.  # noqa: E501


        :return: The location_data of this PCodeLookupResult.  # noqa: E501
        :rtype: list[LocationItem]
        """
        return self._location_data

    @location_data.setter
    def location_data(self, location_data):
        """Sets the location_data of this PCodeLookupResult.


        :param location_data: The location_data of this PCodeLookupResult.  # noqa: E501
        :type: list[LocationItem]
        """

        self._location_data = location_data

    @property
    def match_count(self):
        """Gets the match_count of this PCodeLookupResult.  # noqa: E501


        :return: The match_count of this PCodeLookupResult.  # noqa: E501
        :rtype: int
        """
        return self._match_count

    @match_count.setter
    def match_count(self, match_count):
        """Sets the match_count of this PCodeLookupResult.


        :param match_count: The match_count of this PCodeLookupResult.  # noqa: E501
        :type: int
        """

        self._match_count = match_count

    @property
    def input_match_type(self):
        """Gets the input_match_type of this PCodeLookupResult.  # noqa: E501


        :return: The input_match_type of this PCodeLookupResult.  # noqa: E501
        :rtype: str
        """
        return self._input_match_type

    @input_match_type.setter
    def input_match_type(self, input_match_type):
        """Sets the input_match_type of this PCodeLookupResult.


        :param input_match_type: The input_match_type of this PCodeLookupResult.  # noqa: E501
        :type: str
        """

        self._input_match_type = input_match_type

    @property
    def match_type_applied(self):
        """Gets the match_type_applied of this PCodeLookupResult.  # noqa: E501


        :return: The match_type_applied of this PCodeLookupResult.  # noqa: E501
        :rtype: str
        """
        return self._match_type_applied

    @match_type_applied.setter
    def match_type_applied(self, match_type_applied):
        """Sets the match_type_applied of this PCodeLookupResult.


        :param match_type_applied: The match_type_applied of this PCodeLookupResult.  # noqa: E501
        :type: str
        """

        self._match_type_applied = match_type_applied

    @property
    def results_limit(self):
        """Gets the results_limit of this PCodeLookupResult.  # noqa: E501


        :return: The results_limit of this PCodeLookupResult.  # noqa: E501
        :rtype: int
        """
        return self._results_limit

    @results_limit.setter
    def results_limit(self, results_limit):
        """Sets the results_limit of this PCodeLookupResult.


        :param results_limit: The results_limit of this PCodeLookupResult.  # noqa: E501
        :type: int
        """

        self._results_limit = results_limit

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, PCodeLookupResult):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, PCodeLookupResult):
            return True

        return self.to_dict() != other.to_dict()
