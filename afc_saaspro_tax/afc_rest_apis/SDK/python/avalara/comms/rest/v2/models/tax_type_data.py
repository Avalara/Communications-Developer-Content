# coding: utf-8

"""
    SaasPro

    APIs to interface with communications tax engine.<br />The API requires Basic authentication.<br />Users with access to multiple clients must also set request header parameter for <code>client_id</code>.<br />Set <code>client_profile_id</code> to specify profile to be used for taxation.  # noqa: E501

    The version of the OpenAPI document: v2
    Generated by: https://openapi-generator.tech
"""


import pprint
import re  # noqa: F401

import six

from avalara.comms.rest.v2.configuration import Configuration


class TaxTypeData(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'tax_type': 'int',
        'category_type': 'int',
        'tax_description': 'str',
        'category_description': 'str'
    }

    attribute_map = {
        'tax_type': 'TaxType',
        'category_type': 'CategoryType',
        'tax_description': 'TaxDescription',
        'category_description': 'CategoryDescription'
    }

    def __init__(self, tax_type=None, category_type=None, tax_description=None, category_description=None, local_vars_configuration=None):  # noqa: E501
        """TaxTypeData - a model defined in OpenAPI"""  # noqa: E501
        if local_vars_configuration is None:
            local_vars_configuration = Configuration()
        self.local_vars_configuration = local_vars_configuration

        self._tax_type = None
        self._category_type = None
        self._tax_description = None
        self._category_description = None
        self.discriminator = None

        if tax_type is not None:
            self.tax_type = tax_type
        if category_type is not None:
            self.category_type = category_type
        self.tax_description = tax_description
        self.category_description = category_description

    @property
    def tax_type(self):
        """Gets the tax_type of this TaxTypeData.  # noqa: E501


        :return: The tax_type of this TaxTypeData.  # noqa: E501
        :rtype: int
        """
        return self._tax_type

    @tax_type.setter
    def tax_type(self, tax_type):
        """Sets the tax_type of this TaxTypeData.


        :param tax_type: The tax_type of this TaxTypeData.  # noqa: E501
        :type: int
        """

        self._tax_type = tax_type

    @property
    def category_type(self):
        """Gets the category_type of this TaxTypeData.  # noqa: E501


        :return: The category_type of this TaxTypeData.  # noqa: E501
        :rtype: int
        """
        return self._category_type

    @category_type.setter
    def category_type(self, category_type):
        """Sets the category_type of this TaxTypeData.


        :param category_type: The category_type of this TaxTypeData.  # noqa: E501
        :type: int
        """

        self._category_type = category_type

    @property
    def tax_description(self):
        """Gets the tax_description of this TaxTypeData.  # noqa: E501


        :return: The tax_description of this TaxTypeData.  # noqa: E501
        :rtype: str
        """
        return self._tax_description

    @tax_description.setter
    def tax_description(self, tax_description):
        """Sets the tax_description of this TaxTypeData.


        :param tax_description: The tax_description of this TaxTypeData.  # noqa: E501
        :type: str
        """

        self._tax_description = tax_description

    @property
    def category_description(self):
        """Gets the category_description of this TaxTypeData.  # noqa: E501


        :return: The category_description of this TaxTypeData.  # noqa: E501
        :rtype: str
        """
        return self._category_description

    @category_description.setter
    def category_description(self, category_description):
        """Sets the category_description of this TaxTypeData.


        :param category_description: The category_description of this TaxTypeData.  # noqa: E501
        :type: str
        """

        self._category_description = category_description

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, TaxTypeData):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, TaxTypeData):
            return True

        return self.to_dict() != other.to_dict()
