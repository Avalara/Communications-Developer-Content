# coding: utf-8

"""
    SaasPro

    APIs to interface with communications tax engine.<br />The API requires Basic authentication.<br />Users with access to multiple clients must also set request header parameter for <code>client_id</code>.<br />Set <code>client_profile_id</code> to specify profile to be used for taxation.  # noqa: E501

    The version of the OpenAPI document: v2
    Generated by: https://openapi-generator.tech
"""


import pprint
import re  # noqa: F401

import six

from avalara.comms.rest.v2.configuration import Configuration


class TaxOverride(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'loc': 'Location',
        'scp': 'int',
        'tid': 'int',
        'lvl': 'int',
        'lvl_exm': 'bool',
        'brkt': 'list[TaxBracket]'
    }

    attribute_map = {
        'loc': 'loc',
        'scp': 'scp',
        'tid': 'tid',
        'lvl': 'lvl',
        'lvl_exm': 'lvlExm',
        'brkt': 'brkt'
    }

    def __init__(self, loc=None, scp=None, tid=None, lvl=None, lvl_exm=None, brkt=None, local_vars_configuration=None):  # noqa: E501
        """TaxOverride - a model defined in OpenAPI"""  # noqa: E501
        if local_vars_configuration is None:
            local_vars_configuration = Configuration()
        self.local_vars_configuration = local_vars_configuration

        self._loc = None
        self._scp = None
        self._tid = None
        self._lvl = None
        self._lvl_exm = None
        self._brkt = None
        self.discriminator = None

        if loc is not None:
            self.loc = loc
        self.scp = scp
        self.tid = tid
        self.lvl = lvl
        self.lvl_exm = lvl_exm
        self.brkt = brkt

    @property
    def loc(self):
        """Gets the loc of this TaxOverride.  # noqa: E501


        :return: The loc of this TaxOverride.  # noqa: E501
        :rtype: Location
        """
        return self._loc

    @loc.setter
    def loc(self, loc):
        """Sets the loc of this TaxOverride.


        :param loc: The loc of this TaxOverride.  # noqa: E501
        :type: Location
        """

        self._loc = loc

    @property
    def scp(self):
        """Gets the scp of this TaxOverride.  # noqa: E501

        Scope for override. 0 = Country, 1 = State, 2 = County, 3 = City.  # noqa: E501

        :return: The scp of this TaxOverride.  # noqa: E501
        :rtype: int
        """
        return self._scp

    @scp.setter
    def scp(self, scp):
        """Sets the scp of this TaxOverride.

        Scope for override. 0 = Country, 1 = State, 2 = County, 3 = City.  # noqa: E501

        :param scp: The scp of this TaxOverride.  # noqa: E501
        :type: int
        """

        self._scp = scp

    @property
    def tid(self):
        """Gets the tid of this TaxOverride.  # noqa: E501

        Tax type ID.  # noqa: E501

        :return: The tid of this TaxOverride.  # noqa: E501
        :rtype: int
        """
        return self._tid

    @tid.setter
    def tid(self, tid):
        """Sets the tid of this TaxOverride.

        Tax type ID.  # noqa: E501

        :param tid: The tid of this TaxOverride.  # noqa: E501
        :type: int
        """

        self._tid = tid

    @property
    def lvl(self):
        """Gets the lvl of this TaxOverride.  # noqa: E501

        Tax level ID. 0 = Federal, 1 = State, 2 = County, 3 = City.  # noqa: E501

        :return: The lvl of this TaxOverride.  # noqa: E501
        :rtype: int
        """
        return self._lvl

    @lvl.setter
    def lvl(self, lvl):
        """Sets the lvl of this TaxOverride.

        Tax level ID. 0 = Federal, 1 = State, 2 = County, 3 = City.  # noqa: E501

        :param lvl: The lvl of this TaxOverride.  # noqa: E501
        :type: int
        """

        self._lvl = lvl

    @property
    def lvl_exm(self):
        """Gets the lvl_exm of this TaxOverride.  # noqa: E501

        Indicates if the tax can be exempted using level exemptions.  # noqa: E501

        :return: The lvl_exm of this TaxOverride.  # noqa: E501
        :rtype: bool
        """
        return self._lvl_exm

    @lvl_exm.setter
    def lvl_exm(self, lvl_exm):
        """Sets the lvl_exm of this TaxOverride.

        Indicates if the tax can be exempted using level exemptions.  # noqa: E501

        :param lvl_exm: The lvl_exm of this TaxOverride.  # noqa: E501
        :type: bool
        """

        self._lvl_exm = lvl_exm

    @property
    def brkt(self):
        """Gets the brkt of this TaxOverride.  # noqa: E501

        Tax rate/bracket information.  # noqa: E501

        :return: The brkt of this TaxOverride.  # noqa: E501
        :rtype: list[TaxBracket]
        """
        return self._brkt

    @brkt.setter
    def brkt(self, brkt):
        """Sets the brkt of this TaxOverride.

        Tax rate/bracket information.  # noqa: E501

        :param brkt: The brkt of this TaxOverride.  # noqa: E501
        :type: list[TaxBracket]
        """

        self._brkt = brkt

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, TaxOverride):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, TaxOverride):
            return True

        return self.to_dict() != other.to_dict()
