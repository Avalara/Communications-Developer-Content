# coding: utf-8

"""
    SaasPro

    APIs to interface with communications tax engine.<br />The API requires Basic authentication.<br />Users with access to multiple clients must also set request header parameter for <code>client_id</code>.<br />Set <code>client_profile_id</code> to specify profile to be used for taxation.<br /><br />Effective January 1st, 2022 all Avalara products will be enforcing TLS 1.2 server-side. Please ensure that your implementation sets a minimal of TLS 1.2 encryption when making web requests to Avalara APIs.  # noqa: E501

    The version of the OpenAPI document: v2
    Generated by: https://openapi-generator.tech
"""


import pprint
import re  # noqa: F401

import six

from avalara.comms.rest.v2.configuration import Configuration


class GeocodeResult(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'ref': 'str',
        'cass': 'Address',
        'c_blk': 'int',
        'c_trc': 'int',
        'cnty': 'str',
        'feat': 'int',
        'fips': 'str',
        'inc': 'bool',
        'jur': 'str',
        'lat': 'float',
        'long': 'float',
        'pcd': 'int',
        'scr': 'float',
        'err': 'str'
    }

    attribute_map = {
        'ref': 'ref',
        'cass': 'cass',
        'c_blk': 'cBlk',
        'c_trc': 'cTrc',
        'cnty': 'cnty',
        'feat': 'feat',
        'fips': 'fips',
        'inc': 'inc',
        'jur': 'jur',
        'lat': 'lat',
        'long': 'long',
        'pcd': 'pcd',
        'scr': 'scr',
        'err': 'err'
    }

    def __init__(self, ref=None, cass=None, c_blk=None, c_trc=None, cnty=None, feat=None, fips=None, inc=None, jur=None, lat=None, long=None, pcd=None, scr=None, err=None, local_vars_configuration=None):  # noqa: E501
        """GeocodeResult - a model defined in OpenAPI"""  # noqa: E501
        if local_vars_configuration is None:
            local_vars_configuration = Configuration()
        self.local_vars_configuration = local_vars_configuration

        self._ref = None
        self._cass = None
        self._c_blk = None
        self._c_trc = None
        self._cnty = None
        self._feat = None
        self._fips = None
        self._inc = None
        self._jur = None
        self._lat = None
        self._long = None
        self._pcd = None
        self._scr = None
        self._err = None
        self.discriminator = None

        self.ref = ref
        if cass is not None:
            self.cass = cass
        self.c_blk = c_blk
        self.c_trc = c_trc
        self.cnty = cnty
        self.feat = feat
        self.fips = fips
        self.inc = inc
        self.jur = jur
        self.lat = lat
        self.long = long
        self.pcd = pcd
        self.scr = scr
        self.err = err

    @property
    def ref(self):
        """Gets the ref of this GeocodeResult.  # noqa: E501

        Reference Id from geocode request input.  # noqa: E501

        :return: The ref of this GeocodeResult.  # noqa: E501
        :rtype: str
        """
        return self._ref

    @ref.setter
    def ref(self, ref):
        """Sets the ref of this GeocodeResult.

        Reference Id from geocode request input.  # noqa: E501

        :param ref: The ref of this GeocodeResult.  # noqa: E501
        :type: str
        """

        self._ref = ref

    @property
    def cass(self):
        """Gets the cass of this GeocodeResult.  # noqa: E501


        :return: The cass of this GeocodeResult.  # noqa: E501
        :rtype: Address
        """
        return self._cass

    @cass.setter
    def cass(self, cass):
        """Sets the cass of this GeocodeResult.


        :param cass: The cass of this GeocodeResult.  # noqa: E501
        :type: Address
        """

        self._cass = cass

    @property
    def c_blk(self):
        """Gets the c_blk of this GeocodeResult.  # noqa: E501

        Census block.  # noqa: E501

        :return: The c_blk of this GeocodeResult.  # noqa: E501
        :rtype: int
        """
        return self._c_blk

    @c_blk.setter
    def c_blk(self, c_blk):
        """Sets the c_blk of this GeocodeResult.

        Census block.  # noqa: E501

        :param c_blk: The c_blk of this GeocodeResult.  # noqa: E501
        :type: int
        """

        self._c_blk = c_blk

    @property
    def c_trc(self):
        """Gets the c_trc of this GeocodeResult.  # noqa: E501

        Census tract.  # noqa: E501

        :return: The c_trc of this GeocodeResult.  # noqa: E501
        :rtype: int
        """
        return self._c_trc

    @c_trc.setter
    def c_trc(self, c_trc):
        """Sets the c_trc of this GeocodeResult.

        Census tract.  # noqa: E501

        :param c_trc: The c_trc of this GeocodeResult.  # noqa: E501
        :type: int
        """

        self._c_trc = c_trc

    @property
    def cnty(self):
        """Gets the cnty of this GeocodeResult.  # noqa: E501

        County  # noqa: E501

        :return: The cnty of this GeocodeResult.  # noqa: E501
        :rtype: str
        """
        return self._cnty

    @cnty.setter
    def cnty(self, cnty):
        """Sets the cnty of this GeocodeResult.

        County  # noqa: E501

        :param cnty: The cnty of this GeocodeResult.  # noqa: E501
        :type: str
        """

        self._cnty = cnty

    @property
    def feat(self):
        """Gets the feat of this GeocodeResult.  # noqa: E501

        Feature ID.  # noqa: E501

        :return: The feat of this GeocodeResult.  # noqa: E501
        :rtype: int
        """
        return self._feat

    @feat.setter
    def feat(self, feat):
        """Sets the feat of this GeocodeResult.

        Feature ID.  # noqa: E501

        :param feat: The feat of this GeocodeResult.  # noqa: E501
        :type: int
        """

        self._feat = feat

    @property
    def fips(self):
        """Gets the fips of this GeocodeResult.  # noqa: E501

        FIPS Code.  # noqa: E501

        :return: The fips of this GeocodeResult.  # noqa: E501
        :rtype: str
        """
        return self._fips

    @fips.setter
    def fips(self, fips):
        """Sets the fips of this GeocodeResult.

        FIPS Code.  # noqa: E501

        :param fips: The fips of this GeocodeResult.  # noqa: E501
        :type: str
        """

        self._fips = fips

    @property
    def inc(self):
        """Gets the inc of this GeocodeResult.  # noqa: E501

        Indicates if address is within city limits.  # noqa: E501

        :return: The inc of this GeocodeResult.  # noqa: E501
        :rtype: bool
        """
        return self._inc

    @inc.setter
    def inc(self, inc):
        """Sets the inc of this GeocodeResult.

        Indicates if address is within city limits.  # noqa: E501

        :param inc: The inc of this GeocodeResult.  # noqa: E501
        :type: bool
        """

        self._inc = inc

    @property
    def jur(self):
        """Gets the jur of this GeocodeResult.  # noqa: E501

        Tax jurisdiction name.  # noqa: E501

        :return: The jur of this GeocodeResult.  # noqa: E501
        :rtype: str
        """
        return self._jur

    @jur.setter
    def jur(self, jur):
        """Sets the jur of this GeocodeResult.

        Tax jurisdiction name.  # noqa: E501

        :param jur: The jur of this GeocodeResult.  # noqa: E501
        :type: str
        """

        self._jur = jur

    @property
    def lat(self):
        """Gets the lat of this GeocodeResult.  # noqa: E501

        Latitude.  # noqa: E501

        :return: The lat of this GeocodeResult.  # noqa: E501
        :rtype: float
        """
        return self._lat

    @lat.setter
    def lat(self, lat):
        """Sets the lat of this GeocodeResult.

        Latitude.  # noqa: E501

        :param lat: The lat of this GeocodeResult.  # noqa: E501
        :type: float
        """

        self._lat = lat

    @property
    def long(self):
        """Gets the long of this GeocodeResult.  # noqa: E501

        Longitude.  # noqa: E501

        :return: The long of this GeocodeResult.  # noqa: E501
        :rtype: float
        """
        return self._long

    @long.setter
    def long(self, long):
        """Sets the long of this GeocodeResult.

        Longitude.  # noqa: E501

        :param long: The long of this GeocodeResult.  # noqa: E501
        :type: float
        """

        self._long = long

    @property
    def pcd(self):
        """Gets the pcd of this GeocodeResult.  # noqa: E501

        PCode for tax jurisdiction.  # noqa: E501

        :return: The pcd of this GeocodeResult.  # noqa: E501
        :rtype: int
        """
        return self._pcd

    @pcd.setter
    def pcd(self, pcd):
        """Sets the pcd of this GeocodeResult.

        PCode for tax jurisdiction.  # noqa: E501

        :param pcd: The pcd of this GeocodeResult.  # noqa: E501
        :type: int
        """

        self._pcd = pcd

    @property
    def scr(self):
        """Gets the scr of this GeocodeResult.  # noqa: E501

        Score indicating accuracy of address match in mapping database.  # noqa: E501

        :return: The scr of this GeocodeResult.  # noqa: E501
        :rtype: float
        """
        return self._scr

    @scr.setter
    def scr(self, scr):
        """Sets the scr of this GeocodeResult.

        Score indicating accuracy of address match in mapping database.  # noqa: E501

        :param scr: The scr of this GeocodeResult.  # noqa: E501
        :type: float
        """

        self._scr = scr

    @property
    def err(self):
        """Gets the err of this GeocodeResult.  # noqa: E501

        Error message.  # noqa: E501

        :return: The err of this GeocodeResult.  # noqa: E501
        :rtype: str
        """
        return self._err

    @err.setter
    def err(self, err):
        """Sets the err of this GeocodeResult.

        Error message.  # noqa: E501

        :param err: The err of this GeocodeResult.  # noqa: E501
        :type: str
        """

        self._err = err

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, GeocodeResult):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, GeocodeResult):
            return True

        return self.to_dict() != other.to_dict()
