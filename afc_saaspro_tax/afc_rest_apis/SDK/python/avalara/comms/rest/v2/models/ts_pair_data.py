# coding: utf-8

"""
    SaasPro

    APIs to interface with communications tax engine.<br />The API requires Basic authentication.<br />Users with access to multiple clients must also set request header parameter for <code>client_id</code>.<br />Set <code>client_profile_id</code> to specify profile to be used for taxation.  # noqa: E501

    The version of the OpenAPI document: v2
    Generated by: https://openapi-generator.tech
"""


import pprint
import re  # noqa: F401

import six

from avalara.comms.rest.v2.configuration import Configuration


class TSPairData(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'transaction_type': 'int',
        'service_type': 'int',
        'market_type': 'int',
        'interface_type': 'int',
        'input_type': 'int',
        'is_bundle': 'bool',
        'transaction_description': 'str',
        'service_description': 'str',
        'ts_pair_description': 'str'
    }

    attribute_map = {
        'transaction_type': 'TransactionType',
        'service_type': 'ServiceType',
        'market_type': 'MarketType',
        'interface_type': 'InterfaceType',
        'input_type': 'InputType',
        'is_bundle': 'IsBundle',
        'transaction_description': 'TransactionDescription',
        'service_description': 'ServiceDescription',
        'ts_pair_description': 'TSPairDescription'
    }

    def __init__(self, transaction_type=None, service_type=None, market_type=None, interface_type=None, input_type=None, is_bundle=None, transaction_description=None, service_description=None, ts_pair_description=None, local_vars_configuration=None):  # noqa: E501
        """TSPairData - a model defined in OpenAPI"""  # noqa: E501
        if local_vars_configuration is None:
            local_vars_configuration = Configuration()
        self.local_vars_configuration = local_vars_configuration

        self._transaction_type = None
        self._service_type = None
        self._market_type = None
        self._interface_type = None
        self._input_type = None
        self._is_bundle = None
        self._transaction_description = None
        self._service_description = None
        self._ts_pair_description = None
        self.discriminator = None

        if transaction_type is not None:
            self.transaction_type = transaction_type
        if service_type is not None:
            self.service_type = service_type
        if market_type is not None:
            self.market_type = market_type
        if interface_type is not None:
            self.interface_type = interface_type
        if input_type is not None:
            self.input_type = input_type
        if is_bundle is not None:
            self.is_bundle = is_bundle
        self.transaction_description = transaction_description
        self.service_description = service_description
        self.ts_pair_description = ts_pair_description

    @property
    def transaction_type(self):
        """Gets the transaction_type of this TSPairData.  # noqa: E501


        :return: The transaction_type of this TSPairData.  # noqa: E501
        :rtype: int
        """
        return self._transaction_type

    @transaction_type.setter
    def transaction_type(self, transaction_type):
        """Sets the transaction_type of this TSPairData.


        :param transaction_type: The transaction_type of this TSPairData.  # noqa: E501
        :type: int
        """

        self._transaction_type = transaction_type

    @property
    def service_type(self):
        """Gets the service_type of this TSPairData.  # noqa: E501


        :return: The service_type of this TSPairData.  # noqa: E501
        :rtype: int
        """
        return self._service_type

    @service_type.setter
    def service_type(self, service_type):
        """Sets the service_type of this TSPairData.


        :param service_type: The service_type of this TSPairData.  # noqa: E501
        :type: int
        """

        self._service_type = service_type

    @property
    def market_type(self):
        """Gets the market_type of this TSPairData.  # noqa: E501


        :return: The market_type of this TSPairData.  # noqa: E501
        :rtype: int
        """
        return self._market_type

    @market_type.setter
    def market_type(self, market_type):
        """Sets the market_type of this TSPairData.


        :param market_type: The market_type of this TSPairData.  # noqa: E501
        :type: int
        """

        self._market_type = market_type

    @property
    def interface_type(self):
        """Gets the interface_type of this TSPairData.  # noqa: E501


        :return: The interface_type of this TSPairData.  # noqa: E501
        :rtype: int
        """
        return self._interface_type

    @interface_type.setter
    def interface_type(self, interface_type):
        """Sets the interface_type of this TSPairData.


        :param interface_type: The interface_type of this TSPairData.  # noqa: E501
        :type: int
        """

        self._interface_type = interface_type

    @property
    def input_type(self):
        """Gets the input_type of this TSPairData.  # noqa: E501


        :return: The input_type of this TSPairData.  # noqa: E501
        :rtype: int
        """
        return self._input_type

    @input_type.setter
    def input_type(self, input_type):
        """Sets the input_type of this TSPairData.


        :param input_type: The input_type of this TSPairData.  # noqa: E501
        :type: int
        """

        self._input_type = input_type

    @property
    def is_bundle(self):
        """Gets the is_bundle of this TSPairData.  # noqa: E501


        :return: The is_bundle of this TSPairData.  # noqa: E501
        :rtype: bool
        """
        return self._is_bundle

    @is_bundle.setter
    def is_bundle(self, is_bundle):
        """Sets the is_bundle of this TSPairData.


        :param is_bundle: The is_bundle of this TSPairData.  # noqa: E501
        :type: bool
        """

        self._is_bundle = is_bundle

    @property
    def transaction_description(self):
        """Gets the transaction_description of this TSPairData.  # noqa: E501


        :return: The transaction_description of this TSPairData.  # noqa: E501
        :rtype: str
        """
        return self._transaction_description

    @transaction_description.setter
    def transaction_description(self, transaction_description):
        """Sets the transaction_description of this TSPairData.


        :param transaction_description: The transaction_description of this TSPairData.  # noqa: E501
        :type: str
        """

        self._transaction_description = transaction_description

    @property
    def service_description(self):
        """Gets the service_description of this TSPairData.  # noqa: E501


        :return: The service_description of this TSPairData.  # noqa: E501
        :rtype: str
        """
        return self._service_description

    @service_description.setter
    def service_description(self, service_description):
        """Sets the service_description of this TSPairData.


        :param service_description: The service_description of this TSPairData.  # noqa: E501
        :type: str
        """

        self._service_description = service_description

    @property
    def ts_pair_description(self):
        """Gets the ts_pair_description of this TSPairData.  # noqa: E501


        :return: The ts_pair_description of this TSPairData.  # noqa: E501
        :rtype: str
        """
        return self._ts_pair_description

    @ts_pair_description.setter
    def ts_pair_description(self, ts_pair_description):
        """Sets the ts_pair_description of this TSPairData.


        :param ts_pair_description: The ts_pair_description of this TSPairData.  # noqa: E501
        :type: str
        """

        self._ts_pair_description = ts_pair_description

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, TSPairData):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, TSPairData):
            return True

        return self.to_dict() != other.to_dict()
