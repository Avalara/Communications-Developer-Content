# coding: utf-8

"""
    SaasPro

    APIs to interface with communications tax engine.<br />The API requires Basic authentication.<br />Users with access to multiple clients must also set request header parameter for <code>client_id</code>.<br />Set <code>client_profile_id</code> to specify profile to be used for taxation.  # noqa: E501

    The version of the OpenAPI document: v2
    Generated by: https://openapi-generator.tech
"""


import pprint
import re  # noqa: F401

import six

from avalara.comms.rest.v2.configuration import Configuration


class SetTaxCalculationSettingRequest(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'profile_config_id': 'int',
        'link_profile_ids': 'list[int]',
        'unlink_profile_ids': 'list[int]',
        'client_id': 'int',
        'deactivate': 'bool',
        'description': 'str',
        'replace_existing_links': 'bool',
        'settings': 'Configuration',
        'exclusions': 'list[ExclusionConfig]',
        'bundles': 'list[BundleConfig]',
        'nexus': 'list[NexusConfig]',
        'overrides': 'list[str]'
    }

    attribute_map = {
        'profile_config_id': 'ProfileConfigId',
        'link_profile_ids': 'LinkProfileIds',
        'unlink_profile_ids': 'UnlinkProfileIds',
        'client_id': 'ClientId',
        'deactivate': 'Deactivate',
        'description': 'Description',
        'replace_existing_links': 'ReplaceExistingLinks',
        'settings': 'Settings',
        'exclusions': 'Exclusions',
        'bundles': 'Bundles',
        'nexus': 'Nexus',
        'overrides': 'Overrides'
    }

    def __init__(self, profile_config_id=None, link_profile_ids=None, unlink_profile_ids=None, client_id=None, deactivate=None, description=None, replace_existing_links=None, settings=None, exclusions=None, bundles=None, nexus=None, overrides=None, local_vars_configuration=None):  # noqa: E501
        """SetTaxCalculationSettingRequest - a model defined in OpenAPI"""  # noqa: E501
        if local_vars_configuration is None:
            local_vars_configuration = Configuration()
        self.local_vars_configuration = local_vars_configuration

        self._profile_config_id = None
        self._link_profile_ids = None
        self._unlink_profile_ids = None
        self._client_id = None
        self._deactivate = None
        self._description = None
        self._replace_existing_links = None
        self._settings = None
        self._exclusions = None
        self._bundles = None
        self._nexus = None
        self._overrides = None
        self.discriminator = None

        self.profile_config_id = profile_config_id
        self.link_profile_ids = link_profile_ids
        self.unlink_profile_ids = unlink_profile_ids
        self.client_id = client_id
        self.deactivate = deactivate
        self.description = description
        self.replace_existing_links = replace_existing_links
        self.settings = settings
        self.exclusions = exclusions
        self.bundles = bundles
        self.nexus = nexus
        self.overrides = overrides

    @property
    def profile_config_id(self):
        """Gets the profile_config_id of this SetTaxCalculationSettingRequest.  # noqa: E501

        Profile configuration id to be used when updating an existing profile  Use null for new configuration  # noqa: E501

        :return: The profile_config_id of this SetTaxCalculationSettingRequest.  # noqa: E501
        :rtype: int
        """
        return self._profile_config_id

    @profile_config_id.setter
    def profile_config_id(self, profile_config_id):
        """Sets the profile_config_id of this SetTaxCalculationSettingRequest.

        Profile configuration id to be used when updating an existing profile  Use null for new configuration  # noqa: E501

        :param profile_config_id: The profile_config_id of this SetTaxCalculationSettingRequest.  # noqa: E501
        :type: int
        """

        self._profile_config_id = profile_config_id

    @property
    def link_profile_ids(self):
        """Gets the link_profile_ids of this SetTaxCalculationSettingRequest.  # noqa: E501

        Profile(s) to be added to configuration  Leave null to not change profiles associated with configuration settings  # noqa: E501

        :return: The link_profile_ids of this SetTaxCalculationSettingRequest.  # noqa: E501
        :rtype: list[int]
        """
        return self._link_profile_ids

    @link_profile_ids.setter
    def link_profile_ids(self, link_profile_ids):
        """Sets the link_profile_ids of this SetTaxCalculationSettingRequest.

        Profile(s) to be added to configuration  Leave null to not change profiles associated with configuration settings  # noqa: E501

        :param link_profile_ids: The link_profile_ids of this SetTaxCalculationSettingRequest.  # noqa: E501
        :type: list[int]
        """

        self._link_profile_ids = link_profile_ids

    @property
    def unlink_profile_ids(self):
        """Gets the unlink_profile_ids of this SetTaxCalculationSettingRequest.  # noqa: E501

        Profile(s) to be added to configuration  Leave null to not change profiles associated with configuration settings  # noqa: E501

        :return: The unlink_profile_ids of this SetTaxCalculationSettingRequest.  # noqa: E501
        :rtype: list[int]
        """
        return self._unlink_profile_ids

    @unlink_profile_ids.setter
    def unlink_profile_ids(self, unlink_profile_ids):
        """Sets the unlink_profile_ids of this SetTaxCalculationSettingRequest.

        Profile(s) to be added to configuration  Leave null to not change profiles associated with configuration settings  # noqa: E501

        :param unlink_profile_ids: The unlink_profile_ids of this SetTaxCalculationSettingRequest.  # noqa: E501
        :type: list[int]
        """

        self._unlink_profile_ids = unlink_profile_ids

    @property
    def client_id(self):
        """Gets the client_id of this SetTaxCalculationSettingRequest.  # noqa: E501

        Client id associated with profile(s) to be fetched  Null value will use client id submitting the request or default client id as applicable  # noqa: E501

        :return: The client_id of this SetTaxCalculationSettingRequest.  # noqa: E501
        :rtype: int
        """
        return self._client_id

    @client_id.setter
    def client_id(self, client_id):
        """Sets the client_id of this SetTaxCalculationSettingRequest.

        Client id associated with profile(s) to be fetched  Null value will use client id submitting the request or default client id as applicable  # noqa: E501

        :param client_id: The client_id of this SetTaxCalculationSettingRequest.  # noqa: E501
        :type: int
        """

        self._client_id = client_id

    @property
    def deactivate(self):
        """Gets the deactivate of this SetTaxCalculationSettingRequest.  # noqa: E501

        True = Deactivate the configuration  Requires ProfileConfigId to be provided and valid.  Automatically removes any profile mappings associated with the configuration.  # noqa: E501

        :return: The deactivate of this SetTaxCalculationSettingRequest.  # noqa: E501
        :rtype: bool
        """
        return self._deactivate

    @deactivate.setter
    def deactivate(self, deactivate):
        """Sets the deactivate of this SetTaxCalculationSettingRequest.

        True = Deactivate the configuration  Requires ProfileConfigId to be provided and valid.  Automatically removes any profile mappings associated with the configuration.  # noqa: E501

        :param deactivate: The deactivate of this SetTaxCalculationSettingRequest.  # noqa: E501
        :type: bool
        """

        self._deactivate = deactivate

    @property
    def description(self):
        """Gets the description of this SetTaxCalculationSettingRequest.  # noqa: E501

        Description to be applied to requested configuration  # noqa: E501

        :return: The description of this SetTaxCalculationSettingRequest.  # noqa: E501
        :rtype: str
        """
        return self._description

    @description.setter
    def description(self, description):
        """Sets the description of this SetTaxCalculationSettingRequest.

        Description to be applied to requested configuration  # noqa: E501

        :param description: The description of this SetTaxCalculationSettingRequest.  # noqa: E501
        :type: str
        """

        self._description = description

    @property
    def replace_existing_links(self):
        """Gets the replace_existing_links of this SetTaxCalculationSettingRequest.  # noqa: E501

        Flag indicating existing configuration links to profile should be replaced  This only applies when one or more profiles have been specified to be linked.   - If true, mapping conflicts will be resolved by removing other links.   - If false, mapping conflicts will cause the request to fail with an error returned.  # noqa: E501

        :return: The replace_existing_links of this SetTaxCalculationSettingRequest.  # noqa: E501
        :rtype: bool
        """
        return self._replace_existing_links

    @replace_existing_links.setter
    def replace_existing_links(self, replace_existing_links):
        """Sets the replace_existing_links of this SetTaxCalculationSettingRequest.

        Flag indicating existing configuration links to profile should be replaced  This only applies when one or more profiles have been specified to be linked.   - If true, mapping conflicts will be resolved by removing other links.   - If false, mapping conflicts will cause the request to fail with an error returned.  # noqa: E501

        :param replace_existing_links: The replace_existing_links of this SetTaxCalculationSettingRequest.  # noqa: E501
        :type: bool
        """

        self._replace_existing_links = replace_existing_links

    @property
    def settings(self):
        """Gets the settings of this SetTaxCalculationSettingRequest.  # noqa: E501

        Configuration settings (required)  # noqa: E501

        :return: The settings of this SetTaxCalculationSettingRequest.  # noqa: E501
        :rtype: Configuration
        """
        return self._settings

    @settings.setter
    def settings(self, settings):
        """Sets the settings of this SetTaxCalculationSettingRequest.

        Configuration settings (required)  # noqa: E501

        :param settings: The settings of this SetTaxCalculationSettingRequest.  # noqa: E501
        :type: Configuration
        """

        self._settings = settings

    @property
    def exclusions(self):
        """Gets the exclusions of this SetTaxCalculationSettingRequest.  # noqa: E501

        List of exclusions  # noqa: E501

        :return: The exclusions of this SetTaxCalculationSettingRequest.  # noqa: E501
        :rtype: list[ExclusionConfig]
        """
        return self._exclusions

    @exclusions.setter
    def exclusions(self, exclusions):
        """Sets the exclusions of this SetTaxCalculationSettingRequest.

        List of exclusions  # noqa: E501

        :param exclusions: The exclusions of this SetTaxCalculationSettingRequest.  # noqa: E501
        :type: list[ExclusionConfig]
        """

        self._exclusions = exclusions

    @property
    def bundles(self):
        """Gets the bundles of this SetTaxCalculationSettingRequest.  # noqa: E501

        List of bundles  # noqa: E501

        :return: The bundles of this SetTaxCalculationSettingRequest.  # noqa: E501
        :rtype: list[BundleConfig]
        """
        return self._bundles

    @bundles.setter
    def bundles(self, bundles):
        """Sets the bundles of this SetTaxCalculationSettingRequest.

        List of bundles  # noqa: E501

        :param bundles: The bundles of this SetTaxCalculationSettingRequest.  # noqa: E501
        :type: list[BundleConfig]
        """

        self._bundles = bundles

    @property
    def nexus(self):
        """Gets the nexus of this SetTaxCalculationSettingRequest.  # noqa: E501

        List of nexus  # noqa: E501

        :return: The nexus of this SetTaxCalculationSettingRequest.  # noqa: E501
        :rtype: list[NexusConfig]
        """
        return self._nexus

    @nexus.setter
    def nexus(self, nexus):
        """Sets the nexus of this SetTaxCalculationSettingRequest.

        List of nexus  # noqa: E501

        :param nexus: The nexus of this SetTaxCalculationSettingRequest.  # noqa: E501
        :type: list[NexusConfig]
        """

        self._nexus = nexus

    @property
    def overrides(self):
        """Gets the overrides of this SetTaxCalculationSettingRequest.  # noqa: E501

        Overrides  # noqa: E501

        :return: The overrides of this SetTaxCalculationSettingRequest.  # noqa: E501
        :rtype: list[str]
        """
        return self._overrides

    @overrides.setter
    def overrides(self, overrides):
        """Sets the overrides of this SetTaxCalculationSettingRequest.

        Overrides  # noqa: E501

        :param overrides: The overrides of this SetTaxCalculationSettingRequest.  # noqa: E501
        :type: list[str]
        """

        self._overrides = overrides

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, SetTaxCalculationSettingRequest):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, SetTaxCalculationSettingRequest):
            return True

        return self.to_dict() != other.to_dict()
