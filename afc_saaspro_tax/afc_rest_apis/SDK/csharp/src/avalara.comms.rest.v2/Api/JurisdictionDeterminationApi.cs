/* 
 * SaasPro
 *
 * APIs to interface with communications tax engine.<br />The API requires Basic authentication.<br />Users with access to multiple clients must also set request header parameter for <code>client_id</code>.<br />Set <code>client_profile_id</code> to specify profile to be used for taxation.
 *
 * The version of the OpenAPI document: v2
 * 
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using RestSharp;
using avalara.comms.rest.v2.Client;
using avalara.comms.rest.v2.Model;

namespace avalara.comms.rest.v2.Api
{
    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IJurisdictionDeterminationApi : IApiAccessor
    {
        #region Synchronous Operations
        /// <summary>
        /// Get PCode(s) associated with a location - Ctry/State/County/City/Zip/NpaNxx/Fips.
        /// </summary>
        /// <remarks>
        /// Requests supports using best match or exact match as well as limiting the number of matches returned. Use a * on the end of Fips/Npanxx Codes to find a range of values.
        /// </remarks>
        /// <exception cref="avalara.comms.rest.v2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="pCodeLookupRequest"> (optional)</param>
        /// <returns>PCodeLookupResult</returns>
        PCodeLookupResult ApiV2AfcPCodePost (PCodeLookupRequest pCodeLookupRequest = default(PCodeLookupRequest));

        /// <summary>
        /// Get PCode(s) associated with a location - Ctry/State/County/City/Zip/NpaNxx/Fips.
        /// </summary>
        /// <remarks>
        /// Requests supports using best match or exact match as well as limiting the number of matches returned. Use a * on the end of Fips/Npanxx Codes to find a range of values.
        /// </remarks>
        /// <exception cref="avalara.comms.rest.v2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="pCodeLookupRequest"> (optional)</param>
        /// <returns>ApiResponse of PCodeLookupResult</returns>
        ApiResponse<PCodeLookupResult> ApiV2AfcPCodePostWithHttpInfo (PCodeLookupRequest pCodeLookupRequest = default(PCodeLookupRequest));
        /// <summary>
        /// Retrieves log on Geo Batch file
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="avalara.comms.rest.v2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="processId">Process Id for Geo Batch File.</param>
        /// <returns>GeoBatchLog</returns>
        GeoBatchLog ApiV2GeoBatchLogProcessIdGet (string processId);

        /// <summary>
        /// Retrieves log on Geo Batch file
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="avalara.comms.rest.v2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="processId">Process Id for Geo Batch File.</param>
        /// <returns>ApiResponse of GeoBatchLog</returns>
        ApiResponse<GeoBatchLog> ApiV2GeoBatchLogProcessIdGetWithHttpInfo (string processId);
        /// <summary>
        /// Retrieves information on Geo Batch file status
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="avalara.comms.rest.v2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="processId">Process Id for Geo Batch File.</param>
        /// <returns>GeoBatchStatus</returns>
        GeoBatchStatus ApiV2GeoBatchStatusProcessIdGet (string processId);

        /// <summary>
        /// Retrieves information on Geo Batch file status
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="avalara.comms.rest.v2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="processId">Process Id for Geo Batch File.</param>
        /// <returns>ApiResponse of GeoBatchStatus</returns>
        ApiResponse<GeoBatchStatus> ApiV2GeoBatchStatusProcessIdGetWithHttpInfo (string processId);
        /// <summary>
        /// Uploads file to Geo Batch.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="avalara.comms.rest.v2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="file"> (optional)</param>
        /// <returns>GeoBatchSubmitFileResponse</returns>
        GeoBatchSubmitFileResponse ApiV2GeoBatchUploadPost (System.IO.Stream file = default(System.IO.Stream));

        /// <summary>
        /// Uploads file to Geo Batch.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="avalara.comms.rest.v2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="file"> (optional)</param>
        /// <returns>ApiResponse of GeoBatchSubmitFileResponse</returns>
        ApiResponse<GeoBatchSubmitFileResponse> ApiV2GeoBatchUploadPostWithHttpInfo (System.IO.Stream file = default(System.IO.Stream));
        /// <summary>
        /// Geocodes one or multiple street addresses and/or lat/long coordinate pairs.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="avalara.comms.rest.v2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="geocodeRequest">List of street addresses and/or lat/long coordinate pairs to geocode. (optional)</param>
        /// <returns>List&lt;GeocodeResult&gt;</returns>
        List<GeocodeResult> ApiV2GeoGeocodePost (List<GeocodeRequest> geocodeRequest = default(List<GeocodeRequest>));

        /// <summary>
        /// Geocodes one or multiple street addresses and/or lat/long coordinate pairs.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="avalara.comms.rest.v2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="geocodeRequest">List of street addresses and/or lat/long coordinate pairs to geocode. (optional)</param>
        /// <returns>ApiResponse of List&lt;GeocodeResult&gt;</returns>
        ApiResponse<List<GeocodeResult>> ApiV2GeoGeocodePostWithHttpInfo (List<GeocodeRequest> geocodeRequest = default(List<GeocodeRequest>));
        #endregion Synchronous Operations
        #region Asynchronous Operations
        /// <summary>
        /// Get PCode(s) associated with a location - Ctry/State/County/City/Zip/NpaNxx/Fips.
        /// </summary>
        /// <remarks>
        /// Requests supports using best match or exact match as well as limiting the number of matches returned. Use a * on the end of Fips/Npanxx Codes to find a range of values.
        /// </remarks>
        /// <exception cref="avalara.comms.rest.v2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="pCodeLookupRequest"> (optional)</param>
        /// <returns>Task of PCodeLookupResult</returns>
        System.Threading.Tasks.Task<PCodeLookupResult> ApiV2AfcPCodePostAsync (PCodeLookupRequest pCodeLookupRequest = default(PCodeLookupRequest));

        /// <summary>
        /// Get PCode(s) associated with a location - Ctry/State/County/City/Zip/NpaNxx/Fips.
        /// </summary>
        /// <remarks>
        /// Requests supports using best match or exact match as well as limiting the number of matches returned. Use a * on the end of Fips/Npanxx Codes to find a range of values.
        /// </remarks>
        /// <exception cref="avalara.comms.rest.v2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="pCodeLookupRequest"> (optional)</param>
        /// <returns>Task of ApiResponse (PCodeLookupResult)</returns>
        System.Threading.Tasks.Task<ApiResponse<PCodeLookupResult>> ApiV2AfcPCodePostAsyncWithHttpInfo (PCodeLookupRequest pCodeLookupRequest = default(PCodeLookupRequest));
        /// <summary>
        /// Retrieves log on Geo Batch file
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="avalara.comms.rest.v2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="processId">Process Id for Geo Batch File.</param>
        /// <returns>Task of GeoBatchLog</returns>
        System.Threading.Tasks.Task<GeoBatchLog> ApiV2GeoBatchLogProcessIdGetAsync (string processId);

        /// <summary>
        /// Retrieves log on Geo Batch file
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="avalara.comms.rest.v2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="processId">Process Id for Geo Batch File.</param>
        /// <returns>Task of ApiResponse (GeoBatchLog)</returns>
        System.Threading.Tasks.Task<ApiResponse<GeoBatchLog>> ApiV2GeoBatchLogProcessIdGetAsyncWithHttpInfo (string processId);
        /// <summary>
        /// Retrieves information on Geo Batch file status
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="avalara.comms.rest.v2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="processId">Process Id for Geo Batch File.</param>
        /// <returns>Task of GeoBatchStatus</returns>
        System.Threading.Tasks.Task<GeoBatchStatus> ApiV2GeoBatchStatusProcessIdGetAsync (string processId);

        /// <summary>
        /// Retrieves information on Geo Batch file status
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="avalara.comms.rest.v2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="processId">Process Id for Geo Batch File.</param>
        /// <returns>Task of ApiResponse (GeoBatchStatus)</returns>
        System.Threading.Tasks.Task<ApiResponse<GeoBatchStatus>> ApiV2GeoBatchStatusProcessIdGetAsyncWithHttpInfo (string processId);
        /// <summary>
        /// Uploads file to Geo Batch.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="avalara.comms.rest.v2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="file"> (optional)</param>
        /// <returns>Task of GeoBatchSubmitFileResponse</returns>
        System.Threading.Tasks.Task<GeoBatchSubmitFileResponse> ApiV2GeoBatchUploadPostAsync (System.IO.Stream file = default(System.IO.Stream));

        /// <summary>
        /// Uploads file to Geo Batch.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="avalara.comms.rest.v2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="file"> (optional)</param>
        /// <returns>Task of ApiResponse (GeoBatchSubmitFileResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<GeoBatchSubmitFileResponse>> ApiV2GeoBatchUploadPostAsyncWithHttpInfo (System.IO.Stream file = default(System.IO.Stream));
        /// <summary>
        /// Geocodes one or multiple street addresses and/or lat/long coordinate pairs.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="avalara.comms.rest.v2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="geocodeRequest">List of street addresses and/or lat/long coordinate pairs to geocode. (optional)</param>
        /// <returns>Task of List&lt;GeocodeResult&gt;</returns>
        System.Threading.Tasks.Task<List<GeocodeResult>> ApiV2GeoGeocodePostAsync (List<GeocodeRequest> geocodeRequest = default(List<GeocodeRequest>));

        /// <summary>
        /// Geocodes one or multiple street addresses and/or lat/long coordinate pairs.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="avalara.comms.rest.v2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="geocodeRequest">List of street addresses and/or lat/long coordinate pairs to geocode. (optional)</param>
        /// <returns>Task of ApiResponse (List&lt;GeocodeResult&gt;)</returns>
        System.Threading.Tasks.Task<ApiResponse<List<GeocodeResult>>> ApiV2GeoGeocodePostAsyncWithHttpInfo (List<GeocodeRequest> geocodeRequest = default(List<GeocodeRequest>));
        #endregion Asynchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public partial class JurisdictionDeterminationApi : IJurisdictionDeterminationApi
    {
        private avalara.comms.rest.v2.Client.ExceptionFactory _exceptionFactory = (name, response) => null;

        /// <summary>
        /// Initializes a new instance of the <see cref="JurisdictionDeterminationApi"/> class.
        /// </summary>
        /// <returns></returns>
        public JurisdictionDeterminationApi(String basePath)
        {
            this.Configuration = new avalara.comms.rest.v2.Client.Configuration { BasePath = basePath };

            ExceptionFactory = avalara.comms.rest.v2.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="JurisdictionDeterminationApi"/> class
        /// </summary>
        /// <returns></returns>
        public JurisdictionDeterminationApi()
        {
            this.Configuration = avalara.comms.rest.v2.Client.Configuration.Default;

            ExceptionFactory = avalara.comms.rest.v2.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="JurisdictionDeterminationApi"/> class
        /// using Configuration object
        /// </summary>
        /// <param name="configuration">An instance of Configuration</param>
        /// <returns></returns>
        public JurisdictionDeterminationApi(avalara.comms.rest.v2.Client.Configuration configuration = null)
        {
            if (configuration == null) // use the default one in Configuration
                this.Configuration = avalara.comms.rest.v2.Client.Configuration.Default;
            else
                this.Configuration = configuration;

            ExceptionFactory = avalara.comms.rest.v2.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Gets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        public String GetBasePath()
        {
            return this.Configuration.ApiClient.RestClient.BaseUrl.ToString();
        }

        /// <summary>
        /// Sets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        [Obsolete("SetBasePath is deprecated, please do 'Configuration.ApiClient = new ApiClient(\"http://new-path\")' instead.")]
        public void SetBasePath(String basePath)
        {
            // do nothing
        }

        /// <summary>
        /// Gets or sets the configuration object
        /// </summary>
        /// <value>An instance of the Configuration</value>
        public avalara.comms.rest.v2.Client.Configuration Configuration {get; set;}

        /// <summary>
        /// Provides a factory method hook for the creation of exceptions.
        /// </summary>
        public avalara.comms.rest.v2.Client.ExceptionFactory ExceptionFactory
        {
            get
            {
                if (_exceptionFactory != null && _exceptionFactory.GetInvocationList().Length > 1)
                {
                    throw new InvalidOperationException("Multicast delegate for ExceptionFactory is unsupported.");
                }
                return _exceptionFactory;
            }
            set { _exceptionFactory = value; }
        }

        /// <summary>
        /// Gets the default header.
        /// </summary>
        /// <returns>Dictionary of HTTP header</returns>
        [Obsolete("DefaultHeader is deprecated, please use Configuration.DefaultHeader instead.")]
        public IDictionary<String, String> DefaultHeader()
        {
            return new ReadOnlyDictionary<string, string>(this.Configuration.DefaultHeader);
        }

        /// <summary>
        /// Add default header.
        /// </summary>
        /// <param name="key">Header field name.</param>
        /// <param name="value">Header field value.</param>
        /// <returns></returns>
        [Obsolete("AddDefaultHeader is deprecated, please use Configuration.AddDefaultHeader instead.")]
        public void AddDefaultHeader(string key, string value)
        {
            this.Configuration.AddDefaultHeader(key, value);
        }

        /// <summary>
        /// Get PCode(s) associated with a location - Ctry/State/County/City/Zip/NpaNxx/Fips. Requests supports using best match or exact match as well as limiting the number of matches returned. Use a * on the end of Fips/Npanxx Codes to find a range of values.
        /// </summary>
        /// <exception cref="avalara.comms.rest.v2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="pCodeLookupRequest"> (optional)</param>
        /// <returns>PCodeLookupResult</returns>
        public PCodeLookupResult ApiV2AfcPCodePost (PCodeLookupRequest pCodeLookupRequest = default(PCodeLookupRequest))
        {
             ApiResponse<PCodeLookupResult> localVarResponse = ApiV2AfcPCodePostWithHttpInfo(pCodeLookupRequest);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Get PCode(s) associated with a location - Ctry/State/County/City/Zip/NpaNxx/Fips. Requests supports using best match or exact match as well as limiting the number of matches returned. Use a * on the end of Fips/Npanxx Codes to find a range of values.
        /// </summary>
        /// <exception cref="avalara.comms.rest.v2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="pCodeLookupRequest"> (optional)</param>
        /// <returns>ApiResponse of PCodeLookupResult</returns>
        public ApiResponse<PCodeLookupResult> ApiV2AfcPCodePostWithHttpInfo (PCodeLookupRequest pCodeLookupRequest = default(PCodeLookupRequest))
        {

            var localVarPath = "/api/v2/afc/PCode";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json-patch+json", 
                "application/json", 
                "text/json", 
                "application/_*+json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "text/plain",
                "application/json",
                "text/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (pCodeLookupRequest != null && pCodeLookupRequest.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(pCodeLookupRequest); // http body (model) parameter
            }
            else
            {
                localVarPostBody = pCodeLookupRequest; // byte array
            }

            // authentication (Basic) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(this.Configuration.Username) || !String.IsNullOrEmpty(this.Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password);
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ApiV2AfcPCodePost", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<PCodeLookupResult>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (PCodeLookupResult) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(PCodeLookupResult)));
        }

        /// <summary>
        /// Get PCode(s) associated with a location - Ctry/State/County/City/Zip/NpaNxx/Fips. Requests supports using best match or exact match as well as limiting the number of matches returned. Use a * on the end of Fips/Npanxx Codes to find a range of values.
        /// </summary>
        /// <exception cref="avalara.comms.rest.v2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="pCodeLookupRequest"> (optional)</param>
        /// <returns>Task of PCodeLookupResult</returns>
        public async System.Threading.Tasks.Task<PCodeLookupResult> ApiV2AfcPCodePostAsync (PCodeLookupRequest pCodeLookupRequest = default(PCodeLookupRequest))
        {
             ApiResponse<PCodeLookupResult> localVarResponse = await ApiV2AfcPCodePostAsyncWithHttpInfo(pCodeLookupRequest);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Get PCode(s) associated with a location - Ctry/State/County/City/Zip/NpaNxx/Fips. Requests supports using best match or exact match as well as limiting the number of matches returned. Use a * on the end of Fips/Npanxx Codes to find a range of values.
        /// </summary>
        /// <exception cref="avalara.comms.rest.v2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="pCodeLookupRequest"> (optional)</param>
        /// <returns>Task of ApiResponse (PCodeLookupResult)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<PCodeLookupResult>> ApiV2AfcPCodePostAsyncWithHttpInfo (PCodeLookupRequest pCodeLookupRequest = default(PCodeLookupRequest))
        {

            var localVarPath = "/api/v2/afc/PCode";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json-patch+json", 
                "application/json", 
                "text/json", 
                "application/_*+json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "text/plain",
                "application/json",
                "text/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (pCodeLookupRequest != null && pCodeLookupRequest.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(pCodeLookupRequest); // http body (model) parameter
            }
            else
            {
                localVarPostBody = pCodeLookupRequest; // byte array
            }

            // authentication (Basic) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(this.Configuration.Username) || !String.IsNullOrEmpty(this.Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password);
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ApiV2AfcPCodePost", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<PCodeLookupResult>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (PCodeLookupResult) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(PCodeLookupResult)));
        }

        /// <summary>
        /// Retrieves log on Geo Batch file 
        /// </summary>
        /// <exception cref="avalara.comms.rest.v2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="processId">Process Id for Geo Batch File.</param>
        /// <returns>GeoBatchLog</returns>
        public GeoBatchLog ApiV2GeoBatchLogProcessIdGet (string processId)
        {
             ApiResponse<GeoBatchLog> localVarResponse = ApiV2GeoBatchLogProcessIdGetWithHttpInfo(processId);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Retrieves log on Geo Batch file 
        /// </summary>
        /// <exception cref="avalara.comms.rest.v2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="processId">Process Id for Geo Batch File.</param>
        /// <returns>ApiResponse of GeoBatchLog</returns>
        public ApiResponse<GeoBatchLog> ApiV2GeoBatchLogProcessIdGetWithHttpInfo (string processId)
        {
            // verify the required parameter 'processId' is set
            if (processId == null)
                throw new ApiException(400, "Missing required parameter 'processId' when calling JurisdictionDeterminationApi->ApiV2GeoBatchLogProcessIdGet");

            var localVarPath = "/api/v2/geo/batch/log/{processId}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "text/plain",
                "application/json",
                "text/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (processId != null) localVarPathParams.Add("processId", this.Configuration.ApiClient.ParameterToString(processId)); // path parameter

            // authentication (Basic) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(this.Configuration.Username) || !String.IsNullOrEmpty(this.Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password);
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ApiV2GeoBatchLogProcessIdGet", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<GeoBatchLog>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (GeoBatchLog) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(GeoBatchLog)));
        }

        /// <summary>
        /// Retrieves log on Geo Batch file 
        /// </summary>
        /// <exception cref="avalara.comms.rest.v2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="processId">Process Id for Geo Batch File.</param>
        /// <returns>Task of GeoBatchLog</returns>
        public async System.Threading.Tasks.Task<GeoBatchLog> ApiV2GeoBatchLogProcessIdGetAsync (string processId)
        {
             ApiResponse<GeoBatchLog> localVarResponse = await ApiV2GeoBatchLogProcessIdGetAsyncWithHttpInfo(processId);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Retrieves log on Geo Batch file 
        /// </summary>
        /// <exception cref="avalara.comms.rest.v2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="processId">Process Id for Geo Batch File.</param>
        /// <returns>Task of ApiResponse (GeoBatchLog)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<GeoBatchLog>> ApiV2GeoBatchLogProcessIdGetAsyncWithHttpInfo (string processId)
        {
            // verify the required parameter 'processId' is set
            if (processId == null)
                throw new ApiException(400, "Missing required parameter 'processId' when calling JurisdictionDeterminationApi->ApiV2GeoBatchLogProcessIdGet");

            var localVarPath = "/api/v2/geo/batch/log/{processId}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "text/plain",
                "application/json",
                "text/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (processId != null) localVarPathParams.Add("processId", this.Configuration.ApiClient.ParameterToString(processId)); // path parameter

            // authentication (Basic) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(this.Configuration.Username) || !String.IsNullOrEmpty(this.Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password);
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ApiV2GeoBatchLogProcessIdGet", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<GeoBatchLog>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (GeoBatchLog) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(GeoBatchLog)));
        }

        /// <summary>
        /// Retrieves information on Geo Batch file status 
        /// </summary>
        /// <exception cref="avalara.comms.rest.v2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="processId">Process Id for Geo Batch File.</param>
        /// <returns>GeoBatchStatus</returns>
        public GeoBatchStatus ApiV2GeoBatchStatusProcessIdGet (string processId)
        {
             ApiResponse<GeoBatchStatus> localVarResponse = ApiV2GeoBatchStatusProcessIdGetWithHttpInfo(processId);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Retrieves information on Geo Batch file status 
        /// </summary>
        /// <exception cref="avalara.comms.rest.v2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="processId">Process Id for Geo Batch File.</param>
        /// <returns>ApiResponse of GeoBatchStatus</returns>
        public ApiResponse<GeoBatchStatus> ApiV2GeoBatchStatusProcessIdGetWithHttpInfo (string processId)
        {
            // verify the required parameter 'processId' is set
            if (processId == null)
                throw new ApiException(400, "Missing required parameter 'processId' when calling JurisdictionDeterminationApi->ApiV2GeoBatchStatusProcessIdGet");

            var localVarPath = "/api/v2/geo/batch/status/{processId}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "text/plain",
                "application/json",
                "text/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (processId != null) localVarPathParams.Add("processId", this.Configuration.ApiClient.ParameterToString(processId)); // path parameter

            // authentication (Basic) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(this.Configuration.Username) || !String.IsNullOrEmpty(this.Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password);
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ApiV2GeoBatchStatusProcessIdGet", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<GeoBatchStatus>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (GeoBatchStatus) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(GeoBatchStatus)));
        }

        /// <summary>
        /// Retrieves information on Geo Batch file status 
        /// </summary>
        /// <exception cref="avalara.comms.rest.v2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="processId">Process Id for Geo Batch File.</param>
        /// <returns>Task of GeoBatchStatus</returns>
        public async System.Threading.Tasks.Task<GeoBatchStatus> ApiV2GeoBatchStatusProcessIdGetAsync (string processId)
        {
             ApiResponse<GeoBatchStatus> localVarResponse = await ApiV2GeoBatchStatusProcessIdGetAsyncWithHttpInfo(processId);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Retrieves information on Geo Batch file status 
        /// </summary>
        /// <exception cref="avalara.comms.rest.v2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="processId">Process Id for Geo Batch File.</param>
        /// <returns>Task of ApiResponse (GeoBatchStatus)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<GeoBatchStatus>> ApiV2GeoBatchStatusProcessIdGetAsyncWithHttpInfo (string processId)
        {
            // verify the required parameter 'processId' is set
            if (processId == null)
                throw new ApiException(400, "Missing required parameter 'processId' when calling JurisdictionDeterminationApi->ApiV2GeoBatchStatusProcessIdGet");

            var localVarPath = "/api/v2/geo/batch/status/{processId}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "text/plain",
                "application/json",
                "text/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (processId != null) localVarPathParams.Add("processId", this.Configuration.ApiClient.ParameterToString(processId)); // path parameter

            // authentication (Basic) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(this.Configuration.Username) || !String.IsNullOrEmpty(this.Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password);
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ApiV2GeoBatchStatusProcessIdGet", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<GeoBatchStatus>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (GeoBatchStatus) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(GeoBatchStatus)));
        }

        /// <summary>
        /// Uploads file to Geo Batch. 
        /// </summary>
        /// <exception cref="avalara.comms.rest.v2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="file"> (optional)</param>
        /// <returns>GeoBatchSubmitFileResponse</returns>
        public GeoBatchSubmitFileResponse ApiV2GeoBatchUploadPost (System.IO.Stream file = default(System.IO.Stream))
        {
             ApiResponse<GeoBatchSubmitFileResponse> localVarResponse = ApiV2GeoBatchUploadPostWithHttpInfo(file);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Uploads file to Geo Batch. 
        /// </summary>
        /// <exception cref="avalara.comms.rest.v2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="file"> (optional)</param>
        /// <returns>ApiResponse of GeoBatchSubmitFileResponse</returns>
        public ApiResponse<GeoBatchSubmitFileResponse> ApiV2GeoBatchUploadPostWithHttpInfo (System.IO.Stream file = default(System.IO.Stream))
        {

            var localVarPath = "/api/v2/geo/batch/Upload";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "multipart/form-data"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "text/plain",
                "application/json",
                "text/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (file != null) localVarFileParams.Add("file", this.Configuration.ApiClient.ParameterToFile("file", file));

            // authentication (Basic) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(this.Configuration.Username) || !String.IsNullOrEmpty(this.Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password);
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ApiV2GeoBatchUploadPost", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<GeoBatchSubmitFileResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (GeoBatchSubmitFileResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(GeoBatchSubmitFileResponse)));
        }

        /// <summary>
        /// Uploads file to Geo Batch. 
        /// </summary>
        /// <exception cref="avalara.comms.rest.v2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="file"> (optional)</param>
        /// <returns>Task of GeoBatchSubmitFileResponse</returns>
        public async System.Threading.Tasks.Task<GeoBatchSubmitFileResponse> ApiV2GeoBatchUploadPostAsync (System.IO.Stream file = default(System.IO.Stream))
        {
             ApiResponse<GeoBatchSubmitFileResponse> localVarResponse = await ApiV2GeoBatchUploadPostAsyncWithHttpInfo(file);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Uploads file to Geo Batch. 
        /// </summary>
        /// <exception cref="avalara.comms.rest.v2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="file"> (optional)</param>
        /// <returns>Task of ApiResponse (GeoBatchSubmitFileResponse)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<GeoBatchSubmitFileResponse>> ApiV2GeoBatchUploadPostAsyncWithHttpInfo (System.IO.Stream file = default(System.IO.Stream))
        {

            var localVarPath = "/api/v2/geo/batch/Upload";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "multipart/form-data"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "text/plain",
                "application/json",
                "text/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (file != null) localVarFileParams.Add("file", this.Configuration.ApiClient.ParameterToFile("file", file));

            // authentication (Basic) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(this.Configuration.Username) || !String.IsNullOrEmpty(this.Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password);
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ApiV2GeoBatchUploadPost", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<GeoBatchSubmitFileResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (GeoBatchSubmitFileResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(GeoBatchSubmitFileResponse)));
        }

        /// <summary>
        /// Geocodes one or multiple street addresses and/or lat/long coordinate pairs. 
        /// </summary>
        /// <exception cref="avalara.comms.rest.v2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="geocodeRequest">List of street addresses and/or lat/long coordinate pairs to geocode. (optional)</param>
        /// <returns>List&lt;GeocodeResult&gt;</returns>
        public List<GeocodeResult> ApiV2GeoGeocodePost (List<GeocodeRequest> geocodeRequest = default(List<GeocodeRequest>))
        {
             ApiResponse<List<GeocodeResult>> localVarResponse = ApiV2GeoGeocodePostWithHttpInfo(geocodeRequest);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Geocodes one or multiple street addresses and/or lat/long coordinate pairs. 
        /// </summary>
        /// <exception cref="avalara.comms.rest.v2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="geocodeRequest">List of street addresses and/or lat/long coordinate pairs to geocode. (optional)</param>
        /// <returns>ApiResponse of List&lt;GeocodeResult&gt;</returns>
        public ApiResponse<List<GeocodeResult>> ApiV2GeoGeocodePostWithHttpInfo (List<GeocodeRequest> geocodeRequest = default(List<GeocodeRequest>))
        {

            var localVarPath = "/api/v2/geo/Geocode";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json-patch+json", 
                "application/json", 
                "text/json", 
                "application/_*+json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "text/plain",
                "application/json",
                "text/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (geocodeRequest != null && geocodeRequest.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(geocodeRequest); // http body (model) parameter
            }
            else
            {
                localVarPostBody = geocodeRequest; // byte array
            }

            // authentication (Basic) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(this.Configuration.Username) || !String.IsNullOrEmpty(this.Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password);
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ApiV2GeoGeocodePost", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<GeocodeResult>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (List<GeocodeResult>) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<GeocodeResult>)));
        }

        /// <summary>
        /// Geocodes one or multiple street addresses and/or lat/long coordinate pairs. 
        /// </summary>
        /// <exception cref="avalara.comms.rest.v2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="geocodeRequest">List of street addresses and/or lat/long coordinate pairs to geocode. (optional)</param>
        /// <returns>Task of List&lt;GeocodeResult&gt;</returns>
        public async System.Threading.Tasks.Task<List<GeocodeResult>> ApiV2GeoGeocodePostAsync (List<GeocodeRequest> geocodeRequest = default(List<GeocodeRequest>))
        {
             ApiResponse<List<GeocodeResult>> localVarResponse = await ApiV2GeoGeocodePostAsyncWithHttpInfo(geocodeRequest);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Geocodes one or multiple street addresses and/or lat/long coordinate pairs. 
        /// </summary>
        /// <exception cref="avalara.comms.rest.v2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="geocodeRequest">List of street addresses and/or lat/long coordinate pairs to geocode. (optional)</param>
        /// <returns>Task of ApiResponse (List&lt;GeocodeResult&gt;)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<List<GeocodeResult>>> ApiV2GeoGeocodePostAsyncWithHttpInfo (List<GeocodeRequest> geocodeRequest = default(List<GeocodeRequest>))
        {

            var localVarPath = "/api/v2/geo/Geocode";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json-patch+json", 
                "application/json", 
                "text/json", 
                "application/_*+json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "text/plain",
                "application/json",
                "text/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (geocodeRequest != null && geocodeRequest.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(geocodeRequest); // http body (model) parameter
            }
            else
            {
                localVarPostBody = geocodeRequest; // byte array
            }

            // authentication (Basic) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(this.Configuration.Username) || !String.IsNullOrEmpty(this.Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password);
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ApiV2GeoGeocodePost", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<GeocodeResult>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (List<GeocodeResult>) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<GeocodeResult>)));
        }

    }
}
