/* 
 * SaasPro
 *
 * APIs to interface with communications tax engine.<br />The API requires Basic authentication.<br />Users with access to multiple clients must also set request header parameter for <code>client_id</code>.<br />Set <code>client_profile_id</code> to specify profile to be used for taxation.
 *
 * The version of the OpenAPI document: v2
 * 
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using RestSharp;
using avalara.comms.rest.v2.Client;
using avalara.comms.rest.v2.Model;

namespace avalara.comms.rest.v2.Api
{
    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface ILookupsApi : IApiAccessor
    {
        #region Synchronous Operations
        /// <summary>
        /// Get location data associated with a PCode
        /// </summary>
        /// <remarks>
        /// Request will return all jurisdictions associated with the PCode
        /// </remarks>
        /// <exception cref="avalara.comms.rest.v2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="pcode"></param>
        /// <returns>PCodeLookupResult</returns>
        PCodeLookupResult ApiV2AfcLocationPcodeGet (int pcode);

        /// <summary>
        /// Get location data associated with a PCode
        /// </summary>
        /// <remarks>
        /// Request will return all jurisdictions associated with the PCode
        /// </remarks>
        /// <exception cref="avalara.comms.rest.v2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="pcode"></param>
        /// <returns>ApiResponse of PCodeLookupResult</returns>
        ApiResponse<PCodeLookupResult> ApiV2AfcLocationPcodeGetWithHttpInfo (int pcode);
        /// <summary>
        /// Get primary location data associated with a PCode
        /// </summary>
        /// <remarks>
        /// Request will return primary jurisdiction associated with the PCode
        /// </remarks>
        /// <exception cref="avalara.comms.rest.v2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="pCode"></param>
        /// <returns>PCodeLookupResult</returns>
        PCodeLookupResult ApiV2AfcPrimaryPCodeGet (int pCode);

        /// <summary>
        /// Get primary location data associated with a PCode
        /// </summary>
        /// <remarks>
        /// Request will return primary jurisdiction associated with the PCode
        /// </remarks>
        /// <exception cref="avalara.comms.rest.v2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="pCode"></param>
        /// <returns>ApiResponse of PCodeLookupResult</returns>
        ApiResponse<PCodeLookupResult> ApiV2AfcPrimaryPCodeGetWithHttpInfo (int pCode);
        /// <summary>
        /// Retrieves server time, service build version and engine version
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="avalara.comms.rest.v2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>ServiceInfo</returns>
        ServiceInfo ApiV2AfcServiceinfoGet ();

        /// <summary>
        /// Retrieves server time, service build version and engine version
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="avalara.comms.rest.v2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>ApiResponse of ServiceInfo</returns>
        ApiResponse<ServiceInfo> ApiV2AfcServiceinfoGetWithHttpInfo ();
        /// <summary>
        /// Get the tax information (description and category) for a tax type ID
        /// </summary>
        /// <remarks>
        /// This method returns the description for the specified tax type ID. If tax type * is supplied it will return all tax types.
        /// </remarks>
        /// <exception cref="avalara.comms.rest.v2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="taxType">Tax type ID for the tax type.</param>
        /// <returns>List&lt;TaxTypeData&gt;</returns>
        List<TaxTypeData> ApiV2AfcTaxtypeTaxTypeGet (string taxType);

        /// <summary>
        /// Get the tax information (description and category) for a tax type ID
        /// </summary>
        /// <remarks>
        /// This method returns the description for the specified tax type ID. If tax type * is supplied it will return all tax types.
        /// </remarks>
        /// <exception cref="avalara.comms.rest.v2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="taxType">Tax type ID for the tax type.</param>
        /// <returns>ApiResponse of List&lt;TaxTypeData&gt;</returns>
        ApiResponse<List<TaxTypeData>> ApiV2AfcTaxtypeTaxTypeGetWithHttpInfo (string taxType);
        /// <summary>
        /// Get transaction/service pair information
        /// </summary>
        /// <remarks>
        /// This method returns the description for the transaction type, service type and the ts pairs.
        /// </remarks>
        /// <exception cref="avalara.comms.rest.v2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>List&lt;TSPairData&gt;</returns>
        List<TSPairData> ApiV2AfcTspairsGet ();

        /// <summary>
        /// Get transaction/service pair information
        /// </summary>
        /// <remarks>
        /// This method returns the description for the transaction type, service type and the ts pairs.
        /// </remarks>
        /// <exception cref="avalara.comms.rest.v2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>ApiResponse of List&lt;TSPairData&gt;</returns>
        ApiResponse<List<TSPairData>> ApiV2AfcTspairsGetWithHttpInfo ();
        #endregion Synchronous Operations
        #region Asynchronous Operations
        /// <summary>
        /// Get location data associated with a PCode
        /// </summary>
        /// <remarks>
        /// Request will return all jurisdictions associated with the PCode
        /// </remarks>
        /// <exception cref="avalara.comms.rest.v2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="pcode"></param>
        /// <returns>Task of PCodeLookupResult</returns>
        System.Threading.Tasks.Task<PCodeLookupResult> ApiV2AfcLocationPcodeGetAsync (int pcode);

        /// <summary>
        /// Get location data associated with a PCode
        /// </summary>
        /// <remarks>
        /// Request will return all jurisdictions associated with the PCode
        /// </remarks>
        /// <exception cref="avalara.comms.rest.v2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="pcode"></param>
        /// <returns>Task of ApiResponse (PCodeLookupResult)</returns>
        System.Threading.Tasks.Task<ApiResponse<PCodeLookupResult>> ApiV2AfcLocationPcodeGetAsyncWithHttpInfo (int pcode);
        /// <summary>
        /// Get primary location data associated with a PCode
        /// </summary>
        /// <remarks>
        /// Request will return primary jurisdiction associated with the PCode
        /// </remarks>
        /// <exception cref="avalara.comms.rest.v2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="pCode"></param>
        /// <returns>Task of PCodeLookupResult</returns>
        System.Threading.Tasks.Task<PCodeLookupResult> ApiV2AfcPrimaryPCodeGetAsync (int pCode);

        /// <summary>
        /// Get primary location data associated with a PCode
        /// </summary>
        /// <remarks>
        /// Request will return primary jurisdiction associated with the PCode
        /// </remarks>
        /// <exception cref="avalara.comms.rest.v2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="pCode"></param>
        /// <returns>Task of ApiResponse (PCodeLookupResult)</returns>
        System.Threading.Tasks.Task<ApiResponse<PCodeLookupResult>> ApiV2AfcPrimaryPCodeGetAsyncWithHttpInfo (int pCode);
        /// <summary>
        /// Retrieves server time, service build version and engine version
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="avalara.comms.rest.v2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of ServiceInfo</returns>
        System.Threading.Tasks.Task<ServiceInfo> ApiV2AfcServiceinfoGetAsync ();

        /// <summary>
        /// Retrieves server time, service build version and engine version
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="avalara.comms.rest.v2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of ApiResponse (ServiceInfo)</returns>
        System.Threading.Tasks.Task<ApiResponse<ServiceInfo>> ApiV2AfcServiceinfoGetAsyncWithHttpInfo ();
        /// <summary>
        /// Get the tax information (description and category) for a tax type ID
        /// </summary>
        /// <remarks>
        /// This method returns the description for the specified tax type ID. If tax type * is supplied it will return all tax types.
        /// </remarks>
        /// <exception cref="avalara.comms.rest.v2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="taxType">Tax type ID for the tax type.</param>
        /// <returns>Task of List&lt;TaxTypeData&gt;</returns>
        System.Threading.Tasks.Task<List<TaxTypeData>> ApiV2AfcTaxtypeTaxTypeGetAsync (string taxType);

        /// <summary>
        /// Get the tax information (description and category) for a tax type ID
        /// </summary>
        /// <remarks>
        /// This method returns the description for the specified tax type ID. If tax type * is supplied it will return all tax types.
        /// </remarks>
        /// <exception cref="avalara.comms.rest.v2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="taxType">Tax type ID for the tax type.</param>
        /// <returns>Task of ApiResponse (List&lt;TaxTypeData&gt;)</returns>
        System.Threading.Tasks.Task<ApiResponse<List<TaxTypeData>>> ApiV2AfcTaxtypeTaxTypeGetAsyncWithHttpInfo (string taxType);
        /// <summary>
        /// Get transaction/service pair information
        /// </summary>
        /// <remarks>
        /// This method returns the description for the transaction type, service type and the ts pairs.
        /// </remarks>
        /// <exception cref="avalara.comms.rest.v2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of List&lt;TSPairData&gt;</returns>
        System.Threading.Tasks.Task<List<TSPairData>> ApiV2AfcTspairsGetAsync ();

        /// <summary>
        /// Get transaction/service pair information
        /// </summary>
        /// <remarks>
        /// This method returns the description for the transaction type, service type and the ts pairs.
        /// </remarks>
        /// <exception cref="avalara.comms.rest.v2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of ApiResponse (List&lt;TSPairData&gt;)</returns>
        System.Threading.Tasks.Task<ApiResponse<List<TSPairData>>> ApiV2AfcTspairsGetAsyncWithHttpInfo ();
        #endregion Asynchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public partial class LookupsApi : ILookupsApi
    {
        private avalara.comms.rest.v2.Client.ExceptionFactory _exceptionFactory = (name, response) => null;

        /// <summary>
        /// Initializes a new instance of the <see cref="LookupsApi"/> class.
        /// </summary>
        /// <returns></returns>
        public LookupsApi(String basePath)
        {
            this.Configuration = new avalara.comms.rest.v2.Client.Configuration { BasePath = basePath };

            ExceptionFactory = avalara.comms.rest.v2.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="LookupsApi"/> class
        /// </summary>
        /// <returns></returns>
        public LookupsApi()
        {
            this.Configuration = avalara.comms.rest.v2.Client.Configuration.Default;

            ExceptionFactory = avalara.comms.rest.v2.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="LookupsApi"/> class
        /// using Configuration object
        /// </summary>
        /// <param name="configuration">An instance of Configuration</param>
        /// <returns></returns>
        public LookupsApi(avalara.comms.rest.v2.Client.Configuration configuration = null)
        {
            if (configuration == null) // use the default one in Configuration
                this.Configuration = avalara.comms.rest.v2.Client.Configuration.Default;
            else
                this.Configuration = configuration;

            ExceptionFactory = avalara.comms.rest.v2.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Gets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        public String GetBasePath()
        {
            return this.Configuration.ApiClient.RestClient.BaseUrl.ToString();
        }

        /// <summary>
        /// Sets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        [Obsolete("SetBasePath is deprecated, please do 'Configuration.ApiClient = new ApiClient(\"http://new-path\")' instead.")]
        public void SetBasePath(String basePath)
        {
            // do nothing
        }

        /// <summary>
        /// Gets or sets the configuration object
        /// </summary>
        /// <value>An instance of the Configuration</value>
        public avalara.comms.rest.v2.Client.Configuration Configuration {get; set;}

        /// <summary>
        /// Provides a factory method hook for the creation of exceptions.
        /// </summary>
        public avalara.comms.rest.v2.Client.ExceptionFactory ExceptionFactory
        {
            get
            {
                if (_exceptionFactory != null && _exceptionFactory.GetInvocationList().Length > 1)
                {
                    throw new InvalidOperationException("Multicast delegate for ExceptionFactory is unsupported.");
                }
                return _exceptionFactory;
            }
            set { _exceptionFactory = value; }
        }

        /// <summary>
        /// Gets the default header.
        /// </summary>
        /// <returns>Dictionary of HTTP header</returns>
        [Obsolete("DefaultHeader is deprecated, please use Configuration.DefaultHeader instead.")]
        public IDictionary<String, String> DefaultHeader()
        {
            return new ReadOnlyDictionary<string, string>(this.Configuration.DefaultHeader);
        }

        /// <summary>
        /// Add default header.
        /// </summary>
        /// <param name="key">Header field name.</param>
        /// <param name="value">Header field value.</param>
        /// <returns></returns>
        [Obsolete("AddDefaultHeader is deprecated, please use Configuration.AddDefaultHeader instead.")]
        public void AddDefaultHeader(string key, string value)
        {
            this.Configuration.AddDefaultHeader(key, value);
        }

        /// <summary>
        /// Get location data associated with a PCode Request will return all jurisdictions associated with the PCode
        /// </summary>
        /// <exception cref="avalara.comms.rest.v2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="pcode"></param>
        /// <returns>PCodeLookupResult</returns>
        public PCodeLookupResult ApiV2AfcLocationPcodeGet (int pcode)
        {
             ApiResponse<PCodeLookupResult> localVarResponse = ApiV2AfcLocationPcodeGetWithHttpInfo(pcode);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Get location data associated with a PCode Request will return all jurisdictions associated with the PCode
        /// </summary>
        /// <exception cref="avalara.comms.rest.v2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="pcode"></param>
        /// <returns>ApiResponse of PCodeLookupResult</returns>
        public ApiResponse<PCodeLookupResult> ApiV2AfcLocationPcodeGetWithHttpInfo (int pcode)
        {
            // verify the required parameter 'pcode' is set
            if (pcode == null)
                throw new ApiException(400, "Missing required parameter 'pcode' when calling LookupsApi->ApiV2AfcLocationPcodeGet");

            var localVarPath = "/api/v2/afc/location/{pcode}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "text/plain",
                "application/json",
                "text/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (pcode != null) localVarPathParams.Add("pcode", this.Configuration.ApiClient.ParameterToString(pcode)); // path parameter

            // authentication (Basic) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(this.Configuration.Username) || !String.IsNullOrEmpty(this.Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password);
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ApiV2AfcLocationPcodeGet", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<PCodeLookupResult>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (PCodeLookupResult) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(PCodeLookupResult)));
        }

        /// <summary>
        /// Get location data associated with a PCode Request will return all jurisdictions associated with the PCode
        /// </summary>
        /// <exception cref="avalara.comms.rest.v2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="pcode"></param>
        /// <returns>Task of PCodeLookupResult</returns>
        public async System.Threading.Tasks.Task<PCodeLookupResult> ApiV2AfcLocationPcodeGetAsync (int pcode)
        {
             ApiResponse<PCodeLookupResult> localVarResponse = await ApiV2AfcLocationPcodeGetAsyncWithHttpInfo(pcode);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Get location data associated with a PCode Request will return all jurisdictions associated with the PCode
        /// </summary>
        /// <exception cref="avalara.comms.rest.v2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="pcode"></param>
        /// <returns>Task of ApiResponse (PCodeLookupResult)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<PCodeLookupResult>> ApiV2AfcLocationPcodeGetAsyncWithHttpInfo (int pcode)
        {
            // verify the required parameter 'pcode' is set
            if (pcode == null)
                throw new ApiException(400, "Missing required parameter 'pcode' when calling LookupsApi->ApiV2AfcLocationPcodeGet");

            var localVarPath = "/api/v2/afc/location/{pcode}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "text/plain",
                "application/json",
                "text/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (pcode != null) localVarPathParams.Add("pcode", this.Configuration.ApiClient.ParameterToString(pcode)); // path parameter

            // authentication (Basic) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(this.Configuration.Username) || !String.IsNullOrEmpty(this.Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password);
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ApiV2AfcLocationPcodeGet", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<PCodeLookupResult>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (PCodeLookupResult) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(PCodeLookupResult)));
        }

        /// <summary>
        /// Get primary location data associated with a PCode Request will return primary jurisdiction associated with the PCode
        /// </summary>
        /// <exception cref="avalara.comms.rest.v2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="pCode"></param>
        /// <returns>PCodeLookupResult</returns>
        public PCodeLookupResult ApiV2AfcPrimaryPCodeGet (int pCode)
        {
             ApiResponse<PCodeLookupResult> localVarResponse = ApiV2AfcPrimaryPCodeGetWithHttpInfo(pCode);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Get primary location data associated with a PCode Request will return primary jurisdiction associated with the PCode
        /// </summary>
        /// <exception cref="avalara.comms.rest.v2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="pCode"></param>
        /// <returns>ApiResponse of PCodeLookupResult</returns>
        public ApiResponse<PCodeLookupResult> ApiV2AfcPrimaryPCodeGetWithHttpInfo (int pCode)
        {
            // verify the required parameter 'pCode' is set
            if (pCode == null)
                throw new ApiException(400, "Missing required parameter 'pCode' when calling LookupsApi->ApiV2AfcPrimaryPCodeGet");

            var localVarPath = "/api/v2/afc/primary/{pCode}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "text/plain",
                "application/json",
                "text/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (pCode != null) localVarPathParams.Add("pCode", this.Configuration.ApiClient.ParameterToString(pCode)); // path parameter

            // authentication (Basic) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(this.Configuration.Username) || !String.IsNullOrEmpty(this.Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password);
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ApiV2AfcPrimaryPCodeGet", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<PCodeLookupResult>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (PCodeLookupResult) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(PCodeLookupResult)));
        }

        /// <summary>
        /// Get primary location data associated with a PCode Request will return primary jurisdiction associated with the PCode
        /// </summary>
        /// <exception cref="avalara.comms.rest.v2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="pCode"></param>
        /// <returns>Task of PCodeLookupResult</returns>
        public async System.Threading.Tasks.Task<PCodeLookupResult> ApiV2AfcPrimaryPCodeGetAsync (int pCode)
        {
             ApiResponse<PCodeLookupResult> localVarResponse = await ApiV2AfcPrimaryPCodeGetAsyncWithHttpInfo(pCode);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Get primary location data associated with a PCode Request will return primary jurisdiction associated with the PCode
        /// </summary>
        /// <exception cref="avalara.comms.rest.v2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="pCode"></param>
        /// <returns>Task of ApiResponse (PCodeLookupResult)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<PCodeLookupResult>> ApiV2AfcPrimaryPCodeGetAsyncWithHttpInfo (int pCode)
        {
            // verify the required parameter 'pCode' is set
            if (pCode == null)
                throw new ApiException(400, "Missing required parameter 'pCode' when calling LookupsApi->ApiV2AfcPrimaryPCodeGet");

            var localVarPath = "/api/v2/afc/primary/{pCode}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "text/plain",
                "application/json",
                "text/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (pCode != null) localVarPathParams.Add("pCode", this.Configuration.ApiClient.ParameterToString(pCode)); // path parameter

            // authentication (Basic) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(this.Configuration.Username) || !String.IsNullOrEmpty(this.Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password);
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ApiV2AfcPrimaryPCodeGet", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<PCodeLookupResult>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (PCodeLookupResult) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(PCodeLookupResult)));
        }

        /// <summary>
        /// Retrieves server time, service build version and engine version 
        /// </summary>
        /// <exception cref="avalara.comms.rest.v2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>ServiceInfo</returns>
        public ServiceInfo ApiV2AfcServiceinfoGet ()
        {
             ApiResponse<ServiceInfo> localVarResponse = ApiV2AfcServiceinfoGetWithHttpInfo();
             return localVarResponse.Data;
        }

        /// <summary>
        /// Retrieves server time, service build version and engine version 
        /// </summary>
        /// <exception cref="avalara.comms.rest.v2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>ApiResponse of ServiceInfo</returns>
        public ApiResponse<ServiceInfo> ApiV2AfcServiceinfoGetWithHttpInfo ()
        {

            var localVarPath = "/api/v2/afc/serviceinfo";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "text/plain",
                "application/json",
                "text/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);


            // authentication (Basic) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(this.Configuration.Username) || !String.IsNullOrEmpty(this.Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password);
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ApiV2AfcServiceinfoGet", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<ServiceInfo>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (ServiceInfo) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(ServiceInfo)));
        }

        /// <summary>
        /// Retrieves server time, service build version and engine version 
        /// </summary>
        /// <exception cref="avalara.comms.rest.v2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of ServiceInfo</returns>
        public async System.Threading.Tasks.Task<ServiceInfo> ApiV2AfcServiceinfoGetAsync ()
        {
             ApiResponse<ServiceInfo> localVarResponse = await ApiV2AfcServiceinfoGetAsyncWithHttpInfo();
             return localVarResponse.Data;

        }

        /// <summary>
        /// Retrieves server time, service build version and engine version 
        /// </summary>
        /// <exception cref="avalara.comms.rest.v2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of ApiResponse (ServiceInfo)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<ServiceInfo>> ApiV2AfcServiceinfoGetAsyncWithHttpInfo ()
        {

            var localVarPath = "/api/v2/afc/serviceinfo";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "text/plain",
                "application/json",
                "text/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);


            // authentication (Basic) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(this.Configuration.Username) || !String.IsNullOrEmpty(this.Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password);
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ApiV2AfcServiceinfoGet", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<ServiceInfo>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (ServiceInfo) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(ServiceInfo)));
        }

        /// <summary>
        /// Get the tax information (description and category) for a tax type ID This method returns the description for the specified tax type ID. If tax type * is supplied it will return all tax types.
        /// </summary>
        /// <exception cref="avalara.comms.rest.v2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="taxType">Tax type ID for the tax type.</param>
        /// <returns>List&lt;TaxTypeData&gt;</returns>
        public List<TaxTypeData> ApiV2AfcTaxtypeTaxTypeGet (string taxType)
        {
             ApiResponse<List<TaxTypeData>> localVarResponse = ApiV2AfcTaxtypeTaxTypeGetWithHttpInfo(taxType);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Get the tax information (description and category) for a tax type ID This method returns the description for the specified tax type ID. If tax type * is supplied it will return all tax types.
        /// </summary>
        /// <exception cref="avalara.comms.rest.v2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="taxType">Tax type ID for the tax type.</param>
        /// <returns>ApiResponse of List&lt;TaxTypeData&gt;</returns>
        public ApiResponse<List<TaxTypeData>> ApiV2AfcTaxtypeTaxTypeGetWithHttpInfo (string taxType)
        {
            // verify the required parameter 'taxType' is set
            if (taxType == null)
                throw new ApiException(400, "Missing required parameter 'taxType' when calling LookupsApi->ApiV2AfcTaxtypeTaxTypeGet");

            var localVarPath = "/api/v2/afc/taxtype/{taxType}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "text/plain",
                "application/json",
                "text/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (taxType != null) localVarPathParams.Add("taxType", this.Configuration.ApiClient.ParameterToString(taxType)); // path parameter

            // authentication (Basic) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(this.Configuration.Username) || !String.IsNullOrEmpty(this.Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password);
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ApiV2AfcTaxtypeTaxTypeGet", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<TaxTypeData>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (List<TaxTypeData>) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<TaxTypeData>)));
        }

        /// <summary>
        /// Get the tax information (description and category) for a tax type ID This method returns the description for the specified tax type ID. If tax type * is supplied it will return all tax types.
        /// </summary>
        /// <exception cref="avalara.comms.rest.v2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="taxType">Tax type ID for the tax type.</param>
        /// <returns>Task of List&lt;TaxTypeData&gt;</returns>
        public async System.Threading.Tasks.Task<List<TaxTypeData>> ApiV2AfcTaxtypeTaxTypeGetAsync (string taxType)
        {
             ApiResponse<List<TaxTypeData>> localVarResponse = await ApiV2AfcTaxtypeTaxTypeGetAsyncWithHttpInfo(taxType);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Get the tax information (description and category) for a tax type ID This method returns the description for the specified tax type ID. If tax type * is supplied it will return all tax types.
        /// </summary>
        /// <exception cref="avalara.comms.rest.v2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="taxType">Tax type ID for the tax type.</param>
        /// <returns>Task of ApiResponse (List&lt;TaxTypeData&gt;)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<List<TaxTypeData>>> ApiV2AfcTaxtypeTaxTypeGetAsyncWithHttpInfo (string taxType)
        {
            // verify the required parameter 'taxType' is set
            if (taxType == null)
                throw new ApiException(400, "Missing required parameter 'taxType' when calling LookupsApi->ApiV2AfcTaxtypeTaxTypeGet");

            var localVarPath = "/api/v2/afc/taxtype/{taxType}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "text/plain",
                "application/json",
                "text/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (taxType != null) localVarPathParams.Add("taxType", this.Configuration.ApiClient.ParameterToString(taxType)); // path parameter

            // authentication (Basic) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(this.Configuration.Username) || !String.IsNullOrEmpty(this.Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password);
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ApiV2AfcTaxtypeTaxTypeGet", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<TaxTypeData>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (List<TaxTypeData>) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<TaxTypeData>)));
        }

        /// <summary>
        /// Get transaction/service pair information This method returns the description for the transaction type, service type and the ts pairs.
        /// </summary>
        /// <exception cref="avalara.comms.rest.v2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>List&lt;TSPairData&gt;</returns>
        public List<TSPairData> ApiV2AfcTspairsGet ()
        {
             ApiResponse<List<TSPairData>> localVarResponse = ApiV2AfcTspairsGetWithHttpInfo();
             return localVarResponse.Data;
        }

        /// <summary>
        /// Get transaction/service pair information This method returns the description for the transaction type, service type and the ts pairs.
        /// </summary>
        /// <exception cref="avalara.comms.rest.v2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>ApiResponse of List&lt;TSPairData&gt;</returns>
        public ApiResponse<List<TSPairData>> ApiV2AfcTspairsGetWithHttpInfo ()
        {

            var localVarPath = "/api/v2/afc/tspairs";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "text/plain",
                "application/json",
                "text/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);


            // authentication (Basic) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(this.Configuration.Username) || !String.IsNullOrEmpty(this.Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password);
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ApiV2AfcTspairsGet", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<TSPairData>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (List<TSPairData>) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<TSPairData>)));
        }

        /// <summary>
        /// Get transaction/service pair information This method returns the description for the transaction type, service type and the ts pairs.
        /// </summary>
        /// <exception cref="avalara.comms.rest.v2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of List&lt;TSPairData&gt;</returns>
        public async System.Threading.Tasks.Task<List<TSPairData>> ApiV2AfcTspairsGetAsync ()
        {
             ApiResponse<List<TSPairData>> localVarResponse = await ApiV2AfcTspairsGetAsyncWithHttpInfo();
             return localVarResponse.Data;

        }

        /// <summary>
        /// Get transaction/service pair information This method returns the description for the transaction type, service type and the ts pairs.
        /// </summary>
        /// <exception cref="avalara.comms.rest.v2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of ApiResponse (List&lt;TSPairData&gt;)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<List<TSPairData>>> ApiV2AfcTspairsGetAsyncWithHttpInfo ()
        {

            var localVarPath = "/api/v2/afc/tspairs";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "text/plain",
                "application/json",
                "text/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);


            // authentication (Basic) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(this.Configuration.Username) || !String.IsNullOrEmpty(this.Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password);
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ApiV2AfcTspairsGet", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<TSPairData>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (List<TSPairData>) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<TSPairData>)));
        }

    }
}
