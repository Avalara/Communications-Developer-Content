/* 
 * SaasPro
 *
 * APIs to interface with communications tax engine.<br />The API requires Basic authentication.<br />Users with access to multiple clients must also set request header parameter for <code>client_id</code>.<br />Set <code>client_profile_id</code> to specify profile to be used for taxation.
 *
 * The version of the OpenAPI document: v2
 * 
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using RestSharp;
using avalara.comms.rest.v2.Client;
using avalara.comms.rest.v2.Model;

namespace avalara.comms.rest.v2.Api
{
    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface ITaxCalculationApi : IApiAccessor
    {
        #region Synchronous Operations
        /// <summary>
        /// Performs tax calculations on all invoices and line items within the request body.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="avalara.comms.rest.v2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="calcTaxesRequest">CalcTaxesRequest object containing invoices to process and data required               for performing tax calculations. (optional)</param>
        /// <returns>CalcTaxesResponse</returns>
        CalcTaxesResponse ApiV2AfcCalcTaxesPost (CalcTaxesRequest calcTaxesRequest = default(CalcTaxesRequest));

        /// <summary>
        /// Performs tax calculations on all invoices and line items within the request body.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="avalara.comms.rest.v2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="calcTaxesRequest">CalcTaxesRequest object containing invoices to process and data required               for performing tax calculations. (optional)</param>
        /// <returns>ApiResponse of CalcTaxesResponse</returns>
        ApiResponse<CalcTaxesResponse> ApiV2AfcCalcTaxesPostWithHttpInfo (CalcTaxesRequest calcTaxesRequest = default(CalcTaxesRequest));
        /// <summary>
        /// Commits or un-commits a document code.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="avalara.comms.rest.v2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="commitRequest">CommitRequest object containing document code and optional field data to override in reports. (optional)</param>
        /// <returns>CommitResponse</returns>
        CommitResponse ApiV2AfcCommitPost (CommitRequest commitRequest = default(CommitRequest));

        /// <summary>
        /// Commits or un-commits a document code.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="avalara.comms.rest.v2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="commitRequest">CommitRequest object containing document code and optional field data to override in reports. (optional)</param>
        /// <returns>ApiResponse of CommitResponse</returns>
        ApiResponse<CommitResponse> ApiV2AfcCommitPostWithHttpInfo (CommitRequest commitRequest = default(CommitRequest));
        #endregion Synchronous Operations
        #region Asynchronous Operations
        /// <summary>
        /// Performs tax calculations on all invoices and line items within the request body.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="avalara.comms.rest.v2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="calcTaxesRequest">CalcTaxesRequest object containing invoices to process and data required               for performing tax calculations. (optional)</param>
        /// <returns>Task of CalcTaxesResponse</returns>
        System.Threading.Tasks.Task<CalcTaxesResponse> ApiV2AfcCalcTaxesPostAsync (CalcTaxesRequest calcTaxesRequest = default(CalcTaxesRequest));

        /// <summary>
        /// Performs tax calculations on all invoices and line items within the request body.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="avalara.comms.rest.v2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="calcTaxesRequest">CalcTaxesRequest object containing invoices to process and data required               for performing tax calculations. (optional)</param>
        /// <returns>Task of ApiResponse (CalcTaxesResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<CalcTaxesResponse>> ApiV2AfcCalcTaxesPostAsyncWithHttpInfo (CalcTaxesRequest calcTaxesRequest = default(CalcTaxesRequest));
        /// <summary>
        /// Commits or un-commits a document code.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="avalara.comms.rest.v2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="commitRequest">CommitRequest object containing document code and optional field data to override in reports. (optional)</param>
        /// <returns>Task of CommitResponse</returns>
        System.Threading.Tasks.Task<CommitResponse> ApiV2AfcCommitPostAsync (CommitRequest commitRequest = default(CommitRequest));

        /// <summary>
        /// Commits or un-commits a document code.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="avalara.comms.rest.v2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="commitRequest">CommitRequest object containing document code and optional field data to override in reports. (optional)</param>
        /// <returns>Task of ApiResponse (CommitResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<CommitResponse>> ApiV2AfcCommitPostAsyncWithHttpInfo (CommitRequest commitRequest = default(CommitRequest));
        #endregion Asynchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public partial class TaxCalculationApi : ITaxCalculationApi
    {
        private avalara.comms.rest.v2.Client.ExceptionFactory _exceptionFactory = (name, response) => null;

        /// <summary>
        /// Initializes a new instance of the <see cref="TaxCalculationApi"/> class.
        /// </summary>
        /// <returns></returns>
        public TaxCalculationApi(String basePath)
        {
            this.Configuration = new avalara.comms.rest.v2.Client.Configuration { BasePath = basePath };

            ExceptionFactory = avalara.comms.rest.v2.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="TaxCalculationApi"/> class
        /// </summary>
        /// <returns></returns>
        public TaxCalculationApi()
        {
            this.Configuration = avalara.comms.rest.v2.Client.Configuration.Default;

            ExceptionFactory = avalara.comms.rest.v2.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="TaxCalculationApi"/> class
        /// using Configuration object
        /// </summary>
        /// <param name="configuration">An instance of Configuration</param>
        /// <returns></returns>
        public TaxCalculationApi(avalara.comms.rest.v2.Client.Configuration configuration = null)
        {
            if (configuration == null) // use the default one in Configuration
                this.Configuration = avalara.comms.rest.v2.Client.Configuration.Default;
            else
                this.Configuration = configuration;

            ExceptionFactory = avalara.comms.rest.v2.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Gets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        public String GetBasePath()
        {
            return this.Configuration.ApiClient.RestClient.BaseUrl.ToString();
        }

        /// <summary>
        /// Sets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        [Obsolete("SetBasePath is deprecated, please do 'Configuration.ApiClient = new ApiClient(\"http://new-path\")' instead.")]
        public void SetBasePath(String basePath)
        {
            // do nothing
        }

        /// <summary>
        /// Gets or sets the configuration object
        /// </summary>
        /// <value>An instance of the Configuration</value>
        public avalara.comms.rest.v2.Client.Configuration Configuration {get; set;}

        /// <summary>
        /// Provides a factory method hook for the creation of exceptions.
        /// </summary>
        public avalara.comms.rest.v2.Client.ExceptionFactory ExceptionFactory
        {
            get
            {
                if (_exceptionFactory != null && _exceptionFactory.GetInvocationList().Length > 1)
                {
                    throw new InvalidOperationException("Multicast delegate for ExceptionFactory is unsupported.");
                }
                return _exceptionFactory;
            }
            set { _exceptionFactory = value; }
        }

        /// <summary>
        /// Gets the default header.
        /// </summary>
        /// <returns>Dictionary of HTTP header</returns>
        [Obsolete("DefaultHeader is deprecated, please use Configuration.DefaultHeader instead.")]
        public IDictionary<String, String> DefaultHeader()
        {
            return new ReadOnlyDictionary<string, string>(this.Configuration.DefaultHeader);
        }

        /// <summary>
        /// Add default header.
        /// </summary>
        /// <param name="key">Header field name.</param>
        /// <param name="value">Header field value.</param>
        /// <returns></returns>
        [Obsolete("AddDefaultHeader is deprecated, please use Configuration.AddDefaultHeader instead.")]
        public void AddDefaultHeader(string key, string value)
        {
            this.Configuration.AddDefaultHeader(key, value);
        }

        /// <summary>
        /// Performs tax calculations on all invoices and line items within the request body. 
        /// </summary>
        /// <exception cref="avalara.comms.rest.v2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="calcTaxesRequest">CalcTaxesRequest object containing invoices to process and data required               for performing tax calculations. (optional)</param>
        /// <returns>CalcTaxesResponse</returns>
        public CalcTaxesResponse ApiV2AfcCalcTaxesPost (CalcTaxesRequest calcTaxesRequest = default(CalcTaxesRequest))
        {
             ApiResponse<CalcTaxesResponse> localVarResponse = ApiV2AfcCalcTaxesPostWithHttpInfo(calcTaxesRequest);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Performs tax calculations on all invoices and line items within the request body. 
        /// </summary>
        /// <exception cref="avalara.comms.rest.v2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="calcTaxesRequest">CalcTaxesRequest object containing invoices to process and data required               for performing tax calculations. (optional)</param>
        /// <returns>ApiResponse of CalcTaxesResponse</returns>
        public ApiResponse<CalcTaxesResponse> ApiV2AfcCalcTaxesPostWithHttpInfo (CalcTaxesRequest calcTaxesRequest = default(CalcTaxesRequest))
        {

            var localVarPath = "/api/v2/afc/CalcTaxes";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json-patch+json", 
                "application/json", 
                "text/json", 
                "application/_*+json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "text/plain",
                "application/json",
                "text/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (calcTaxesRequest != null && calcTaxesRequest.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(calcTaxesRequest); // http body (model) parameter
            }
            else
            {
                localVarPostBody = calcTaxesRequest; // byte array
            }

            // authentication (Basic) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(this.Configuration.Username) || !String.IsNullOrEmpty(this.Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password);
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ApiV2AfcCalcTaxesPost", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<CalcTaxesResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (CalcTaxesResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(CalcTaxesResponse)));
        }

        /// <summary>
        /// Performs tax calculations on all invoices and line items within the request body. 
        /// </summary>
        /// <exception cref="avalara.comms.rest.v2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="calcTaxesRequest">CalcTaxesRequest object containing invoices to process and data required               for performing tax calculations. (optional)</param>
        /// <returns>Task of CalcTaxesResponse</returns>
        public async System.Threading.Tasks.Task<CalcTaxesResponse> ApiV2AfcCalcTaxesPostAsync (CalcTaxesRequest calcTaxesRequest = default(CalcTaxesRequest))
        {
             ApiResponse<CalcTaxesResponse> localVarResponse = await ApiV2AfcCalcTaxesPostAsyncWithHttpInfo(calcTaxesRequest);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Performs tax calculations on all invoices and line items within the request body. 
        /// </summary>
        /// <exception cref="avalara.comms.rest.v2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="calcTaxesRequest">CalcTaxesRequest object containing invoices to process and data required               for performing tax calculations. (optional)</param>
        /// <returns>Task of ApiResponse (CalcTaxesResponse)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<CalcTaxesResponse>> ApiV2AfcCalcTaxesPostAsyncWithHttpInfo (CalcTaxesRequest calcTaxesRequest = default(CalcTaxesRequest))
        {

            var localVarPath = "/api/v2/afc/CalcTaxes";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json-patch+json", 
                "application/json", 
                "text/json", 
                "application/_*+json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "text/plain",
                "application/json",
                "text/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (calcTaxesRequest != null && calcTaxesRequest.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(calcTaxesRequest); // http body (model) parameter
            }
            else
            {
                localVarPostBody = calcTaxesRequest; // byte array
            }

            // authentication (Basic) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(this.Configuration.Username) || !String.IsNullOrEmpty(this.Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password);
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ApiV2AfcCalcTaxesPost", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<CalcTaxesResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (CalcTaxesResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(CalcTaxesResponse)));
        }

        /// <summary>
        /// Commits or un-commits a document code. 
        /// </summary>
        /// <exception cref="avalara.comms.rest.v2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="commitRequest">CommitRequest object containing document code and optional field data to override in reports. (optional)</param>
        /// <returns>CommitResponse</returns>
        public CommitResponse ApiV2AfcCommitPost (CommitRequest commitRequest = default(CommitRequest))
        {
             ApiResponse<CommitResponse> localVarResponse = ApiV2AfcCommitPostWithHttpInfo(commitRequest);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Commits or un-commits a document code. 
        /// </summary>
        /// <exception cref="avalara.comms.rest.v2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="commitRequest">CommitRequest object containing document code and optional field data to override in reports. (optional)</param>
        /// <returns>ApiResponse of CommitResponse</returns>
        public ApiResponse<CommitResponse> ApiV2AfcCommitPostWithHttpInfo (CommitRequest commitRequest = default(CommitRequest))
        {

            var localVarPath = "/api/v2/afc/Commit";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json-patch+json", 
                "application/json", 
                "text/json", 
                "application/_*+json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "text/plain",
                "application/json",
                "text/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (commitRequest != null && commitRequest.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(commitRequest); // http body (model) parameter
            }
            else
            {
                localVarPostBody = commitRequest; // byte array
            }

            // authentication (Basic) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(this.Configuration.Username) || !String.IsNullOrEmpty(this.Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password);
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ApiV2AfcCommitPost", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<CommitResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (CommitResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(CommitResponse)));
        }

        /// <summary>
        /// Commits or un-commits a document code. 
        /// </summary>
        /// <exception cref="avalara.comms.rest.v2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="commitRequest">CommitRequest object containing document code and optional field data to override in reports. (optional)</param>
        /// <returns>Task of CommitResponse</returns>
        public async System.Threading.Tasks.Task<CommitResponse> ApiV2AfcCommitPostAsync (CommitRequest commitRequest = default(CommitRequest))
        {
             ApiResponse<CommitResponse> localVarResponse = await ApiV2AfcCommitPostAsyncWithHttpInfo(commitRequest);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Commits or un-commits a document code. 
        /// </summary>
        /// <exception cref="avalara.comms.rest.v2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="commitRequest">CommitRequest object containing document code and optional field data to override in reports. (optional)</param>
        /// <returns>Task of ApiResponse (CommitResponse)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<CommitResponse>> ApiV2AfcCommitPostAsyncWithHttpInfo (CommitRequest commitRequest = default(CommitRequest))
        {

            var localVarPath = "/api/v2/afc/Commit";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json-patch+json", 
                "application/json", 
                "text/json", 
                "application/_*+json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "text/plain",
                "application/json",
                "text/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (commitRequest != null && commitRequest.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(commitRequest); // http body (model) parameter
            }
            else
            {
                localVarPostBody = commitRequest; // byte array
            }

            // authentication (Basic) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(this.Configuration.Username) || !String.IsNullOrEmpty(this.Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password);
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ApiV2AfcCommitPost", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<CommitResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (CommitResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(CommitResponse)));
        }

    }
}
