/* 
 * SaasPro
 *
 * APIs to interface with communications tax engine.<br />The API requires Basic authentication.<br />Users with access to multiple clients must also set request header parameter for <code>client_id</code>.<br />Set <code>client_profile_id</code> to specify profile to be used for taxation.
 *
 * The version of the OpenAPI document: v2
 * 
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = avalara.comms.rest.v2.Client.OpenAPIDateConverter;

namespace avalara.comms.rest.v2.Model
{
    /// <summary>
    /// TSPairData
    /// </summary>
    [DataContract]
    public partial class TSPairData :  IEquatable<TSPairData>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="TSPairData" /> class.
        /// </summary>
        /// <param name="transactionType">transactionType.</param>
        /// <param name="serviceType">serviceType.</param>
        /// <param name="marketType">marketType.</param>
        /// <param name="interfaceType">interfaceType.</param>
        /// <param name="inputType">inputType.</param>
        /// <param name="isBundle">isBundle.</param>
        /// <param name="transactionDescription">transactionDescription.</param>
        /// <param name="serviceDescription">serviceDescription.</param>
        /// <param name="tSPairDescription">tSPairDescription.</param>
        public TSPairData(int transactionType = default(int), int serviceType = default(int), int marketType = default(int), int interfaceType = default(int), int inputType = default(int), bool isBundle = default(bool), string transactionDescription = default(string), string serviceDescription = default(string), string tSPairDescription = default(string))
        {
            this.TransactionDescription = transactionDescription;
            this.ServiceDescription = serviceDescription;
            this.TSPairDescription = tSPairDescription;
            this.TransactionType = transactionType;
            this.ServiceType = serviceType;
            this.MarketType = marketType;
            this.InterfaceType = interfaceType;
            this.InputType = inputType;
            this.IsBundle = isBundle;
            this.TransactionDescription = transactionDescription;
            this.ServiceDescription = serviceDescription;
            this.TSPairDescription = tSPairDescription;
        }
        
        /// <summary>
        /// Gets or Sets TransactionType
        /// </summary>
        [DataMember(Name="TransactionType", EmitDefaultValue=false)]
        public int TransactionType { get; set; }

        /// <summary>
        /// Gets or Sets ServiceType
        /// </summary>
        [DataMember(Name="ServiceType", EmitDefaultValue=false)]
        public int ServiceType { get; set; }

        /// <summary>
        /// Gets or Sets MarketType
        /// </summary>
        [DataMember(Name="MarketType", EmitDefaultValue=false)]
        public int MarketType { get; set; }

        /// <summary>
        /// Gets or Sets InterfaceType
        /// </summary>
        [DataMember(Name="InterfaceType", EmitDefaultValue=false)]
        public int InterfaceType { get; set; }

        /// <summary>
        /// Gets or Sets InputType
        /// </summary>
        [DataMember(Name="InputType", EmitDefaultValue=false)]
        public int InputType { get; set; }

        /// <summary>
        /// Gets or Sets IsBundle
        /// </summary>
        [DataMember(Name="IsBundle", EmitDefaultValue=false)]
        public bool IsBundle { get; set; }

        /// <summary>
        /// Gets or Sets TransactionDescription
        /// </summary>
        [DataMember(Name="TransactionDescription", EmitDefaultValue=true)]
        public string TransactionDescription { get; set; }

        /// <summary>
        /// Gets or Sets ServiceDescription
        /// </summary>
        [DataMember(Name="ServiceDescription", EmitDefaultValue=true)]
        public string ServiceDescription { get; set; }

        /// <summary>
        /// Gets or Sets TSPairDescription
        /// </summary>
        [DataMember(Name="TSPairDescription", EmitDefaultValue=true)]
        public string TSPairDescription { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class TSPairData {\n");
            sb.Append("  TransactionType: ").Append(TransactionType).Append("\n");
            sb.Append("  ServiceType: ").Append(ServiceType).Append("\n");
            sb.Append("  MarketType: ").Append(MarketType).Append("\n");
            sb.Append("  InterfaceType: ").Append(InterfaceType).Append("\n");
            sb.Append("  InputType: ").Append(InputType).Append("\n");
            sb.Append("  IsBundle: ").Append(IsBundle).Append("\n");
            sb.Append("  TransactionDescription: ").Append(TransactionDescription).Append("\n");
            sb.Append("  ServiceDescription: ").Append(ServiceDescription).Append("\n");
            sb.Append("  TSPairDescription: ").Append(TSPairDescription).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as TSPairData);
        }

        /// <summary>
        /// Returns true if TSPairData instances are equal
        /// </summary>
        /// <param name="input">Instance of TSPairData to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(TSPairData input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.TransactionType == input.TransactionType ||
                    (this.TransactionType != null &&
                    this.TransactionType.Equals(input.TransactionType))
                ) && 
                (
                    this.ServiceType == input.ServiceType ||
                    (this.ServiceType != null &&
                    this.ServiceType.Equals(input.ServiceType))
                ) && 
                (
                    this.MarketType == input.MarketType ||
                    (this.MarketType != null &&
                    this.MarketType.Equals(input.MarketType))
                ) && 
                (
                    this.InterfaceType == input.InterfaceType ||
                    (this.InterfaceType != null &&
                    this.InterfaceType.Equals(input.InterfaceType))
                ) && 
                (
                    this.InputType == input.InputType ||
                    (this.InputType != null &&
                    this.InputType.Equals(input.InputType))
                ) && 
                (
                    this.IsBundle == input.IsBundle ||
                    (this.IsBundle != null &&
                    this.IsBundle.Equals(input.IsBundle))
                ) && 
                (
                    this.TransactionDescription == input.TransactionDescription ||
                    (this.TransactionDescription != null &&
                    this.TransactionDescription.Equals(input.TransactionDescription))
                ) && 
                (
                    this.ServiceDescription == input.ServiceDescription ||
                    (this.ServiceDescription != null &&
                    this.ServiceDescription.Equals(input.ServiceDescription))
                ) && 
                (
                    this.TSPairDescription == input.TSPairDescription ||
                    (this.TSPairDescription != null &&
                    this.TSPairDescription.Equals(input.TSPairDescription))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.TransactionType != null)
                    hashCode = hashCode * 59 + this.TransactionType.GetHashCode();
                if (this.ServiceType != null)
                    hashCode = hashCode * 59 + this.ServiceType.GetHashCode();
                if (this.MarketType != null)
                    hashCode = hashCode * 59 + this.MarketType.GetHashCode();
                if (this.InterfaceType != null)
                    hashCode = hashCode * 59 + this.InterfaceType.GetHashCode();
                if (this.InputType != null)
                    hashCode = hashCode * 59 + this.InputType.GetHashCode();
                if (this.IsBundle != null)
                    hashCode = hashCode * 59 + this.IsBundle.GetHashCode();
                if (this.TransactionDescription != null)
                    hashCode = hashCode * 59 + this.TransactionDescription.GetHashCode();
                if (this.ServiceDescription != null)
                    hashCode = hashCode * 59 + this.ServiceDescription.GetHashCode();
                if (this.TSPairDescription != null)
                    hashCode = hashCode * 59 + this.TSPairDescription.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
