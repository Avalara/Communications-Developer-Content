/* 
 * SaasPro
 *
 * APIs to interface with communications tax engine.<br />The API requires Basic authentication.<br />Users with access to multiple clients must also set request header parameter for <code>client_id</code>.<br />Set <code>client_profile_id</code> to specify profile to be used for taxation.
 *
 * The version of the OpenAPI document: v2
 * 
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = avalara.comms.rest.v2.Client.OpenAPIDateConverter;

namespace avalara.comms.rest.v2.Model
{
    /// <summary>
    /// Tax rate override information.
    /// </summary>
    [DataContract]
    public partial class ReportingInformation :  IEquatable<ReportingInformation>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="ReportingInformation" /> class.
        /// </summary>
        /// <param name="acct">acct.</param>
        /// <param name="custref">custref.</param>
        /// <param name="invn">invn.</param>
        /// <param name="bcyc">bcyc.</param>
        /// <param name="ccycd">ccycd.</param>
        /// <param name="ccydesc">ccydesc.</param>
        public ReportingInformation(string acct = default(string), string custref = default(string), string invn = default(string), string bcyc = default(string), string ccycd = default(string), string ccydesc = default(string))
        {
            this.Acct = acct;
            this.Custref = custref;
            this.Invn = invn;
            this.Bcyc = bcyc;
            this.Ccycd = ccycd;
            this.Ccydesc = ccydesc;
            this.Acct = acct;
            this.Custref = custref;
            this.Invn = invn;
            this.Bcyc = bcyc;
            this.Ccycd = ccycd;
            this.Ccydesc = ccydesc;
        }
        
        /// <summary>
        /// Gets or Sets Acct
        /// </summary>
        [DataMember(Name="acct", EmitDefaultValue=true)]
        public string Acct { get; set; }

        /// <summary>
        /// Gets or Sets Custref
        /// </summary>
        [DataMember(Name="custref", EmitDefaultValue=true)]
        public string Custref { get; set; }

        /// <summary>
        /// Gets or Sets Invn
        /// </summary>
        [DataMember(Name="invn", EmitDefaultValue=true)]
        public string Invn { get; set; }

        /// <summary>
        /// Gets or Sets Bcyc
        /// </summary>
        [DataMember(Name="bcyc", EmitDefaultValue=true)]
        public string Bcyc { get; set; }

        /// <summary>
        /// Gets or Sets Ccycd
        /// </summary>
        [DataMember(Name="ccycd", EmitDefaultValue=true)]
        public string Ccycd { get; set; }

        /// <summary>
        /// Gets or Sets Ccydesc
        /// </summary>
        [DataMember(Name="ccydesc", EmitDefaultValue=true)]
        public string Ccydesc { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class ReportingInformation {\n");
            sb.Append("  Acct: ").Append(Acct).Append("\n");
            sb.Append("  Custref: ").Append(Custref).Append("\n");
            sb.Append("  Invn: ").Append(Invn).Append("\n");
            sb.Append("  Bcyc: ").Append(Bcyc).Append("\n");
            sb.Append("  Ccycd: ").Append(Ccycd).Append("\n");
            sb.Append("  Ccydesc: ").Append(Ccydesc).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as ReportingInformation);
        }

        /// <summary>
        /// Returns true if ReportingInformation instances are equal
        /// </summary>
        /// <param name="input">Instance of ReportingInformation to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(ReportingInformation input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.Acct == input.Acct ||
                    (this.Acct != null &&
                    this.Acct.Equals(input.Acct))
                ) && 
                (
                    this.Custref == input.Custref ||
                    (this.Custref != null &&
                    this.Custref.Equals(input.Custref))
                ) && 
                (
                    this.Invn == input.Invn ||
                    (this.Invn != null &&
                    this.Invn.Equals(input.Invn))
                ) && 
                (
                    this.Bcyc == input.Bcyc ||
                    (this.Bcyc != null &&
                    this.Bcyc.Equals(input.Bcyc))
                ) && 
                (
                    this.Ccycd == input.Ccycd ||
                    (this.Ccycd != null &&
                    this.Ccycd.Equals(input.Ccycd))
                ) && 
                (
                    this.Ccydesc == input.Ccydesc ||
                    (this.Ccydesc != null &&
                    this.Ccydesc.Equals(input.Ccydesc))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.Acct != null)
                    hashCode = hashCode * 59 + this.Acct.GetHashCode();
                if (this.Custref != null)
                    hashCode = hashCode * 59 + this.Custref.GetHashCode();
                if (this.Invn != null)
                    hashCode = hashCode * 59 + this.Invn.GetHashCode();
                if (this.Bcyc != null)
                    hashCode = hashCode * 59 + this.Bcyc.GetHashCode();
                if (this.Ccycd != null)
                    hashCode = hashCode * 59 + this.Ccycd.GetHashCode();
                if (this.Ccydesc != null)
                    hashCode = hashCode * 59 + this.Ccydesc.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
