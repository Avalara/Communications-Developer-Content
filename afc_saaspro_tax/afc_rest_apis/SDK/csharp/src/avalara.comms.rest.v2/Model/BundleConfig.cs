/* 
 * SaasPro
 *
 * APIs to interface with communications tax engine.<br />The API requires Basic authentication.<br />Users with access to multiple clients must also set request header parameter for <code>client_id</code>.<br />Set <code>client_profile_id</code> to specify profile to be used for taxation.
 *
 * The version of the OpenAPI document: v2
 * 
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = avalara.comms.rest.v2.Client.OpenAPIDateConverter;

namespace avalara.comms.rest.v2.Model
{
    /// <summary>
    /// Bundles associated with a client profile configuration  Maybe associated with 0 to many profiles
    /// </summary>
    [DataContract]
    public partial class BundleConfig :  IEquatable<BundleConfig>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="BundleConfig" /> class.
        /// </summary>
        /// <param name="bundlePackage">Bundle Package - example:  20000.</param>
        /// <param name="bundleId">Bundle Id - example:  20001.</param>
        /// <param name="description">Bundle Description.</param>
        /// <param name="bundleItems">Bundled items - percentage should add up to 100% (as applicable).</param>
        /// <param name="version">Version for bundle - intended to allow changes to format   without having to perform expensive SQL updates on existing bundles.</param>
        public BundleConfig(int bundlePackage = default(int), int bundleId = default(int), string description = default(string), List<BundleItem> bundleItems = default(List<BundleItem>), string version = default(string))
        {
            this.Description = description;
            this.BundleItems = bundleItems;
            this.Version = version;
            this.BundlePackage = bundlePackage;
            this.BundleId = bundleId;
            this.Description = description;
            this.BundleItems = bundleItems;
            this.Version = version;
        }
        
        /// <summary>
        /// Bundle Package - example:  20000
        /// </summary>
        /// <value>Bundle Package - example:  20000</value>
        [DataMember(Name="BundlePackage", EmitDefaultValue=false)]
        public int BundlePackage { get; set; }

        /// <summary>
        /// Bundle Id - example:  20001
        /// </summary>
        /// <value>Bundle Id - example:  20001</value>
        [DataMember(Name="BundleId", EmitDefaultValue=false)]
        public int BundleId { get; set; }

        /// <summary>
        /// Bundle Description
        /// </summary>
        /// <value>Bundle Description</value>
        [DataMember(Name="Description", EmitDefaultValue=true)]
        public string Description { get; set; }

        /// <summary>
        /// Bundled items - percentage should add up to 100% (as applicable)
        /// </summary>
        /// <value>Bundled items - percentage should add up to 100% (as applicable)</value>
        [DataMember(Name="BundleItems", EmitDefaultValue=true)]
        public List<BundleItem> BundleItems { get; set; }

        /// <summary>
        /// Version for bundle - intended to allow changes to format   without having to perform expensive SQL updates on existing bundles
        /// </summary>
        /// <value>Version for bundle - intended to allow changes to format   without having to perform expensive SQL updates on existing bundles</value>
        [DataMember(Name="Version", EmitDefaultValue=true)]
        public string Version { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class BundleConfig {\n");
            sb.Append("  BundlePackage: ").Append(BundlePackage).Append("\n");
            sb.Append("  BundleId: ").Append(BundleId).Append("\n");
            sb.Append("  Description: ").Append(Description).Append("\n");
            sb.Append("  BundleItems: ").Append(BundleItems).Append("\n");
            sb.Append("  Version: ").Append(Version).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as BundleConfig);
        }

        /// <summary>
        /// Returns true if BundleConfig instances are equal
        /// </summary>
        /// <param name="input">Instance of BundleConfig to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(BundleConfig input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.BundlePackage == input.BundlePackage ||
                    (this.BundlePackage != null &&
                    this.BundlePackage.Equals(input.BundlePackage))
                ) && 
                (
                    this.BundleId == input.BundleId ||
                    (this.BundleId != null &&
                    this.BundleId.Equals(input.BundleId))
                ) && 
                (
                    this.Description == input.Description ||
                    (this.Description != null &&
                    this.Description.Equals(input.Description))
                ) && 
                (
                    this.BundleItems == input.BundleItems ||
                    this.BundleItems != null &&
                    input.BundleItems != null &&
                    this.BundleItems.SequenceEqual(input.BundleItems)
                ) && 
                (
                    this.Version == input.Version ||
                    (this.Version != null &&
                    this.Version.Equals(input.Version))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.BundlePackage != null)
                    hashCode = hashCode * 59 + this.BundlePackage.GetHashCode();
                if (this.BundleId != null)
                    hashCode = hashCode * 59 + this.BundleId.GetHashCode();
                if (this.Description != null)
                    hashCode = hashCode * 59 + this.Description.GetHashCode();
                if (this.BundleItems != null)
                    hashCode = hashCode * 59 + this.BundleItems.GetHashCode();
                if (this.Version != null)
                    hashCode = hashCode * 59 + this.Version.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
