/* 
 * SaasPro
 *
 * APIs to interface with communications tax engine.<br />The API requires Basic authentication.<br />Users with access to multiple clients must also set request header parameter for <code>client_id</code>.<br />Set <code>client_profile_id</code> to specify profile to be used for taxation.
 *
 * The version of the OpenAPI document: v2
 * 
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = avalara.comms.rest.v2.Client.OpenAPIDateConverter;

namespace avalara.comms.rest.v2.Model
{
    /// <summary>
    /// Bundled items associated with a bundle package
    /// </summary>
    [DataContract]
    public partial class BundleItem :  IEquatable<BundleItem>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="BundleItem" /> class.
        /// </summary>
        /// <param name="transactionId">Transaction id for item.</param>
        /// <param name="serviceId">Service id for item.</param>
        /// <param name="percentage">Percentage of package charge to be applied to item.</param>
        /// <param name="fixedAmount">Fixed charge to be applied to item.</param>
        /// <param name="lines">Fixed lines to be applied to item.</param>
        /// <param name="minutes">Fixed minutes to be applied to item.</param>
        /// <param name="transactionDesc">Transaction id for item.</param>
        /// <param name="serviceDesc">Service id for item.</param>
        public BundleItem(int transactionId = default(int), int serviceId = default(int), double? percentage = default(double?), double? fixedAmount = default(double?), int? lines = default(int?), double? minutes = default(double?), string transactionDesc = default(string), string serviceDesc = default(string))
        {
            this.Percentage = percentage;
            this.FixedAmount = fixedAmount;
            this.Lines = lines;
            this.Minutes = minutes;
            this.TransactionDesc = transactionDesc;
            this.ServiceDesc = serviceDesc;
            this.TransactionId = transactionId;
            this.ServiceId = serviceId;
            this.Percentage = percentage;
            this.FixedAmount = fixedAmount;
            this.Lines = lines;
            this.Minutes = minutes;
            this.TransactionDesc = transactionDesc;
            this.ServiceDesc = serviceDesc;
        }
        
        /// <summary>
        /// Transaction id for item
        /// </summary>
        /// <value>Transaction id for item</value>
        [DataMember(Name="TransactionId", EmitDefaultValue=false)]
        public int TransactionId { get; set; }

        /// <summary>
        /// Service id for item
        /// </summary>
        /// <value>Service id for item</value>
        [DataMember(Name="ServiceId", EmitDefaultValue=false)]
        public int ServiceId { get; set; }

        /// <summary>
        /// Percentage of package charge to be applied to item
        /// </summary>
        /// <value>Percentage of package charge to be applied to item</value>
        [DataMember(Name="Percentage", EmitDefaultValue=true)]
        public double? Percentage { get; set; }

        /// <summary>
        /// Fixed charge to be applied to item
        /// </summary>
        /// <value>Fixed charge to be applied to item</value>
        [DataMember(Name="FixedAmount", EmitDefaultValue=true)]
        public double? FixedAmount { get; set; }

        /// <summary>
        /// Fixed lines to be applied to item
        /// </summary>
        /// <value>Fixed lines to be applied to item</value>
        [DataMember(Name="Lines", EmitDefaultValue=true)]
        public int? Lines { get; set; }

        /// <summary>
        /// Fixed minutes to be applied to item
        /// </summary>
        /// <value>Fixed minutes to be applied to item</value>
        [DataMember(Name="Minutes", EmitDefaultValue=true)]
        public double? Minutes { get; set; }

        /// <summary>
        /// Transaction id for item
        /// </summary>
        /// <value>Transaction id for item</value>
        [DataMember(Name="TransactionDesc", EmitDefaultValue=true)]
        public string TransactionDesc { get; set; }

        /// <summary>
        /// Service id for item
        /// </summary>
        /// <value>Service id for item</value>
        [DataMember(Name="ServiceDesc", EmitDefaultValue=true)]
        public string ServiceDesc { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class BundleItem {\n");
            sb.Append("  TransactionId: ").Append(TransactionId).Append("\n");
            sb.Append("  ServiceId: ").Append(ServiceId).Append("\n");
            sb.Append("  Percentage: ").Append(Percentage).Append("\n");
            sb.Append("  FixedAmount: ").Append(FixedAmount).Append("\n");
            sb.Append("  Lines: ").Append(Lines).Append("\n");
            sb.Append("  Minutes: ").Append(Minutes).Append("\n");
            sb.Append("  TransactionDesc: ").Append(TransactionDesc).Append("\n");
            sb.Append("  ServiceDesc: ").Append(ServiceDesc).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as BundleItem);
        }

        /// <summary>
        /// Returns true if BundleItem instances are equal
        /// </summary>
        /// <param name="input">Instance of BundleItem to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(BundleItem input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.TransactionId == input.TransactionId ||
                    (this.TransactionId != null &&
                    this.TransactionId.Equals(input.TransactionId))
                ) && 
                (
                    this.ServiceId == input.ServiceId ||
                    (this.ServiceId != null &&
                    this.ServiceId.Equals(input.ServiceId))
                ) && 
                (
                    this.Percentage == input.Percentage ||
                    (this.Percentage != null &&
                    this.Percentage.Equals(input.Percentage))
                ) && 
                (
                    this.FixedAmount == input.FixedAmount ||
                    (this.FixedAmount != null &&
                    this.FixedAmount.Equals(input.FixedAmount))
                ) && 
                (
                    this.Lines == input.Lines ||
                    (this.Lines != null &&
                    this.Lines.Equals(input.Lines))
                ) && 
                (
                    this.Minutes == input.Minutes ||
                    (this.Minutes != null &&
                    this.Minutes.Equals(input.Minutes))
                ) && 
                (
                    this.TransactionDesc == input.TransactionDesc ||
                    (this.TransactionDesc != null &&
                    this.TransactionDesc.Equals(input.TransactionDesc))
                ) && 
                (
                    this.ServiceDesc == input.ServiceDesc ||
                    (this.ServiceDesc != null &&
                    this.ServiceDesc.Equals(input.ServiceDesc))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.TransactionId != null)
                    hashCode = hashCode * 59 + this.TransactionId.GetHashCode();
                if (this.ServiceId != null)
                    hashCode = hashCode * 59 + this.ServiceId.GetHashCode();
                if (this.Percentage != null)
                    hashCode = hashCode * 59 + this.Percentage.GetHashCode();
                if (this.FixedAmount != null)
                    hashCode = hashCode * 59 + this.FixedAmount.GetHashCode();
                if (this.Lines != null)
                    hashCode = hashCode * 59 + this.Lines.GetHashCode();
                if (this.Minutes != null)
                    hashCode = hashCode * 59 + this.Minutes.GetHashCode();
                if (this.TransactionDesc != null)
                    hashCode = hashCode * 59 + this.TransactionDesc.GetHashCode();
                if (this.ServiceDesc != null)
                    hashCode = hashCode * 59 + this.ServiceDesc.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
