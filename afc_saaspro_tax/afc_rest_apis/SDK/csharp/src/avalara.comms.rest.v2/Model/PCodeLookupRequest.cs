/* 
 * SaasPro
 *
 * APIs to interface with communications tax engine.<br />The API requires Basic authentication.<br />Users with access to multiple clients must also set request header parameter for <code>client_id</code>.<br />Set <code>client_profile_id</code> to specify profile to be used for taxation.
 *
 * The version of the OpenAPI document: v2
 * 
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = avalara.comms.rest.v2.Client.OpenAPIDateConverter;

namespace avalara.comms.rest.v2.Model
{
    /// <summary>
    /// PCodeLookupRequest
    /// </summary>
    [DataContract]
    public partial class PCodeLookupRequest :  IEquatable<PCodeLookupRequest>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="PCodeLookupRequest" /> class.
        /// </summary>
        /// <param name="countryIso">countryIso.</param>
        /// <param name="state">state.</param>
        /// <param name="county">county.</param>
        /// <param name="city">city.</param>
        /// <param name="zipCode">zipCode.</param>
        /// <param name="bestMatch">bestMatch.</param>
        /// <param name="limitResults">limitResults.</param>
        /// <param name="npaNxx">npaNxx.</param>
        /// <param name="fips">fips.</param>
        public PCodeLookupRequest(string countryIso = default(string), string state = default(string), string county = default(string), string city = default(string), string zipCode = default(string), bool? bestMatch = default(bool?), int? limitResults = default(int?), string npaNxx = default(string), string fips = default(string))
        {
            this.CountryIso = countryIso;
            this.State = state;
            this.County = county;
            this.City = city;
            this.ZipCode = zipCode;
            this.BestMatch = bestMatch;
            this.LimitResults = limitResults;
            this.NpaNxx = npaNxx;
            this.Fips = fips;
            this.CountryIso = countryIso;
            this.State = state;
            this.County = county;
            this.City = city;
            this.ZipCode = zipCode;
            this.BestMatch = bestMatch;
            this.LimitResults = limitResults;
            this.NpaNxx = npaNxx;
            this.Fips = fips;
        }
        
        /// <summary>
        /// Gets or Sets CountryIso
        /// </summary>
        [DataMember(Name="CountryIso", EmitDefaultValue=true)]
        public string CountryIso { get; set; }

        /// <summary>
        /// Gets or Sets State
        /// </summary>
        [DataMember(Name="State", EmitDefaultValue=true)]
        public string State { get; set; }

        /// <summary>
        /// Gets or Sets County
        /// </summary>
        [DataMember(Name="County", EmitDefaultValue=true)]
        public string County { get; set; }

        /// <summary>
        /// Gets or Sets City
        /// </summary>
        [DataMember(Name="City", EmitDefaultValue=true)]
        public string City { get; set; }

        /// <summary>
        /// Gets or Sets ZipCode
        /// </summary>
        [DataMember(Name="ZipCode", EmitDefaultValue=true)]
        public string ZipCode { get; set; }

        /// <summary>
        /// Gets or Sets BestMatch
        /// </summary>
        [DataMember(Name="BestMatch", EmitDefaultValue=true)]
        public bool? BestMatch { get; set; }

        /// <summary>
        /// Gets or Sets LimitResults
        /// </summary>
        [DataMember(Name="LimitResults", EmitDefaultValue=true)]
        public int? LimitResults { get; set; }

        /// <summary>
        /// Gets or Sets NpaNxx
        /// </summary>
        [DataMember(Name="NpaNxx", EmitDefaultValue=true)]
        public string NpaNxx { get; set; }

        /// <summary>
        /// Gets or Sets Fips
        /// </summary>
        [DataMember(Name="Fips", EmitDefaultValue=true)]
        public string Fips { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class PCodeLookupRequest {\n");
            sb.Append("  CountryIso: ").Append(CountryIso).Append("\n");
            sb.Append("  State: ").Append(State).Append("\n");
            sb.Append("  County: ").Append(County).Append("\n");
            sb.Append("  City: ").Append(City).Append("\n");
            sb.Append("  ZipCode: ").Append(ZipCode).Append("\n");
            sb.Append("  BestMatch: ").Append(BestMatch).Append("\n");
            sb.Append("  LimitResults: ").Append(LimitResults).Append("\n");
            sb.Append("  NpaNxx: ").Append(NpaNxx).Append("\n");
            sb.Append("  Fips: ").Append(Fips).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as PCodeLookupRequest);
        }

        /// <summary>
        /// Returns true if PCodeLookupRequest instances are equal
        /// </summary>
        /// <param name="input">Instance of PCodeLookupRequest to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(PCodeLookupRequest input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.CountryIso == input.CountryIso ||
                    (this.CountryIso != null &&
                    this.CountryIso.Equals(input.CountryIso))
                ) && 
                (
                    this.State == input.State ||
                    (this.State != null &&
                    this.State.Equals(input.State))
                ) && 
                (
                    this.County == input.County ||
                    (this.County != null &&
                    this.County.Equals(input.County))
                ) && 
                (
                    this.City == input.City ||
                    (this.City != null &&
                    this.City.Equals(input.City))
                ) && 
                (
                    this.ZipCode == input.ZipCode ||
                    (this.ZipCode != null &&
                    this.ZipCode.Equals(input.ZipCode))
                ) && 
                (
                    this.BestMatch == input.BestMatch ||
                    (this.BestMatch != null &&
                    this.BestMatch.Equals(input.BestMatch))
                ) && 
                (
                    this.LimitResults == input.LimitResults ||
                    (this.LimitResults != null &&
                    this.LimitResults.Equals(input.LimitResults))
                ) && 
                (
                    this.NpaNxx == input.NpaNxx ||
                    (this.NpaNxx != null &&
                    this.NpaNxx.Equals(input.NpaNxx))
                ) && 
                (
                    this.Fips == input.Fips ||
                    (this.Fips != null &&
                    this.Fips.Equals(input.Fips))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.CountryIso != null)
                    hashCode = hashCode * 59 + this.CountryIso.GetHashCode();
                if (this.State != null)
                    hashCode = hashCode * 59 + this.State.GetHashCode();
                if (this.County != null)
                    hashCode = hashCode * 59 + this.County.GetHashCode();
                if (this.City != null)
                    hashCode = hashCode * 59 + this.City.GetHashCode();
                if (this.ZipCode != null)
                    hashCode = hashCode * 59 + this.ZipCode.GetHashCode();
                if (this.BestMatch != null)
                    hashCode = hashCode * 59 + this.BestMatch.GetHashCode();
                if (this.LimitResults != null)
                    hashCode = hashCode * 59 + this.LimitResults.GetHashCode();
                if (this.NpaNxx != null)
                    hashCode = hashCode * 59 + this.NpaNxx.GetHashCode();
                if (this.Fips != null)
                    hashCode = hashCode * 59 + this.Fips.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
