/* 
 * SaasPro
 *
 * APIs to interface with communications tax engine.<br />The API requires Basic authentication.<br />Users with access to multiple clients must also set request header parameter for <code>client_id</code>.<br />Set <code>client_profile_id</code> to specify profile to be used for taxation.<br /><br />Effective January 1st, 2022 all Avalara products will be enforcing TLS 1.2 server-side. Please ensure that your implementation sets a minimal of TLS 1.2 encryption when making web requests to Avalara APIs.
 *
 * The version of the OpenAPI document: v2
 * 
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.Net;
using System.Net.Mime;
using avalara.comms.rest.v2.Client;
using avalara.comms.rest.v2.Model;

namespace avalara.comms.rest.v2.Api
{

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface ILookupsApiSync : IApiAccessor
    {
        #region Synchronous Operations
        /// <summary>
        /// Get location data associated with a PCode
        /// </summary>
        /// <remarks>
        /// Request will return all jurisdictions associated with the PCode
        /// </remarks>
        /// <exception cref="avalara.comms.rest.v2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="pCode"></param>
        /// <returns>PCodeLookupResult</returns>
        PCodeLookupResult ApiV2AfcLocationPCodeGet (int pCode);

        /// <summary>
        /// Get location data associated with a PCode
        /// </summary>
        /// <remarks>
        /// Request will return all jurisdictions associated with the PCode
        /// </remarks>
        /// <exception cref="avalara.comms.rest.v2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="pCode"></param>
        /// <returns>ApiResponse of PCodeLookupResult</returns>
        ApiResponse<PCodeLookupResult> ApiV2AfcLocationPCodeGetWithHttpInfo (int pCode);
        /// <summary>
        /// Get primary location data associated with a PCode
        /// </summary>
        /// <remarks>
        /// Request will return primary jurisdiction associated with the PCode
        /// </remarks>
        /// <exception cref="avalara.comms.rest.v2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="pCode"></param>
        /// <returns>PCodeLookupResult</returns>
        PCodeLookupResult ApiV2AfcPrimaryPCodeGet (int pCode);

        /// <summary>
        /// Get primary location data associated with a PCode
        /// </summary>
        /// <remarks>
        /// Request will return primary jurisdiction associated with the PCode
        /// </remarks>
        /// <exception cref="avalara.comms.rest.v2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="pCode"></param>
        /// <returns>ApiResponse of PCodeLookupResult</returns>
        ApiResponse<PCodeLookupResult> ApiV2AfcPrimaryPCodeGetWithHttpInfo (int pCode);
        /// <summary>
        /// Retrieves server time, service build version and engine version
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="avalara.comms.rest.v2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>ServiceInfo</returns>
        ServiceInfo ApiV2AfcServiceinfoGet ();

        /// <summary>
        /// Retrieves server time, service build version and engine version
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="avalara.comms.rest.v2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>ApiResponse of ServiceInfo</returns>
        ApiResponse<ServiceInfo> ApiV2AfcServiceinfoGetWithHttpInfo ();
        /// <summary>
        /// Get the tax information (description and category) for a tax type ID
        /// </summary>
        /// <remarks>
        /// This method returns the description for the specified tax type ID. If tax type * is supplied it will return all tax types.
        /// </remarks>
        /// <exception cref="avalara.comms.rest.v2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="taxType">Tax type ID for the tax type.</param>
        /// <returns>List&lt;TaxTypeData&gt;</returns>
        List<TaxTypeData> ApiV2AfcTaxtypeTaxTypeGet (string taxType);

        /// <summary>
        /// Get the tax information (description and category) for a tax type ID
        /// </summary>
        /// <remarks>
        /// This method returns the description for the specified tax type ID. If tax type * is supplied it will return all tax types.
        /// </remarks>
        /// <exception cref="avalara.comms.rest.v2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="taxType">Tax type ID for the tax type.</param>
        /// <returns>ApiResponse of List&lt;TaxTypeData&gt;</returns>
        ApiResponse<List<TaxTypeData>> ApiV2AfcTaxtypeTaxTypeGetWithHttpInfo (string taxType);
        /// <summary>
        /// Get transaction/service pair information
        /// </summary>
        /// <remarks>
        /// This method returns the description for the transaction type, service type and the ts pairs.
        /// </remarks>
        /// <exception cref="avalara.comms.rest.v2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>List&lt;TsPairData&gt;</returns>
        List<TsPairData> ApiV2AfcTspairsGet ();

        /// <summary>
        /// Get transaction/service pair information
        /// </summary>
        /// <remarks>
        /// This method returns the description for the transaction type, service type and the ts pairs.
        /// </remarks>
        /// <exception cref="avalara.comms.rest.v2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>ApiResponse of List&lt;TsPairData&gt;</returns>
        ApiResponse<List<TsPairData>> ApiV2AfcTspairsGetWithHttpInfo ();
        #endregion Synchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface ILookupsApiAsync : IApiAccessor
    {
        #region Asynchronous Operations
        /// <summary>
        /// Get location data associated with a PCode
        /// </summary>
        /// <remarks>
        /// Request will return all jurisdictions associated with the PCode
        /// </remarks>
        /// <exception cref="avalara.comms.rest.v2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="pCode"></param>
        /// <returns>Task of PCodeLookupResult</returns>
        System.Threading.Tasks.Task<PCodeLookupResult> ApiV2AfcLocationPCodeGetAsync (int pCode);

        /// <summary>
        /// Get location data associated with a PCode
        /// </summary>
        /// <remarks>
        /// Request will return all jurisdictions associated with the PCode
        /// </remarks>
        /// <exception cref="avalara.comms.rest.v2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="pCode"></param>
        /// <returns>Task of ApiResponse (PCodeLookupResult)</returns>
        System.Threading.Tasks.Task<ApiResponse<PCodeLookupResult>> ApiV2AfcLocationPCodeGetAsyncWithHttpInfo (int pCode);
        /// <summary>
        /// Get primary location data associated with a PCode
        /// </summary>
        /// <remarks>
        /// Request will return primary jurisdiction associated with the PCode
        /// </remarks>
        /// <exception cref="avalara.comms.rest.v2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="pCode"></param>
        /// <returns>Task of PCodeLookupResult</returns>
        System.Threading.Tasks.Task<PCodeLookupResult> ApiV2AfcPrimaryPCodeGetAsync (int pCode);

        /// <summary>
        /// Get primary location data associated with a PCode
        /// </summary>
        /// <remarks>
        /// Request will return primary jurisdiction associated with the PCode
        /// </remarks>
        /// <exception cref="avalara.comms.rest.v2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="pCode"></param>
        /// <returns>Task of ApiResponse (PCodeLookupResult)</returns>
        System.Threading.Tasks.Task<ApiResponse<PCodeLookupResult>> ApiV2AfcPrimaryPCodeGetAsyncWithHttpInfo (int pCode);
        /// <summary>
        /// Retrieves server time, service build version and engine version
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="avalara.comms.rest.v2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of ServiceInfo</returns>
        System.Threading.Tasks.Task<ServiceInfo> ApiV2AfcServiceinfoGetAsync ();

        /// <summary>
        /// Retrieves server time, service build version and engine version
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="avalara.comms.rest.v2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of ApiResponse (ServiceInfo)</returns>
        System.Threading.Tasks.Task<ApiResponse<ServiceInfo>> ApiV2AfcServiceinfoGetAsyncWithHttpInfo ();
        /// <summary>
        /// Get the tax information (description and category) for a tax type ID
        /// </summary>
        /// <remarks>
        /// This method returns the description for the specified tax type ID. If tax type * is supplied it will return all tax types.
        /// </remarks>
        /// <exception cref="avalara.comms.rest.v2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="taxType">Tax type ID for the tax type.</param>
        /// <returns>Task of List&lt;TaxTypeData&gt;</returns>
        System.Threading.Tasks.Task<List<TaxTypeData>> ApiV2AfcTaxtypeTaxTypeGetAsync (string taxType);

        /// <summary>
        /// Get the tax information (description and category) for a tax type ID
        /// </summary>
        /// <remarks>
        /// This method returns the description for the specified tax type ID. If tax type * is supplied it will return all tax types.
        /// </remarks>
        /// <exception cref="avalara.comms.rest.v2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="taxType">Tax type ID for the tax type.</param>
        /// <returns>Task of ApiResponse (List&lt;TaxTypeData&gt;)</returns>
        System.Threading.Tasks.Task<ApiResponse<List<TaxTypeData>>> ApiV2AfcTaxtypeTaxTypeGetAsyncWithHttpInfo (string taxType);
        /// <summary>
        /// Get transaction/service pair information
        /// </summary>
        /// <remarks>
        /// This method returns the description for the transaction type, service type and the ts pairs.
        /// </remarks>
        /// <exception cref="avalara.comms.rest.v2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of List&lt;TsPairData&gt;</returns>
        System.Threading.Tasks.Task<List<TsPairData>> ApiV2AfcTspairsGetAsync ();

        /// <summary>
        /// Get transaction/service pair information
        /// </summary>
        /// <remarks>
        /// This method returns the description for the transaction type, service type and the ts pairs.
        /// </remarks>
        /// <exception cref="avalara.comms.rest.v2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of ApiResponse (List&lt;TsPairData&gt;)</returns>
        System.Threading.Tasks.Task<ApiResponse<List<TsPairData>>> ApiV2AfcTspairsGetAsyncWithHttpInfo ();
        #endregion Asynchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface ILookupsApi : ILookupsApiSync, ILookupsApiAsync
    {

    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public partial class LookupsApi : ILookupsApi
    {
        private avalara.comms.rest.v2.Client.ExceptionFactory _exceptionFactory = (name, response) => null;

        /// <summary>
        /// Initializes a new instance of the <see cref="LookupsApi"/> class.
        /// </summary>
        /// <returns></returns>
        public LookupsApi() : this((string) null)
        {
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="LookupsApi"/> class.
        /// </summary>
        /// <returns></returns>
        public LookupsApi(String basePath)
        {
            this.Configuration = avalara.comms.rest.v2.Client.Configuration.MergeConfigurations(
                avalara.comms.rest.v2.Client.GlobalConfiguration.Instance,
                new avalara.comms.rest.v2.Client.Configuration { BasePath = basePath }
            );
            this.Client = new avalara.comms.rest.v2.Client.ApiClient(this.Configuration.BasePath);
            this.AsynchronousClient = new avalara.comms.rest.v2.Client.ApiClient(this.Configuration.BasePath);
            this.ExceptionFactory = avalara.comms.rest.v2.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="LookupsApi"/> class
        /// using Configuration object
        /// </summary>
        /// <param name="configuration">An instance of Configuration</param>
        /// <returns></returns>
        public LookupsApi(avalara.comms.rest.v2.Client.Configuration configuration)
        {
            if (configuration == null) throw new ArgumentNullException("configuration");

            this.Configuration = avalara.comms.rest.v2.Client.Configuration.MergeConfigurations(
                avalara.comms.rest.v2.Client.GlobalConfiguration.Instance,
                configuration
            );
            this.Client = new avalara.comms.rest.v2.Client.ApiClient(this.Configuration.BasePath);
            this.AsynchronousClient = new avalara.comms.rest.v2.Client.ApiClient(this.Configuration.BasePath);
            ExceptionFactory = avalara.comms.rest.v2.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="LookupsApi"/> class
        /// using a Configuration object and client instance.
        /// </summary>
        /// <param name="client">The client interface for synchronous API access.</param>
        /// <param name="asyncClient">The client interface for asynchronous API access.</param>
        /// <param name="configuration">The configuration object.</param>
        public LookupsApi(avalara.comms.rest.v2.Client.ISynchronousClient client,avalara.comms.rest.v2.Client.IAsynchronousClient asyncClient, avalara.comms.rest.v2.Client.IReadableConfiguration configuration)
        {
            if(client == null) throw new ArgumentNullException("client");
            if(asyncClient == null) throw new ArgumentNullException("asyncClient");
            if(configuration == null) throw new ArgumentNullException("configuration");

            this.Client = client;
            this.AsynchronousClient = asyncClient;
            this.Configuration = configuration;
            this.ExceptionFactory = avalara.comms.rest.v2.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// The client for accessing this underlying API asynchronously.
        /// </summary>
        public avalara.comms.rest.v2.Client.IAsynchronousClient AsynchronousClient { get; set; }

        /// <summary>
        /// The client for accessing this underlying API synchronously.
        /// </summary>
        public avalara.comms.rest.v2.Client.ISynchronousClient Client { get; set; }

        /// <summary>
        /// Gets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        public String GetBasePath()
        {
            return this.Configuration.BasePath;
        }

        /// <summary>
        /// Gets or sets the configuration object
        /// </summary>
        /// <value>An instance of the Configuration</value>
        public avalara.comms.rest.v2.Client.IReadableConfiguration Configuration {get; set;}

        /// <summary>
        /// Provides a factory method hook for the creation of exceptions.
        /// </summary>
        public avalara.comms.rest.v2.Client.ExceptionFactory ExceptionFactory
        {
            get
            {
                if (_exceptionFactory != null && _exceptionFactory.GetInvocationList().Length > 1)
                {
                    throw new InvalidOperationException("Multicast delegate for ExceptionFactory is unsupported.");
                }
                return _exceptionFactory;
            }
            set { _exceptionFactory = value; }
        }

        /// <summary>
        /// Get location data associated with a PCode Request will return all jurisdictions associated with the PCode
        /// </summary>
        /// <exception cref="avalara.comms.rest.v2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="pCode"></param>
        /// <returns>PCodeLookupResult</returns>
        public PCodeLookupResult ApiV2AfcLocationPCodeGet (int pCode)
        {
             avalara.comms.rest.v2.Client.ApiResponse<PCodeLookupResult> localVarResponse = ApiV2AfcLocationPCodeGetWithHttpInfo(pCode);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Get location data associated with a PCode Request will return all jurisdictions associated with the PCode
        /// </summary>
        /// <exception cref="avalara.comms.rest.v2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="pCode"></param>
        /// <returns>ApiResponse of PCodeLookupResult</returns>
        public avalara.comms.rest.v2.Client.ApiResponse< PCodeLookupResult > ApiV2AfcLocationPCodeGetWithHttpInfo (int pCode)
        {
            avalara.comms.rest.v2.Client.RequestOptions localVarRequestOptions = new avalara.comms.rest.v2.Client.RequestOptions();

            String[] _contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "text/plain",
                "application/json",
                "text/json"
            };

            var localVarContentType = avalara.comms.rest.v2.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = avalara.comms.rest.v2.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("pCode", avalara.comms.rest.v2.Client.ClientUtils.ParameterToString(pCode)); // path parameter

            // authentication (Basic) required

            // make the HTTP request
            var localVarResponse = this.Client.Get< PCodeLookupResult >("/api/v2/afc/location/{pCode}", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ApiV2AfcLocationPCodeGet", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Get location data associated with a PCode Request will return all jurisdictions associated with the PCode
        /// </summary>
        /// <exception cref="avalara.comms.rest.v2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="pCode"></param>
        /// <returns>Task of PCodeLookupResult</returns>
        public async System.Threading.Tasks.Task<PCodeLookupResult> ApiV2AfcLocationPCodeGetAsync (int pCode)
        {
             avalara.comms.rest.v2.Client.ApiResponse<PCodeLookupResult> localVarResponse = await ApiV2AfcLocationPCodeGetAsyncWithHttpInfo(pCode);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Get location data associated with a PCode Request will return all jurisdictions associated with the PCode
        /// </summary>
        /// <exception cref="avalara.comms.rest.v2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="pCode"></param>
        /// <returns>Task of ApiResponse (PCodeLookupResult)</returns>
        public async System.Threading.Tasks.Task<avalara.comms.rest.v2.Client.ApiResponse<PCodeLookupResult>> ApiV2AfcLocationPCodeGetAsyncWithHttpInfo (int pCode)
        {

            avalara.comms.rest.v2.Client.RequestOptions localVarRequestOptions = new avalara.comms.rest.v2.Client.RequestOptions();

            String[] _contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "text/plain",
                "application/json",
                "text/json"
            };
            
            foreach (var _contentType in _contentTypes)
                localVarRequestOptions.HeaderParameters.Add("Content-Type", _contentType);
            
            foreach (var _accept in _accepts)
                localVarRequestOptions.HeaderParameters.Add("Accept", _accept);
            
            localVarRequestOptions.PathParameters.Add("pCode", avalara.comms.rest.v2.Client.ClientUtils.ParameterToString(pCode)); // path parameter

            // authentication (Basic) required

            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.GetAsync<PCodeLookupResult>("/api/v2/afc/location/{pCode}", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ApiV2AfcLocationPCodeGet", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Get primary location data associated with a PCode Request will return primary jurisdiction associated with the PCode
        /// </summary>
        /// <exception cref="avalara.comms.rest.v2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="pCode"></param>
        /// <returns>PCodeLookupResult</returns>
        public PCodeLookupResult ApiV2AfcPrimaryPCodeGet (int pCode)
        {
             avalara.comms.rest.v2.Client.ApiResponse<PCodeLookupResult> localVarResponse = ApiV2AfcPrimaryPCodeGetWithHttpInfo(pCode);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Get primary location data associated with a PCode Request will return primary jurisdiction associated with the PCode
        /// </summary>
        /// <exception cref="avalara.comms.rest.v2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="pCode"></param>
        /// <returns>ApiResponse of PCodeLookupResult</returns>
        public avalara.comms.rest.v2.Client.ApiResponse< PCodeLookupResult > ApiV2AfcPrimaryPCodeGetWithHttpInfo (int pCode)
        {
            avalara.comms.rest.v2.Client.RequestOptions localVarRequestOptions = new avalara.comms.rest.v2.Client.RequestOptions();

            String[] _contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "text/plain",
                "application/json",
                "text/json"
            };

            var localVarContentType = avalara.comms.rest.v2.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = avalara.comms.rest.v2.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("pCode", avalara.comms.rest.v2.Client.ClientUtils.ParameterToString(pCode)); // path parameter

            // authentication (Basic) required

            // make the HTTP request
            var localVarResponse = this.Client.Get< PCodeLookupResult >("/api/v2/afc/primary/{pCode}", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ApiV2AfcPrimaryPCodeGet", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Get primary location data associated with a PCode Request will return primary jurisdiction associated with the PCode
        /// </summary>
        /// <exception cref="avalara.comms.rest.v2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="pCode"></param>
        /// <returns>Task of PCodeLookupResult</returns>
        public async System.Threading.Tasks.Task<PCodeLookupResult> ApiV2AfcPrimaryPCodeGetAsync (int pCode)
        {
             avalara.comms.rest.v2.Client.ApiResponse<PCodeLookupResult> localVarResponse = await ApiV2AfcPrimaryPCodeGetAsyncWithHttpInfo(pCode);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Get primary location data associated with a PCode Request will return primary jurisdiction associated with the PCode
        /// </summary>
        /// <exception cref="avalara.comms.rest.v2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="pCode"></param>
        /// <returns>Task of ApiResponse (PCodeLookupResult)</returns>
        public async System.Threading.Tasks.Task<avalara.comms.rest.v2.Client.ApiResponse<PCodeLookupResult>> ApiV2AfcPrimaryPCodeGetAsyncWithHttpInfo (int pCode)
        {

            avalara.comms.rest.v2.Client.RequestOptions localVarRequestOptions = new avalara.comms.rest.v2.Client.RequestOptions();

            String[] _contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "text/plain",
                "application/json",
                "text/json"
            };
            
            foreach (var _contentType in _contentTypes)
                localVarRequestOptions.HeaderParameters.Add("Content-Type", _contentType);
            
            foreach (var _accept in _accepts)
                localVarRequestOptions.HeaderParameters.Add("Accept", _accept);
            
            localVarRequestOptions.PathParameters.Add("pCode", avalara.comms.rest.v2.Client.ClientUtils.ParameterToString(pCode)); // path parameter

            // authentication (Basic) required

            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.GetAsync<PCodeLookupResult>("/api/v2/afc/primary/{pCode}", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ApiV2AfcPrimaryPCodeGet", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Retrieves server time, service build version and engine version 
        /// </summary>
        /// <exception cref="avalara.comms.rest.v2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>ServiceInfo</returns>
        public ServiceInfo ApiV2AfcServiceinfoGet ()
        {
             avalara.comms.rest.v2.Client.ApiResponse<ServiceInfo> localVarResponse = ApiV2AfcServiceinfoGetWithHttpInfo();
             return localVarResponse.Data;
        }

        /// <summary>
        /// Retrieves server time, service build version and engine version 
        /// </summary>
        /// <exception cref="avalara.comms.rest.v2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>ApiResponse of ServiceInfo</returns>
        public avalara.comms.rest.v2.Client.ApiResponse< ServiceInfo > ApiV2AfcServiceinfoGetWithHttpInfo ()
        {
            avalara.comms.rest.v2.Client.RequestOptions localVarRequestOptions = new avalara.comms.rest.v2.Client.RequestOptions();

            String[] _contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "text/plain",
                "application/json",
                "text/json"
            };

            var localVarContentType = avalara.comms.rest.v2.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = avalara.comms.rest.v2.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);


            // authentication (Basic) required

            // make the HTTP request
            var localVarResponse = this.Client.Get< ServiceInfo >("/api/v2/afc/serviceinfo", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ApiV2AfcServiceinfoGet", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Retrieves server time, service build version and engine version 
        /// </summary>
        /// <exception cref="avalara.comms.rest.v2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of ServiceInfo</returns>
        public async System.Threading.Tasks.Task<ServiceInfo> ApiV2AfcServiceinfoGetAsync ()
        {
             avalara.comms.rest.v2.Client.ApiResponse<ServiceInfo> localVarResponse = await ApiV2AfcServiceinfoGetAsyncWithHttpInfo();
             return localVarResponse.Data;

        }

        /// <summary>
        /// Retrieves server time, service build version and engine version 
        /// </summary>
        /// <exception cref="avalara.comms.rest.v2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of ApiResponse (ServiceInfo)</returns>
        public async System.Threading.Tasks.Task<avalara.comms.rest.v2.Client.ApiResponse<ServiceInfo>> ApiV2AfcServiceinfoGetAsyncWithHttpInfo ()
        {

            avalara.comms.rest.v2.Client.RequestOptions localVarRequestOptions = new avalara.comms.rest.v2.Client.RequestOptions();

            String[] _contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "text/plain",
                "application/json",
                "text/json"
            };
            
            foreach (var _contentType in _contentTypes)
                localVarRequestOptions.HeaderParameters.Add("Content-Type", _contentType);
            
            foreach (var _accept in _accepts)
                localVarRequestOptions.HeaderParameters.Add("Accept", _accept);
            

            // authentication (Basic) required

            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.GetAsync<ServiceInfo>("/api/v2/afc/serviceinfo", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ApiV2AfcServiceinfoGet", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Get the tax information (description and category) for a tax type ID This method returns the description for the specified tax type ID. If tax type * is supplied it will return all tax types.
        /// </summary>
        /// <exception cref="avalara.comms.rest.v2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="taxType">Tax type ID for the tax type.</param>
        /// <returns>List&lt;TaxTypeData&gt;</returns>
        public List<TaxTypeData> ApiV2AfcTaxtypeTaxTypeGet (string taxType)
        {
             avalara.comms.rest.v2.Client.ApiResponse<List<TaxTypeData>> localVarResponse = ApiV2AfcTaxtypeTaxTypeGetWithHttpInfo(taxType);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Get the tax information (description and category) for a tax type ID This method returns the description for the specified tax type ID. If tax type * is supplied it will return all tax types.
        /// </summary>
        /// <exception cref="avalara.comms.rest.v2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="taxType">Tax type ID for the tax type.</param>
        /// <returns>ApiResponse of List&lt;TaxTypeData&gt;</returns>
        public avalara.comms.rest.v2.Client.ApiResponse< List<TaxTypeData> > ApiV2AfcTaxtypeTaxTypeGetWithHttpInfo (string taxType)
        {
            // verify the required parameter 'taxType' is set
            if (taxType == null)
                throw new avalara.comms.rest.v2.Client.ApiException(400, "Missing required parameter 'taxType' when calling LookupsApi->ApiV2AfcTaxtypeTaxTypeGet");

            avalara.comms.rest.v2.Client.RequestOptions localVarRequestOptions = new avalara.comms.rest.v2.Client.RequestOptions();

            String[] _contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "text/plain",
                "application/json",
                "text/json"
            };

            var localVarContentType = avalara.comms.rest.v2.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = avalara.comms.rest.v2.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("taxType", avalara.comms.rest.v2.Client.ClientUtils.ParameterToString(taxType)); // path parameter

            // authentication (Basic) required

            // make the HTTP request
            var localVarResponse = this.Client.Get< List<TaxTypeData> >("/api/v2/afc/taxtype/{taxType}", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ApiV2AfcTaxtypeTaxTypeGet", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Get the tax information (description and category) for a tax type ID This method returns the description for the specified tax type ID. If tax type * is supplied it will return all tax types.
        /// </summary>
        /// <exception cref="avalara.comms.rest.v2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="taxType">Tax type ID for the tax type.</param>
        /// <returns>Task of List&lt;TaxTypeData&gt;</returns>
        public async System.Threading.Tasks.Task<List<TaxTypeData>> ApiV2AfcTaxtypeTaxTypeGetAsync (string taxType)
        {
             avalara.comms.rest.v2.Client.ApiResponse<List<TaxTypeData>> localVarResponse = await ApiV2AfcTaxtypeTaxTypeGetAsyncWithHttpInfo(taxType);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Get the tax information (description and category) for a tax type ID This method returns the description for the specified tax type ID. If tax type * is supplied it will return all tax types.
        /// </summary>
        /// <exception cref="avalara.comms.rest.v2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="taxType">Tax type ID for the tax type.</param>
        /// <returns>Task of ApiResponse (List&lt;TaxTypeData&gt;)</returns>
        public async System.Threading.Tasks.Task<avalara.comms.rest.v2.Client.ApiResponse<List<TaxTypeData>>> ApiV2AfcTaxtypeTaxTypeGetAsyncWithHttpInfo (string taxType)
        {
            // verify the required parameter 'taxType' is set
            if (taxType == null)
                throw new avalara.comms.rest.v2.Client.ApiException(400, "Missing required parameter 'taxType' when calling LookupsApi->ApiV2AfcTaxtypeTaxTypeGet");


            avalara.comms.rest.v2.Client.RequestOptions localVarRequestOptions = new avalara.comms.rest.v2.Client.RequestOptions();

            String[] _contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "text/plain",
                "application/json",
                "text/json"
            };
            
            foreach (var _contentType in _contentTypes)
                localVarRequestOptions.HeaderParameters.Add("Content-Type", _contentType);
            
            foreach (var _accept in _accepts)
                localVarRequestOptions.HeaderParameters.Add("Accept", _accept);
            
            localVarRequestOptions.PathParameters.Add("taxType", avalara.comms.rest.v2.Client.ClientUtils.ParameterToString(taxType)); // path parameter

            // authentication (Basic) required

            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.GetAsync<List<TaxTypeData>>("/api/v2/afc/taxtype/{taxType}", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ApiV2AfcTaxtypeTaxTypeGet", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Get transaction/service pair information This method returns the description for the transaction type, service type and the ts pairs.
        /// </summary>
        /// <exception cref="avalara.comms.rest.v2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>List&lt;TsPairData&gt;</returns>
        public List<TsPairData> ApiV2AfcTspairsGet ()
        {
             avalara.comms.rest.v2.Client.ApiResponse<List<TsPairData>> localVarResponse = ApiV2AfcTspairsGetWithHttpInfo();
             return localVarResponse.Data;
        }

        /// <summary>
        /// Get transaction/service pair information This method returns the description for the transaction type, service type and the ts pairs.
        /// </summary>
        /// <exception cref="avalara.comms.rest.v2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>ApiResponse of List&lt;TsPairData&gt;</returns>
        public avalara.comms.rest.v2.Client.ApiResponse< List<TsPairData> > ApiV2AfcTspairsGetWithHttpInfo ()
        {
            avalara.comms.rest.v2.Client.RequestOptions localVarRequestOptions = new avalara.comms.rest.v2.Client.RequestOptions();

            String[] _contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "text/plain",
                "application/json",
                "text/json"
            };

            var localVarContentType = avalara.comms.rest.v2.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = avalara.comms.rest.v2.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);


            // authentication (Basic) required

            // make the HTTP request
            var localVarResponse = this.Client.Get< List<TsPairData> >("/api/v2/afc/tspairs", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ApiV2AfcTspairsGet", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Get transaction/service pair information This method returns the description for the transaction type, service type and the ts pairs.
        /// </summary>
        /// <exception cref="avalara.comms.rest.v2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of List&lt;TsPairData&gt;</returns>
        public async System.Threading.Tasks.Task<List<TsPairData>> ApiV2AfcTspairsGetAsync ()
        {
             avalara.comms.rest.v2.Client.ApiResponse<List<TsPairData>> localVarResponse = await ApiV2AfcTspairsGetAsyncWithHttpInfo();
             return localVarResponse.Data;

        }

        /// <summary>
        /// Get transaction/service pair information This method returns the description for the transaction type, service type and the ts pairs.
        /// </summary>
        /// <exception cref="avalara.comms.rest.v2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of ApiResponse (List&lt;TsPairData&gt;)</returns>
        public async System.Threading.Tasks.Task<avalara.comms.rest.v2.Client.ApiResponse<List<TsPairData>>> ApiV2AfcTspairsGetAsyncWithHttpInfo ()
        {

            avalara.comms.rest.v2.Client.RequestOptions localVarRequestOptions = new avalara.comms.rest.v2.Client.RequestOptions();

            String[] _contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "text/plain",
                "application/json",
                "text/json"
            };
            
            foreach (var _contentType in _contentTypes)
                localVarRequestOptions.HeaderParameters.Add("Content-Type", _contentType);
            
            foreach (var _accept in _accepts)
                localVarRequestOptions.HeaderParameters.Add("Accept", _accept);
            

            // authentication (Basic) required

            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.GetAsync<List<TsPairData>>("/api/v2/afc/tspairs", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ApiV2AfcTspairsGet", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

    }
}
