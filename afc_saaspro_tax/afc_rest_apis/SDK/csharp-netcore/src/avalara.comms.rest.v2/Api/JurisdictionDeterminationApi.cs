/* 
 * SaasPro
 *
 * APIs to interface with communications tax engine.<br />The API requires Basic authentication.<br />Users with access to multiple clients must also set request header parameter for <code>client_id</code>.<br />Set <code>client_profile_id</code> to specify profile to be used for taxation.<br /><br />Effective January 1st, 2022 all Avalara products will be enforcing TLS 1.2 server-side. Please ensure that your implementation sets a minimal of TLS 1.2 encryption when making web requests to Avalara APIs.
 *
 * The version of the OpenAPI document: v2
 * 
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.Net;
using System.Net.Mime;
using avalara.comms.rest.v2.Client;
using avalara.comms.rest.v2.Model;

namespace avalara.comms.rest.v2.Api
{

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IJurisdictionDeterminationApiSync : IApiAccessor
    {
        #region Synchronous Operations
        /// <summary>
        /// Get PCode(s) associated with a location - Ctry/State/County/City/Zip/NpaNxx/Fips.
        /// </summary>
        /// <remarks>
        /// Requests supports using best match or exact match as well as limiting the number of matches returned. Use a * on the end of Fips/Npanxx Codes to find a range of values.
        /// </remarks>
        /// <exception cref="avalara.comms.rest.v2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="pCodeLookupRequest"> (optional)</param>
        /// <returns>PCodeLookupResult</returns>
        PCodeLookupResult ApiV2AfcPCodePost (PCodeLookupRequest pCodeLookupRequest = default(PCodeLookupRequest));

        /// <summary>
        /// Get PCode(s) associated with a location - Ctry/State/County/City/Zip/NpaNxx/Fips.
        /// </summary>
        /// <remarks>
        /// Requests supports using best match or exact match as well as limiting the number of matches returned. Use a * on the end of Fips/Npanxx Codes to find a range of values.
        /// </remarks>
        /// <exception cref="avalara.comms.rest.v2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="pCodeLookupRequest"> (optional)</param>
        /// <returns>ApiResponse of PCodeLookupResult</returns>
        ApiResponse<PCodeLookupResult> ApiV2AfcPCodePostWithHttpInfo (PCodeLookupRequest pCodeLookupRequest = default(PCodeLookupRequest));
        /// <summary>
        /// Retrieves log on Geo Batch file
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="avalara.comms.rest.v2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="processId">Process Id for Geo Batch File.</param>
        /// <returns>GeoBatchLog</returns>
        GeoBatchLog ApiV2GeoBatchLogProcessIdGet (string processId);

        /// <summary>
        /// Retrieves log on Geo Batch file
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="avalara.comms.rest.v2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="processId">Process Id for Geo Batch File.</param>
        /// <returns>ApiResponse of GeoBatchLog</returns>
        ApiResponse<GeoBatchLog> ApiV2GeoBatchLogProcessIdGetWithHttpInfo (string processId);
        /// <summary>
        /// Retrieves information on Geo Batch file status
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="avalara.comms.rest.v2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="processId">Process Id for Geo Batch File.</param>
        /// <returns>GeoBatchStatus</returns>
        GeoBatchStatus ApiV2GeoBatchStatusProcessIdGet (string processId);

        /// <summary>
        /// Retrieves information on Geo Batch file status
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="avalara.comms.rest.v2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="processId">Process Id for Geo Batch File.</param>
        /// <returns>ApiResponse of GeoBatchStatus</returns>
        ApiResponse<GeoBatchStatus> ApiV2GeoBatchStatusProcessIdGetWithHttpInfo (string processId);
        /// <summary>
        /// Uploads file to Geo Batch.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="avalara.comms.rest.v2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="geoBatchFile"> (optional)</param>
        /// <returns>GeoBatchSubmitFileResponse</returns>
        GeoBatchSubmitFileResponse ApiV2GeoBatchUploadPost (System.IO.Stream geoBatchFile = default(System.IO.Stream));

        /// <summary>
        /// Uploads file to Geo Batch.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="avalara.comms.rest.v2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="geoBatchFile"> (optional)</param>
        /// <returns>ApiResponse of GeoBatchSubmitFileResponse</returns>
        ApiResponse<GeoBatchSubmitFileResponse> ApiV2GeoBatchUploadPostWithHttpInfo (System.IO.Stream geoBatchFile = default(System.IO.Stream));
        /// <summary>
        /// Geocodes one or multiple street addresses and/or lat/long coordinate pairs.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="avalara.comms.rest.v2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="geocodeRequest">List of street addresses and/or lat/long coordinate pairs to geocode. (optional)</param>
        /// <returns>List&lt;GeocodeResult&gt;</returns>
        List<GeocodeResult> ApiV2GeoGeocodePost (List<GeocodeRequest> geocodeRequest = default(List<GeocodeRequest>));

        /// <summary>
        /// Geocodes one or multiple street addresses and/or lat/long coordinate pairs.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="avalara.comms.rest.v2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="geocodeRequest">List of street addresses and/or lat/long coordinate pairs to geocode. (optional)</param>
        /// <returns>ApiResponse of List&lt;GeocodeResult&gt;</returns>
        ApiResponse<List<GeocodeResult>> ApiV2GeoGeocodePostWithHttpInfo (List<GeocodeRequest> geocodeRequest = default(List<GeocodeRequest>));
        #endregion Synchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IJurisdictionDeterminationApiAsync : IApiAccessor
    {
        #region Asynchronous Operations
        /// <summary>
        /// Get PCode(s) associated with a location - Ctry/State/County/City/Zip/NpaNxx/Fips.
        /// </summary>
        /// <remarks>
        /// Requests supports using best match or exact match as well as limiting the number of matches returned. Use a * on the end of Fips/Npanxx Codes to find a range of values.
        /// </remarks>
        /// <exception cref="avalara.comms.rest.v2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="pCodeLookupRequest"> (optional)</param>
        /// <returns>Task of PCodeLookupResult</returns>
        System.Threading.Tasks.Task<PCodeLookupResult> ApiV2AfcPCodePostAsync (PCodeLookupRequest pCodeLookupRequest = default(PCodeLookupRequest));

        /// <summary>
        /// Get PCode(s) associated with a location - Ctry/State/County/City/Zip/NpaNxx/Fips.
        /// </summary>
        /// <remarks>
        /// Requests supports using best match or exact match as well as limiting the number of matches returned. Use a * on the end of Fips/Npanxx Codes to find a range of values.
        /// </remarks>
        /// <exception cref="avalara.comms.rest.v2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="pCodeLookupRequest"> (optional)</param>
        /// <returns>Task of ApiResponse (PCodeLookupResult)</returns>
        System.Threading.Tasks.Task<ApiResponse<PCodeLookupResult>> ApiV2AfcPCodePostAsyncWithHttpInfo (PCodeLookupRequest pCodeLookupRequest = default(PCodeLookupRequest));
        /// <summary>
        /// Retrieves log on Geo Batch file
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="avalara.comms.rest.v2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="processId">Process Id for Geo Batch File.</param>
        /// <returns>Task of GeoBatchLog</returns>
        System.Threading.Tasks.Task<GeoBatchLog> ApiV2GeoBatchLogProcessIdGetAsync (string processId);

        /// <summary>
        /// Retrieves log on Geo Batch file
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="avalara.comms.rest.v2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="processId">Process Id for Geo Batch File.</param>
        /// <returns>Task of ApiResponse (GeoBatchLog)</returns>
        System.Threading.Tasks.Task<ApiResponse<GeoBatchLog>> ApiV2GeoBatchLogProcessIdGetAsyncWithHttpInfo (string processId);
        /// <summary>
        /// Retrieves information on Geo Batch file status
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="avalara.comms.rest.v2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="processId">Process Id for Geo Batch File.</param>
        /// <returns>Task of GeoBatchStatus</returns>
        System.Threading.Tasks.Task<GeoBatchStatus> ApiV2GeoBatchStatusProcessIdGetAsync (string processId);

        /// <summary>
        /// Retrieves information on Geo Batch file status
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="avalara.comms.rest.v2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="processId">Process Id for Geo Batch File.</param>
        /// <returns>Task of ApiResponse (GeoBatchStatus)</returns>
        System.Threading.Tasks.Task<ApiResponse<GeoBatchStatus>> ApiV2GeoBatchStatusProcessIdGetAsyncWithHttpInfo (string processId);
        /// <summary>
        /// Uploads file to Geo Batch.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="avalara.comms.rest.v2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="geoBatchFile"> (optional)</param>
        /// <returns>Task of GeoBatchSubmitFileResponse</returns>
        System.Threading.Tasks.Task<GeoBatchSubmitFileResponse> ApiV2GeoBatchUploadPostAsync (System.IO.Stream geoBatchFile = default(System.IO.Stream));

        /// <summary>
        /// Uploads file to Geo Batch.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="avalara.comms.rest.v2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="geoBatchFile"> (optional)</param>
        /// <returns>Task of ApiResponse (GeoBatchSubmitFileResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<GeoBatchSubmitFileResponse>> ApiV2GeoBatchUploadPostAsyncWithHttpInfo (System.IO.Stream geoBatchFile = default(System.IO.Stream));
        /// <summary>
        /// Geocodes one or multiple street addresses and/or lat/long coordinate pairs.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="avalara.comms.rest.v2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="geocodeRequest">List of street addresses and/or lat/long coordinate pairs to geocode. (optional)</param>
        /// <returns>Task of List&lt;GeocodeResult&gt;</returns>
        System.Threading.Tasks.Task<List<GeocodeResult>> ApiV2GeoGeocodePostAsync (List<GeocodeRequest> geocodeRequest = default(List<GeocodeRequest>));

        /// <summary>
        /// Geocodes one or multiple street addresses and/or lat/long coordinate pairs.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="avalara.comms.rest.v2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="geocodeRequest">List of street addresses and/or lat/long coordinate pairs to geocode. (optional)</param>
        /// <returns>Task of ApiResponse (List&lt;GeocodeResult&gt;)</returns>
        System.Threading.Tasks.Task<ApiResponse<List<GeocodeResult>>> ApiV2GeoGeocodePostAsyncWithHttpInfo (List<GeocodeRequest> geocodeRequest = default(List<GeocodeRequest>));
        #endregion Asynchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IJurisdictionDeterminationApi : IJurisdictionDeterminationApiSync, IJurisdictionDeterminationApiAsync
    {

    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public partial class JurisdictionDeterminationApi : IJurisdictionDeterminationApi
    {
        private avalara.comms.rest.v2.Client.ExceptionFactory _exceptionFactory = (name, response) => null;

        /// <summary>
        /// Initializes a new instance of the <see cref="JurisdictionDeterminationApi"/> class.
        /// </summary>
        /// <returns></returns>
        public JurisdictionDeterminationApi() : this((string) null)
        {
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="JurisdictionDeterminationApi"/> class.
        /// </summary>
        /// <returns></returns>
        public JurisdictionDeterminationApi(String basePath)
        {
            this.Configuration = avalara.comms.rest.v2.Client.Configuration.MergeConfigurations(
                avalara.comms.rest.v2.Client.GlobalConfiguration.Instance,
                new avalara.comms.rest.v2.Client.Configuration { BasePath = basePath }
            );
            this.Client = new avalara.comms.rest.v2.Client.ApiClient(this.Configuration.BasePath);
            this.AsynchronousClient = new avalara.comms.rest.v2.Client.ApiClient(this.Configuration.BasePath);
            this.ExceptionFactory = avalara.comms.rest.v2.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="JurisdictionDeterminationApi"/> class
        /// using Configuration object
        /// </summary>
        /// <param name="configuration">An instance of Configuration</param>
        /// <returns></returns>
        public JurisdictionDeterminationApi(avalara.comms.rest.v2.Client.Configuration configuration)
        {
            if (configuration == null) throw new ArgumentNullException("configuration");

            this.Configuration = avalara.comms.rest.v2.Client.Configuration.MergeConfigurations(
                avalara.comms.rest.v2.Client.GlobalConfiguration.Instance,
                configuration
            );
            this.Client = new avalara.comms.rest.v2.Client.ApiClient(this.Configuration.BasePath);
            this.AsynchronousClient = new avalara.comms.rest.v2.Client.ApiClient(this.Configuration.BasePath);
            ExceptionFactory = avalara.comms.rest.v2.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="JurisdictionDeterminationApi"/> class
        /// using a Configuration object and client instance.
        /// </summary>
        /// <param name="client">The client interface for synchronous API access.</param>
        /// <param name="asyncClient">The client interface for asynchronous API access.</param>
        /// <param name="configuration">The configuration object.</param>
        public JurisdictionDeterminationApi(avalara.comms.rest.v2.Client.ISynchronousClient client,avalara.comms.rest.v2.Client.IAsynchronousClient asyncClient, avalara.comms.rest.v2.Client.IReadableConfiguration configuration)
        {
            if(client == null) throw new ArgumentNullException("client");
            if(asyncClient == null) throw new ArgumentNullException("asyncClient");
            if(configuration == null) throw new ArgumentNullException("configuration");

            this.Client = client;
            this.AsynchronousClient = asyncClient;
            this.Configuration = configuration;
            this.ExceptionFactory = avalara.comms.rest.v2.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// The client for accessing this underlying API asynchronously.
        /// </summary>
        public avalara.comms.rest.v2.Client.IAsynchronousClient AsynchronousClient { get; set; }

        /// <summary>
        /// The client for accessing this underlying API synchronously.
        /// </summary>
        public avalara.comms.rest.v2.Client.ISynchronousClient Client { get; set; }

        /// <summary>
        /// Gets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        public String GetBasePath()
        {
            return this.Configuration.BasePath;
        }

        /// <summary>
        /// Gets or sets the configuration object
        /// </summary>
        /// <value>An instance of the Configuration</value>
        public avalara.comms.rest.v2.Client.IReadableConfiguration Configuration {get; set;}

        /// <summary>
        /// Provides a factory method hook for the creation of exceptions.
        /// </summary>
        public avalara.comms.rest.v2.Client.ExceptionFactory ExceptionFactory
        {
            get
            {
                if (_exceptionFactory != null && _exceptionFactory.GetInvocationList().Length > 1)
                {
                    throw new InvalidOperationException("Multicast delegate for ExceptionFactory is unsupported.");
                }
                return _exceptionFactory;
            }
            set { _exceptionFactory = value; }
        }

        /// <summary>
        /// Get PCode(s) associated with a location - Ctry/State/County/City/Zip/NpaNxx/Fips. Requests supports using best match or exact match as well as limiting the number of matches returned. Use a * on the end of Fips/Npanxx Codes to find a range of values.
        /// </summary>
        /// <exception cref="avalara.comms.rest.v2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="pCodeLookupRequest"> (optional)</param>
        /// <returns>PCodeLookupResult</returns>
        public PCodeLookupResult ApiV2AfcPCodePost (PCodeLookupRequest pCodeLookupRequest = default(PCodeLookupRequest))
        {
             avalara.comms.rest.v2.Client.ApiResponse<PCodeLookupResult> localVarResponse = ApiV2AfcPCodePostWithHttpInfo(pCodeLookupRequest);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Get PCode(s) associated with a location - Ctry/State/County/City/Zip/NpaNxx/Fips. Requests supports using best match or exact match as well as limiting the number of matches returned. Use a * on the end of Fips/Npanxx Codes to find a range of values.
        /// </summary>
        /// <exception cref="avalara.comms.rest.v2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="pCodeLookupRequest"> (optional)</param>
        /// <returns>ApiResponse of PCodeLookupResult</returns>
        public avalara.comms.rest.v2.Client.ApiResponse< PCodeLookupResult > ApiV2AfcPCodePostWithHttpInfo (PCodeLookupRequest pCodeLookupRequest = default(PCodeLookupRequest))
        {
            avalara.comms.rest.v2.Client.RequestOptions localVarRequestOptions = new avalara.comms.rest.v2.Client.RequestOptions();

            String[] _contentTypes = new String[] {
                "application/json-patch+json", 
                "application/json", 
                "text/json", 
                "application/_*+json"
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "text/plain",
                "application/json",
                "text/json"
            };

            var localVarContentType = avalara.comms.rest.v2.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = avalara.comms.rest.v2.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.Data = pCodeLookupRequest;

            // authentication (Basic) required

            // make the HTTP request
            var localVarResponse = this.Client.Post< PCodeLookupResult >("/api/v2/afc/PCode", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ApiV2AfcPCodePost", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Get PCode(s) associated with a location - Ctry/State/County/City/Zip/NpaNxx/Fips. Requests supports using best match or exact match as well as limiting the number of matches returned. Use a * on the end of Fips/Npanxx Codes to find a range of values.
        /// </summary>
        /// <exception cref="avalara.comms.rest.v2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="pCodeLookupRequest"> (optional)</param>
        /// <returns>Task of PCodeLookupResult</returns>
        public async System.Threading.Tasks.Task<PCodeLookupResult> ApiV2AfcPCodePostAsync (PCodeLookupRequest pCodeLookupRequest = default(PCodeLookupRequest))
        {
             avalara.comms.rest.v2.Client.ApiResponse<PCodeLookupResult> localVarResponse = await ApiV2AfcPCodePostAsyncWithHttpInfo(pCodeLookupRequest);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Get PCode(s) associated with a location - Ctry/State/County/City/Zip/NpaNxx/Fips. Requests supports using best match or exact match as well as limiting the number of matches returned. Use a * on the end of Fips/Npanxx Codes to find a range of values.
        /// </summary>
        /// <exception cref="avalara.comms.rest.v2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="pCodeLookupRequest"> (optional)</param>
        /// <returns>Task of ApiResponse (PCodeLookupResult)</returns>
        public async System.Threading.Tasks.Task<avalara.comms.rest.v2.Client.ApiResponse<PCodeLookupResult>> ApiV2AfcPCodePostAsyncWithHttpInfo (PCodeLookupRequest pCodeLookupRequest = default(PCodeLookupRequest))
        {

            avalara.comms.rest.v2.Client.RequestOptions localVarRequestOptions = new avalara.comms.rest.v2.Client.RequestOptions();

            String[] _contentTypes = new String[] {
                "application/json-patch+json", 
                "application/json", 
                "text/json", 
                "application/_*+json"
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "text/plain",
                "application/json",
                "text/json"
            };
            
            foreach (var _contentType in _contentTypes)
                localVarRequestOptions.HeaderParameters.Add("Content-Type", _contentType);
            
            foreach (var _accept in _accepts)
                localVarRequestOptions.HeaderParameters.Add("Accept", _accept);
            
            localVarRequestOptions.Data = pCodeLookupRequest;

            // authentication (Basic) required

            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.PostAsync<PCodeLookupResult>("/api/v2/afc/PCode", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ApiV2AfcPCodePost", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Retrieves log on Geo Batch file 
        /// </summary>
        /// <exception cref="avalara.comms.rest.v2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="processId">Process Id for Geo Batch File.</param>
        /// <returns>GeoBatchLog</returns>
        public GeoBatchLog ApiV2GeoBatchLogProcessIdGet (string processId)
        {
             avalara.comms.rest.v2.Client.ApiResponse<GeoBatchLog> localVarResponse = ApiV2GeoBatchLogProcessIdGetWithHttpInfo(processId);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Retrieves log on Geo Batch file 
        /// </summary>
        /// <exception cref="avalara.comms.rest.v2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="processId">Process Id for Geo Batch File.</param>
        /// <returns>ApiResponse of GeoBatchLog</returns>
        public avalara.comms.rest.v2.Client.ApiResponse< GeoBatchLog > ApiV2GeoBatchLogProcessIdGetWithHttpInfo (string processId)
        {
            // verify the required parameter 'processId' is set
            if (processId == null)
                throw new avalara.comms.rest.v2.Client.ApiException(400, "Missing required parameter 'processId' when calling JurisdictionDeterminationApi->ApiV2GeoBatchLogProcessIdGet");

            avalara.comms.rest.v2.Client.RequestOptions localVarRequestOptions = new avalara.comms.rest.v2.Client.RequestOptions();

            String[] _contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "text/plain",
                "application/json",
                "text/json"
            };

            var localVarContentType = avalara.comms.rest.v2.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = avalara.comms.rest.v2.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("processId", avalara.comms.rest.v2.Client.ClientUtils.ParameterToString(processId)); // path parameter

            // authentication (Basic) required

            // make the HTTP request
            var localVarResponse = this.Client.Get< GeoBatchLog >("/api/v2/geo/batch/log/{processId}", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ApiV2GeoBatchLogProcessIdGet", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Retrieves log on Geo Batch file 
        /// </summary>
        /// <exception cref="avalara.comms.rest.v2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="processId">Process Id for Geo Batch File.</param>
        /// <returns>Task of GeoBatchLog</returns>
        public async System.Threading.Tasks.Task<GeoBatchLog> ApiV2GeoBatchLogProcessIdGetAsync (string processId)
        {
             avalara.comms.rest.v2.Client.ApiResponse<GeoBatchLog> localVarResponse = await ApiV2GeoBatchLogProcessIdGetAsyncWithHttpInfo(processId);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Retrieves log on Geo Batch file 
        /// </summary>
        /// <exception cref="avalara.comms.rest.v2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="processId">Process Id for Geo Batch File.</param>
        /// <returns>Task of ApiResponse (GeoBatchLog)</returns>
        public async System.Threading.Tasks.Task<avalara.comms.rest.v2.Client.ApiResponse<GeoBatchLog>> ApiV2GeoBatchLogProcessIdGetAsyncWithHttpInfo (string processId)
        {
            // verify the required parameter 'processId' is set
            if (processId == null)
                throw new avalara.comms.rest.v2.Client.ApiException(400, "Missing required parameter 'processId' when calling JurisdictionDeterminationApi->ApiV2GeoBatchLogProcessIdGet");


            avalara.comms.rest.v2.Client.RequestOptions localVarRequestOptions = new avalara.comms.rest.v2.Client.RequestOptions();

            String[] _contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "text/plain",
                "application/json",
                "text/json"
            };
            
            foreach (var _contentType in _contentTypes)
                localVarRequestOptions.HeaderParameters.Add("Content-Type", _contentType);
            
            foreach (var _accept in _accepts)
                localVarRequestOptions.HeaderParameters.Add("Accept", _accept);
            
            localVarRequestOptions.PathParameters.Add("processId", avalara.comms.rest.v2.Client.ClientUtils.ParameterToString(processId)); // path parameter

            // authentication (Basic) required

            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.GetAsync<GeoBatchLog>("/api/v2/geo/batch/log/{processId}", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ApiV2GeoBatchLogProcessIdGet", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Retrieves information on Geo Batch file status 
        /// </summary>
        /// <exception cref="avalara.comms.rest.v2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="processId">Process Id for Geo Batch File.</param>
        /// <returns>GeoBatchStatus</returns>
        public GeoBatchStatus ApiV2GeoBatchStatusProcessIdGet (string processId)
        {
             avalara.comms.rest.v2.Client.ApiResponse<GeoBatchStatus> localVarResponse = ApiV2GeoBatchStatusProcessIdGetWithHttpInfo(processId);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Retrieves information on Geo Batch file status 
        /// </summary>
        /// <exception cref="avalara.comms.rest.v2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="processId">Process Id for Geo Batch File.</param>
        /// <returns>ApiResponse of GeoBatchStatus</returns>
        public avalara.comms.rest.v2.Client.ApiResponse< GeoBatchStatus > ApiV2GeoBatchStatusProcessIdGetWithHttpInfo (string processId)
        {
            // verify the required parameter 'processId' is set
            if (processId == null)
                throw new avalara.comms.rest.v2.Client.ApiException(400, "Missing required parameter 'processId' when calling JurisdictionDeterminationApi->ApiV2GeoBatchStatusProcessIdGet");

            avalara.comms.rest.v2.Client.RequestOptions localVarRequestOptions = new avalara.comms.rest.v2.Client.RequestOptions();

            String[] _contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "text/plain",
                "application/json",
                "text/json"
            };

            var localVarContentType = avalara.comms.rest.v2.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = avalara.comms.rest.v2.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("processId", avalara.comms.rest.v2.Client.ClientUtils.ParameterToString(processId)); // path parameter

            // authentication (Basic) required

            // make the HTTP request
            var localVarResponse = this.Client.Get< GeoBatchStatus >("/api/v2/geo/batch/status/{processId}", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ApiV2GeoBatchStatusProcessIdGet", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Retrieves information on Geo Batch file status 
        /// </summary>
        /// <exception cref="avalara.comms.rest.v2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="processId">Process Id for Geo Batch File.</param>
        /// <returns>Task of GeoBatchStatus</returns>
        public async System.Threading.Tasks.Task<GeoBatchStatus> ApiV2GeoBatchStatusProcessIdGetAsync (string processId)
        {
             avalara.comms.rest.v2.Client.ApiResponse<GeoBatchStatus> localVarResponse = await ApiV2GeoBatchStatusProcessIdGetAsyncWithHttpInfo(processId);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Retrieves information on Geo Batch file status 
        /// </summary>
        /// <exception cref="avalara.comms.rest.v2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="processId">Process Id for Geo Batch File.</param>
        /// <returns>Task of ApiResponse (GeoBatchStatus)</returns>
        public async System.Threading.Tasks.Task<avalara.comms.rest.v2.Client.ApiResponse<GeoBatchStatus>> ApiV2GeoBatchStatusProcessIdGetAsyncWithHttpInfo (string processId)
        {
            // verify the required parameter 'processId' is set
            if (processId == null)
                throw new avalara.comms.rest.v2.Client.ApiException(400, "Missing required parameter 'processId' when calling JurisdictionDeterminationApi->ApiV2GeoBatchStatusProcessIdGet");


            avalara.comms.rest.v2.Client.RequestOptions localVarRequestOptions = new avalara.comms.rest.v2.Client.RequestOptions();

            String[] _contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "text/plain",
                "application/json",
                "text/json"
            };
            
            foreach (var _contentType in _contentTypes)
                localVarRequestOptions.HeaderParameters.Add("Content-Type", _contentType);
            
            foreach (var _accept in _accepts)
                localVarRequestOptions.HeaderParameters.Add("Accept", _accept);
            
            localVarRequestOptions.PathParameters.Add("processId", avalara.comms.rest.v2.Client.ClientUtils.ParameterToString(processId)); // path parameter

            // authentication (Basic) required

            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.GetAsync<GeoBatchStatus>("/api/v2/geo/batch/status/{processId}", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ApiV2GeoBatchStatusProcessIdGet", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Uploads file to Geo Batch. 
        /// </summary>
        /// <exception cref="avalara.comms.rest.v2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="geoBatchFile"> (optional)</param>
        /// <returns>GeoBatchSubmitFileResponse</returns>
        public GeoBatchSubmitFileResponse ApiV2GeoBatchUploadPost (System.IO.Stream geoBatchFile = default(System.IO.Stream))
        {
             avalara.comms.rest.v2.Client.ApiResponse<GeoBatchSubmitFileResponse> localVarResponse = ApiV2GeoBatchUploadPostWithHttpInfo(geoBatchFile);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Uploads file to Geo Batch. 
        /// </summary>
        /// <exception cref="avalara.comms.rest.v2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="geoBatchFile"> (optional)</param>
        /// <returns>ApiResponse of GeoBatchSubmitFileResponse</returns>
        public avalara.comms.rest.v2.Client.ApiResponse< GeoBatchSubmitFileResponse > ApiV2GeoBatchUploadPostWithHttpInfo (System.IO.Stream geoBatchFile = default(System.IO.Stream))
        {
            avalara.comms.rest.v2.Client.RequestOptions localVarRequestOptions = new avalara.comms.rest.v2.Client.RequestOptions();

            String[] _contentTypes = new String[] {
                "multipart/form-data"
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "text/plain",
                "application/json",
                "text/json"
            };

            var localVarContentType = avalara.comms.rest.v2.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = avalara.comms.rest.v2.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            if (geoBatchFile != null)
            {
                localVarRequestOptions.FileParameters.Add("geoBatchFile", geoBatchFile);
            }

            // authentication (Basic) required

            // make the HTTP request
            var localVarResponse = this.Client.Post< GeoBatchSubmitFileResponse >("/api/v2/geo/batch/Upload", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ApiV2GeoBatchUploadPost", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Uploads file to Geo Batch. 
        /// </summary>
        /// <exception cref="avalara.comms.rest.v2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="geoBatchFile"> (optional)</param>
        /// <returns>Task of GeoBatchSubmitFileResponse</returns>
        public async System.Threading.Tasks.Task<GeoBatchSubmitFileResponse> ApiV2GeoBatchUploadPostAsync (System.IO.Stream geoBatchFile = default(System.IO.Stream))
        {
             avalara.comms.rest.v2.Client.ApiResponse<GeoBatchSubmitFileResponse> localVarResponse = await ApiV2GeoBatchUploadPostAsyncWithHttpInfo(geoBatchFile);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Uploads file to Geo Batch. 
        /// </summary>
        /// <exception cref="avalara.comms.rest.v2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="geoBatchFile"> (optional)</param>
        /// <returns>Task of ApiResponse (GeoBatchSubmitFileResponse)</returns>
        public async System.Threading.Tasks.Task<avalara.comms.rest.v2.Client.ApiResponse<GeoBatchSubmitFileResponse>> ApiV2GeoBatchUploadPostAsyncWithHttpInfo (System.IO.Stream geoBatchFile = default(System.IO.Stream))
        {

            avalara.comms.rest.v2.Client.RequestOptions localVarRequestOptions = new avalara.comms.rest.v2.Client.RequestOptions();

            String[] _contentTypes = new String[] {
                "multipart/form-data"
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "text/plain",
                "application/json",
                "text/json"
            };
            
            foreach (var _contentType in _contentTypes)
                localVarRequestOptions.HeaderParameters.Add("Content-Type", _contentType);
            
            foreach (var _accept in _accepts)
                localVarRequestOptions.HeaderParameters.Add("Accept", _accept);
            
            if (geoBatchFile != null)
            {
                localVarRequestOptions.FileParameters.Add("geoBatchFile", geoBatchFile);
            }

            // authentication (Basic) required

            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.PostAsync<GeoBatchSubmitFileResponse>("/api/v2/geo/batch/Upload", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ApiV2GeoBatchUploadPost", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Geocodes one or multiple street addresses and/or lat/long coordinate pairs. 
        /// </summary>
        /// <exception cref="avalara.comms.rest.v2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="geocodeRequest">List of street addresses and/or lat/long coordinate pairs to geocode. (optional)</param>
        /// <returns>List&lt;GeocodeResult&gt;</returns>
        public List<GeocodeResult> ApiV2GeoGeocodePost (List<GeocodeRequest> geocodeRequest = default(List<GeocodeRequest>))
        {
             avalara.comms.rest.v2.Client.ApiResponse<List<GeocodeResult>> localVarResponse = ApiV2GeoGeocodePostWithHttpInfo(geocodeRequest);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Geocodes one or multiple street addresses and/or lat/long coordinate pairs. 
        /// </summary>
        /// <exception cref="avalara.comms.rest.v2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="geocodeRequest">List of street addresses and/or lat/long coordinate pairs to geocode. (optional)</param>
        /// <returns>ApiResponse of List&lt;GeocodeResult&gt;</returns>
        public avalara.comms.rest.v2.Client.ApiResponse< List<GeocodeResult> > ApiV2GeoGeocodePostWithHttpInfo (List<GeocodeRequest> geocodeRequest = default(List<GeocodeRequest>))
        {
            avalara.comms.rest.v2.Client.RequestOptions localVarRequestOptions = new avalara.comms.rest.v2.Client.RequestOptions();

            String[] _contentTypes = new String[] {
                "application/json-patch+json", 
                "application/json", 
                "text/json", 
                "application/_*+json"
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "text/plain",
                "application/json",
                "text/json"
            };

            var localVarContentType = avalara.comms.rest.v2.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = avalara.comms.rest.v2.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.Data = geocodeRequest;

            // authentication (Basic) required

            // make the HTTP request
            var localVarResponse = this.Client.Post< List<GeocodeResult> >("/api/v2/geo/Geocode", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ApiV2GeoGeocodePost", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Geocodes one or multiple street addresses and/or lat/long coordinate pairs. 
        /// </summary>
        /// <exception cref="avalara.comms.rest.v2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="geocodeRequest">List of street addresses and/or lat/long coordinate pairs to geocode. (optional)</param>
        /// <returns>Task of List&lt;GeocodeResult&gt;</returns>
        public async System.Threading.Tasks.Task<List<GeocodeResult>> ApiV2GeoGeocodePostAsync (List<GeocodeRequest> geocodeRequest = default(List<GeocodeRequest>))
        {
             avalara.comms.rest.v2.Client.ApiResponse<List<GeocodeResult>> localVarResponse = await ApiV2GeoGeocodePostAsyncWithHttpInfo(geocodeRequest);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Geocodes one or multiple street addresses and/or lat/long coordinate pairs. 
        /// </summary>
        /// <exception cref="avalara.comms.rest.v2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="geocodeRequest">List of street addresses and/or lat/long coordinate pairs to geocode. (optional)</param>
        /// <returns>Task of ApiResponse (List&lt;GeocodeResult&gt;)</returns>
        public async System.Threading.Tasks.Task<avalara.comms.rest.v2.Client.ApiResponse<List<GeocodeResult>>> ApiV2GeoGeocodePostAsyncWithHttpInfo (List<GeocodeRequest> geocodeRequest = default(List<GeocodeRequest>))
        {

            avalara.comms.rest.v2.Client.RequestOptions localVarRequestOptions = new avalara.comms.rest.v2.Client.RequestOptions();

            String[] _contentTypes = new String[] {
                "application/json-patch+json", 
                "application/json", 
                "text/json", 
                "application/_*+json"
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "text/plain",
                "application/json",
                "text/json"
            };
            
            foreach (var _contentType in _contentTypes)
                localVarRequestOptions.HeaderParameters.Add("Content-Type", _contentType);
            
            foreach (var _accept in _accepts)
                localVarRequestOptions.HeaderParameters.Add("Accept", _accept);
            
            localVarRequestOptions.Data = geocodeRequest;

            // authentication (Basic) required

            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.PostAsync<List<GeocodeResult>>("/api/v2/geo/Geocode", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ApiV2GeoGeocodePost", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

    }
}
