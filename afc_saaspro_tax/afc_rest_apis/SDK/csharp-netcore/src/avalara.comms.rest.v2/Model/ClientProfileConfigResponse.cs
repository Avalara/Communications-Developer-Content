/* 
 * SaasPro
 *
 * APIs to interface with communications tax engine.<br />The API requires Basic authentication.<br />Users with access to multiple clients must also set request header parameter for <code>client_id</code>.<br />Set <code>client_profile_id</code> to specify profile to be used for taxation.<br /><br />Effective January 1st, 2022 all Avalara products will be enforcing TLS 1.2 server-side. Please ensure that your implementation sets a minimal of TLS 1.2 encryption when making web requests to Avalara APIs.
 *
 * The version of the OpenAPI document: v2
 * 
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = avalara.comms.rest.v2.Client.OpenAPIDateConverter;

namespace avalara.comms.rest.v2.Model
{
    /// <summary>
    /// Data for an invoice or quote line item.
    /// </summary>
    [DataContract]
    public partial class ClientProfileConfigResponse :  IEquatable<ClientProfileConfigResponse>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="ClientProfileConfigResponse" /> class.
        /// </summary>
        /// <param name="profileConfigId">Unique profile configuration id associated with configuration item.</param>
        /// <param name="profileIds">Profile id&#39;s associated with configuration item.</param>
        /// <param name="clientId">Client id associated with configuration item.</param>
        /// <param name="lastUpdateBy">User who last updated the configuration item.</param>
        /// <param name="active">Active status of the configuration item.</param>
        /// <param name="settings">settings.</param>
        /// <param name="exclusions">Exclusions (as applicable).</param>
        /// <param name="bundles">Bundles (as applicable).</param>
        /// <param name="nexus">Nexus (as applicable).</param>
        /// <param name="overrides">overrides.</param>
        /// <param name="description">Description associated with this item.</param>
        /// <param name="error">Error information..</param>
        /// <param name="itemType">Item Type  Examples:    Configuration, Bundle, Exclusion, Override.</param>
        /// <param name="errors">Error information..</param>
        /// <param name="warnings">Warning information..</param>
        /// <param name="status">Status information..</param>
        public ClientProfileConfigResponse(long? profileConfigId = default(long?), List<int> profileIds = default(List<int>), int? clientId = default(int?), string lastUpdateBy = default(string), bool? active = default(bool?), Configuration settings = default(Configuration), List<ExclusionConfig> exclusions = default(List<ExclusionConfig>), List<BundleConfig> bundles = default(List<BundleConfig>), List<NexusConfig> nexus = default(List<NexusConfig>), OverrideConfig overrides = default(OverrideConfig), string description = default(string), string error = default(string), string itemType = default(string), List<Error> errors = default(List<Error>), List<Warning> warnings = default(List<Warning>), List<Status> status = default(List<Status>))
        {
            this.ProfileConfigId = profileConfigId;
            this.ProfileIds = profileIds;
            this.ClientId = clientId;
            this.LastUpdateBy = lastUpdateBy;
            this.Active = active;
            this.Settings = settings;
            this.Exclusions = exclusions;
            this.Bundles = bundles;
            this.Nexus = nexus;
            this.Overrides = overrides;
            this.Description = description;
            this.Error = error;
            this.ItemType = itemType;
            this.Errors = errors;
            this.Warnings = warnings;
            this.Status = status;
        }
        
        /// <summary>
        /// Unique profile configuration id associated with configuration item
        /// </summary>
        /// <value>Unique profile configuration id associated with configuration item</value>
        [DataMember(Name="ProfileConfigId", EmitDefaultValue=true)]
        public long? ProfileConfigId { get; set; }

        /// <summary>
        /// Profile id&#39;s associated with configuration item
        /// </summary>
        /// <value>Profile id&#39;s associated with configuration item</value>
        [DataMember(Name="ProfileIds", EmitDefaultValue=true)]
        public List<int> ProfileIds { get; set; }

        /// <summary>
        /// Client id associated with configuration item
        /// </summary>
        /// <value>Client id associated with configuration item</value>
        [DataMember(Name="ClientId", EmitDefaultValue=true)]
        public int? ClientId { get; set; }

        /// <summary>
        /// User who last updated the configuration item
        /// </summary>
        /// <value>User who last updated the configuration item</value>
        [DataMember(Name="LastUpdateBy", EmitDefaultValue=true)]
        public string LastUpdateBy { get; set; }

        /// <summary>
        /// Active status of the configuration item
        /// </summary>
        /// <value>Active status of the configuration item</value>
        [DataMember(Name="Active", EmitDefaultValue=true)]
        public bool? Active { get; set; }

        /// <summary>
        /// Gets or Sets Settings
        /// </summary>
        [DataMember(Name="Settings", EmitDefaultValue=false)]
        public Configuration Settings { get; set; }

        /// <summary>
        /// Exclusions (as applicable)
        /// </summary>
        /// <value>Exclusions (as applicable)</value>
        [DataMember(Name="Exclusions", EmitDefaultValue=true)]
        public List<ExclusionConfig> Exclusions { get; set; }

        /// <summary>
        /// Bundles (as applicable)
        /// </summary>
        /// <value>Bundles (as applicable)</value>
        [DataMember(Name="Bundles", EmitDefaultValue=true)]
        public List<BundleConfig> Bundles { get; set; }

        /// <summary>
        /// Nexus (as applicable)
        /// </summary>
        /// <value>Nexus (as applicable)</value>
        [DataMember(Name="Nexus", EmitDefaultValue=true)]
        public List<NexusConfig> Nexus { get; set; }

        /// <summary>
        /// Gets or Sets Overrides
        /// </summary>
        [DataMember(Name="Overrides", EmitDefaultValue=false)]
        public OverrideConfig Overrides { get; set; }

        /// <summary>
        /// Description associated with this item
        /// </summary>
        /// <value>Description associated with this item</value>
        [DataMember(Name="Description", EmitDefaultValue=true)]
        public string Description { get; set; }

        /// <summary>
        /// Error information.
        /// </summary>
        /// <value>Error information.</value>
        [DataMember(Name="Error", EmitDefaultValue=true)]
        public string Error { get; set; }

        /// <summary>
        /// Item Type  Examples:    Configuration, Bundle, Exclusion, Override
        /// </summary>
        /// <value>Item Type  Examples:    Configuration, Bundle, Exclusion, Override</value>
        [DataMember(Name="ItemType", EmitDefaultValue=true)]
        public string ItemType { get; set; }

        /// <summary>
        /// Error information.
        /// </summary>
        /// <value>Error information.</value>
        [DataMember(Name="Errors", EmitDefaultValue=true)]
        public List<Error> Errors { get; set; }

        /// <summary>
        /// Warning information.
        /// </summary>
        /// <value>Warning information.</value>
        [DataMember(Name="Warnings", EmitDefaultValue=true)]
        public List<Warning> Warnings { get; set; }

        /// <summary>
        /// Status information.
        /// </summary>
        /// <value>Status information.</value>
        [DataMember(Name="Status", EmitDefaultValue=true)]
        public List<Status> Status { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class ClientProfileConfigResponse {\n");
            sb.Append("  ProfileConfigId: ").Append(ProfileConfigId).Append("\n");
            sb.Append("  ProfileIds: ").Append(ProfileIds).Append("\n");
            sb.Append("  ClientId: ").Append(ClientId).Append("\n");
            sb.Append("  LastUpdateBy: ").Append(LastUpdateBy).Append("\n");
            sb.Append("  Active: ").Append(Active).Append("\n");
            sb.Append("  Settings: ").Append(Settings).Append("\n");
            sb.Append("  Exclusions: ").Append(Exclusions).Append("\n");
            sb.Append("  Bundles: ").Append(Bundles).Append("\n");
            sb.Append("  Nexus: ").Append(Nexus).Append("\n");
            sb.Append("  Overrides: ").Append(Overrides).Append("\n");
            sb.Append("  Description: ").Append(Description).Append("\n");
            sb.Append("  Error: ").Append(Error).Append("\n");
            sb.Append("  ItemType: ").Append(ItemType).Append("\n");
            sb.Append("  Errors: ").Append(Errors).Append("\n");
            sb.Append("  Warnings: ").Append(Warnings).Append("\n");
            sb.Append("  Status: ").Append(Status).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as ClientProfileConfigResponse);
        }

        /// <summary>
        /// Returns true if ClientProfileConfigResponse instances are equal
        /// </summary>
        /// <param name="input">Instance of ClientProfileConfigResponse to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(ClientProfileConfigResponse input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.ProfileConfigId == input.ProfileConfigId ||
                    (this.ProfileConfigId != null &&
                    this.ProfileConfigId.Equals(input.ProfileConfigId))
                ) && 
                (
                    this.ProfileIds == input.ProfileIds ||
                    this.ProfileIds != null &&
                    input.ProfileIds != null &&
                    this.ProfileIds.SequenceEqual(input.ProfileIds)
                ) && 
                (
                    this.ClientId == input.ClientId ||
                    (this.ClientId != null &&
                    this.ClientId.Equals(input.ClientId))
                ) && 
                (
                    this.LastUpdateBy == input.LastUpdateBy ||
                    (this.LastUpdateBy != null &&
                    this.LastUpdateBy.Equals(input.LastUpdateBy))
                ) && 
                (
                    this.Active == input.Active ||
                    (this.Active != null &&
                    this.Active.Equals(input.Active))
                ) && 
                (
                    this.Settings == input.Settings ||
                    (this.Settings != null &&
                    this.Settings.Equals(input.Settings))
                ) && 
                (
                    this.Exclusions == input.Exclusions ||
                    this.Exclusions != null &&
                    input.Exclusions != null &&
                    this.Exclusions.SequenceEqual(input.Exclusions)
                ) && 
                (
                    this.Bundles == input.Bundles ||
                    this.Bundles != null &&
                    input.Bundles != null &&
                    this.Bundles.SequenceEqual(input.Bundles)
                ) && 
                (
                    this.Nexus == input.Nexus ||
                    this.Nexus != null &&
                    input.Nexus != null &&
                    this.Nexus.SequenceEqual(input.Nexus)
                ) && 
                (
                    this.Overrides == input.Overrides ||
                    (this.Overrides != null &&
                    this.Overrides.Equals(input.Overrides))
                ) && 
                (
                    this.Description == input.Description ||
                    (this.Description != null &&
                    this.Description.Equals(input.Description))
                ) && 
                (
                    this.Error == input.Error ||
                    (this.Error != null &&
                    this.Error.Equals(input.Error))
                ) && 
                (
                    this.ItemType == input.ItemType ||
                    (this.ItemType != null &&
                    this.ItemType.Equals(input.ItemType))
                ) && 
                (
                    this.Errors == input.Errors ||
                    this.Errors != null &&
                    input.Errors != null &&
                    this.Errors.SequenceEqual(input.Errors)
                ) && 
                (
                    this.Warnings == input.Warnings ||
                    this.Warnings != null &&
                    input.Warnings != null &&
                    this.Warnings.SequenceEqual(input.Warnings)
                ) && 
                (
                    this.Status == input.Status ||
                    this.Status != null &&
                    input.Status != null &&
                    this.Status.SequenceEqual(input.Status)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.ProfileConfigId != null)
                    hashCode = hashCode * 59 + this.ProfileConfigId.GetHashCode();
                if (this.ProfileIds != null)
                    hashCode = hashCode * 59 + this.ProfileIds.GetHashCode();
                if (this.ClientId != null)
                    hashCode = hashCode * 59 + this.ClientId.GetHashCode();
                if (this.LastUpdateBy != null)
                    hashCode = hashCode * 59 + this.LastUpdateBy.GetHashCode();
                if (this.Active != null)
                    hashCode = hashCode * 59 + this.Active.GetHashCode();
                if (this.Settings != null)
                    hashCode = hashCode * 59 + this.Settings.GetHashCode();
                if (this.Exclusions != null)
                    hashCode = hashCode * 59 + this.Exclusions.GetHashCode();
                if (this.Bundles != null)
                    hashCode = hashCode * 59 + this.Bundles.GetHashCode();
                if (this.Nexus != null)
                    hashCode = hashCode * 59 + this.Nexus.GetHashCode();
                if (this.Overrides != null)
                    hashCode = hashCode * 59 + this.Overrides.GetHashCode();
                if (this.Description != null)
                    hashCode = hashCode * 59 + this.Description.GetHashCode();
                if (this.Error != null)
                    hashCode = hashCode * 59 + this.Error.GetHashCode();
                if (this.ItemType != null)
                    hashCode = hashCode * 59 + this.ItemType.GetHashCode();
                if (this.Errors != null)
                    hashCode = hashCode * 59 + this.Errors.GetHashCode();
                if (this.Warnings != null)
                    hashCode = hashCode * 59 + this.Warnings.GetHashCode();
                if (this.Status != null)
                    hashCode = hashCode * 59 + this.Status.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
