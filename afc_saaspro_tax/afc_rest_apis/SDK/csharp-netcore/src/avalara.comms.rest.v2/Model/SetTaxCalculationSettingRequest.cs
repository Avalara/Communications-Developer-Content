/* 
 * SaasPro
 *
 * APIs to interface with communications tax engine.<br />The API requires Basic authentication.<br />Users with access to multiple clients must also set request header parameter for <code>client_id</code>.<br />Set <code>client_profile_id</code> to specify profile to be used for taxation.
 *
 * The version of the OpenAPI document: v2
 * 
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = avalara.comms.rest.v2.Client.OpenAPIDateConverter;

namespace avalara.comms.rest.v2.Model
{
    /// <summary>
    /// Data for an invoice or quote line item.
    /// </summary>
    [DataContract]
    public partial class SetTaxCalculationSettingRequest :  IEquatable<SetTaxCalculationSettingRequest>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="SetTaxCalculationSettingRequest" /> class.
        /// </summary>
        /// <param name="profileConfigId">Profile configuration id to be used when updating an existing profile  Use null for new configuration.</param>
        /// <param name="linkProfileIds">Profile(s) to be added to configuration  Leave null to not change profiles associated with configuration settings.</param>
        /// <param name="unlinkProfileIds">Profile(s) to be added to configuration  Leave null to not change profiles associated with configuration settings.</param>
        /// <param name="clientId">Client id associated with profile(s) to be fetched  Null value will use client id submitting the request or default client id as applicable.</param>
        /// <param name="deactivate">True &#x3D; Deactivate the configuration  Requires ProfileConfigId to be provided and valid.  Automatically removes any profile mappings associated with the configuration..</param>
        /// <param name="description">Description to be applied to requested configuration.</param>
        /// <param name="replaceExistingLinks">Flag indicating existing configuration links to profile should be replaced  This only applies when one or more profiles have been specified to be linked.   - If true, mapping conflicts will be resolved by removing other links.   - If false, mapping conflicts will cause the request to fail with an error returned..</param>
        /// <param name="settings">Configuration settings (required).</param>
        /// <param name="exclusions">List of exclusions.</param>
        /// <param name="bundles">List of bundles.</param>
        /// <param name="nexus">List of nexus.</param>
        /// <param name="overrides">Overrides.</param>
        public SetTaxCalculationSettingRequest(long? profileConfigId = default(long?), List<int> linkProfileIds = default(List<int>), List<int> unlinkProfileIds = default(List<int>), int? clientId = default(int?), bool? deactivate = default(bool?), string description = default(string), bool? replaceExistingLinks = default(bool?), Configuration settings = default(Configuration), List<ExclusionConfig> exclusions = default(List<ExclusionConfig>), List<BundleConfig> bundles = default(List<BundleConfig>), List<NexusConfig> nexus = default(List<NexusConfig>), List<string> overrides = default(List<string>))
        {
            this.ProfileConfigId = profileConfigId;
            this.LinkProfileIds = linkProfileIds;
            this.UnlinkProfileIds = unlinkProfileIds;
            this.ClientId = clientId;
            this.Deactivate = deactivate;
            this.Description = description;
            this.ReplaceExistingLinks = replaceExistingLinks;
            this.Settings = settings;
            this.Exclusions = exclusions;
            this.Bundles = bundles;
            this.Nexus = nexus;
            this.Overrides = overrides;
        }
        
        /// <summary>
        /// Profile configuration id to be used when updating an existing profile  Use null for new configuration
        /// </summary>
        /// <value>Profile configuration id to be used when updating an existing profile  Use null for new configuration</value>
        [DataMember(Name="ProfileConfigId", EmitDefaultValue=true)]
        public long? ProfileConfigId { get; set; }

        /// <summary>
        /// Profile(s) to be added to configuration  Leave null to not change profiles associated with configuration settings
        /// </summary>
        /// <value>Profile(s) to be added to configuration  Leave null to not change profiles associated with configuration settings</value>
        [DataMember(Name="LinkProfileIds", EmitDefaultValue=true)]
        public List<int> LinkProfileIds { get; set; }

        /// <summary>
        /// Profile(s) to be added to configuration  Leave null to not change profiles associated with configuration settings
        /// </summary>
        /// <value>Profile(s) to be added to configuration  Leave null to not change profiles associated with configuration settings</value>
        [DataMember(Name="UnlinkProfileIds", EmitDefaultValue=true)]
        public List<int> UnlinkProfileIds { get; set; }

        /// <summary>
        /// Client id associated with profile(s) to be fetched  Null value will use client id submitting the request or default client id as applicable
        /// </summary>
        /// <value>Client id associated with profile(s) to be fetched  Null value will use client id submitting the request or default client id as applicable</value>
        [DataMember(Name="ClientId", EmitDefaultValue=true)]
        public int? ClientId { get; set; }

        /// <summary>
        /// True &#x3D; Deactivate the configuration  Requires ProfileConfigId to be provided and valid.  Automatically removes any profile mappings associated with the configuration.
        /// </summary>
        /// <value>True &#x3D; Deactivate the configuration  Requires ProfileConfigId to be provided and valid.  Automatically removes any profile mappings associated with the configuration.</value>
        [DataMember(Name="Deactivate", EmitDefaultValue=true)]
        public bool? Deactivate { get; set; }

        /// <summary>
        /// Description to be applied to requested configuration
        /// </summary>
        /// <value>Description to be applied to requested configuration</value>
        [DataMember(Name="Description", EmitDefaultValue=true)]
        public string Description { get; set; }

        /// <summary>
        /// Flag indicating existing configuration links to profile should be replaced  This only applies when one or more profiles have been specified to be linked.   - If true, mapping conflicts will be resolved by removing other links.   - If false, mapping conflicts will cause the request to fail with an error returned.
        /// </summary>
        /// <value>Flag indicating existing configuration links to profile should be replaced  This only applies when one or more profiles have been specified to be linked.   - If true, mapping conflicts will be resolved by removing other links.   - If false, mapping conflicts will cause the request to fail with an error returned.</value>
        [DataMember(Name="ReplaceExistingLinks", EmitDefaultValue=true)]
        public bool? ReplaceExistingLinks { get; set; }

        /// <summary>
        /// Configuration settings (required)
        /// </summary>
        /// <value>Configuration settings (required)</value>
        [DataMember(Name="Settings", EmitDefaultValue=true)]
        public Configuration Settings { get; set; }

        /// <summary>
        /// List of exclusions
        /// </summary>
        /// <value>List of exclusions</value>
        [DataMember(Name="Exclusions", EmitDefaultValue=true)]
        public List<ExclusionConfig> Exclusions { get; set; }

        /// <summary>
        /// List of bundles
        /// </summary>
        /// <value>List of bundles</value>
        [DataMember(Name="Bundles", EmitDefaultValue=true)]
        public List<BundleConfig> Bundles { get; set; }

        /// <summary>
        /// List of nexus
        /// </summary>
        /// <value>List of nexus</value>
        [DataMember(Name="Nexus", EmitDefaultValue=true)]
        public List<NexusConfig> Nexus { get; set; }

        /// <summary>
        /// Overrides
        /// </summary>
        /// <value>Overrides</value>
        [DataMember(Name="Overrides", EmitDefaultValue=true)]
        public List<string> Overrides { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class SetTaxCalculationSettingRequest {\n");
            sb.Append("  ProfileConfigId: ").Append(ProfileConfigId).Append("\n");
            sb.Append("  LinkProfileIds: ").Append(LinkProfileIds).Append("\n");
            sb.Append("  UnlinkProfileIds: ").Append(UnlinkProfileIds).Append("\n");
            sb.Append("  ClientId: ").Append(ClientId).Append("\n");
            sb.Append("  Deactivate: ").Append(Deactivate).Append("\n");
            sb.Append("  Description: ").Append(Description).Append("\n");
            sb.Append("  ReplaceExistingLinks: ").Append(ReplaceExistingLinks).Append("\n");
            sb.Append("  Settings: ").Append(Settings).Append("\n");
            sb.Append("  Exclusions: ").Append(Exclusions).Append("\n");
            sb.Append("  Bundles: ").Append(Bundles).Append("\n");
            sb.Append("  Nexus: ").Append(Nexus).Append("\n");
            sb.Append("  Overrides: ").Append(Overrides).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as SetTaxCalculationSettingRequest);
        }

        /// <summary>
        /// Returns true if SetTaxCalculationSettingRequest instances are equal
        /// </summary>
        /// <param name="input">Instance of SetTaxCalculationSettingRequest to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(SetTaxCalculationSettingRequest input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.ProfileConfigId == input.ProfileConfigId ||
                    (this.ProfileConfigId != null &&
                    this.ProfileConfigId.Equals(input.ProfileConfigId))
                ) && 
                (
                    this.LinkProfileIds == input.LinkProfileIds ||
                    this.LinkProfileIds != null &&
                    input.LinkProfileIds != null &&
                    this.LinkProfileIds.SequenceEqual(input.LinkProfileIds)
                ) && 
                (
                    this.UnlinkProfileIds == input.UnlinkProfileIds ||
                    this.UnlinkProfileIds != null &&
                    input.UnlinkProfileIds != null &&
                    this.UnlinkProfileIds.SequenceEqual(input.UnlinkProfileIds)
                ) && 
                (
                    this.ClientId == input.ClientId ||
                    (this.ClientId != null &&
                    this.ClientId.Equals(input.ClientId))
                ) && 
                (
                    this.Deactivate == input.Deactivate ||
                    (this.Deactivate != null &&
                    this.Deactivate.Equals(input.Deactivate))
                ) && 
                (
                    this.Description == input.Description ||
                    (this.Description != null &&
                    this.Description.Equals(input.Description))
                ) && 
                (
                    this.ReplaceExistingLinks == input.ReplaceExistingLinks ||
                    (this.ReplaceExistingLinks != null &&
                    this.ReplaceExistingLinks.Equals(input.ReplaceExistingLinks))
                ) && 
                (
                    this.Settings == input.Settings ||
                    (this.Settings != null &&
                    this.Settings.Equals(input.Settings))
                ) && 
                (
                    this.Exclusions == input.Exclusions ||
                    this.Exclusions != null &&
                    input.Exclusions != null &&
                    this.Exclusions.SequenceEqual(input.Exclusions)
                ) && 
                (
                    this.Bundles == input.Bundles ||
                    this.Bundles != null &&
                    input.Bundles != null &&
                    this.Bundles.SequenceEqual(input.Bundles)
                ) && 
                (
                    this.Nexus == input.Nexus ||
                    this.Nexus != null &&
                    input.Nexus != null &&
                    this.Nexus.SequenceEqual(input.Nexus)
                ) && 
                (
                    this.Overrides == input.Overrides ||
                    this.Overrides != null &&
                    input.Overrides != null &&
                    this.Overrides.SequenceEqual(input.Overrides)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.ProfileConfigId != null)
                    hashCode = hashCode * 59 + this.ProfileConfigId.GetHashCode();
                if (this.LinkProfileIds != null)
                    hashCode = hashCode * 59 + this.LinkProfileIds.GetHashCode();
                if (this.UnlinkProfileIds != null)
                    hashCode = hashCode * 59 + this.UnlinkProfileIds.GetHashCode();
                if (this.ClientId != null)
                    hashCode = hashCode * 59 + this.ClientId.GetHashCode();
                if (this.Deactivate != null)
                    hashCode = hashCode * 59 + this.Deactivate.GetHashCode();
                if (this.Description != null)
                    hashCode = hashCode * 59 + this.Description.GetHashCode();
                if (this.ReplaceExistingLinks != null)
                    hashCode = hashCode * 59 + this.ReplaceExistingLinks.GetHashCode();
                if (this.Settings != null)
                    hashCode = hashCode * 59 + this.Settings.GetHashCode();
                if (this.Exclusions != null)
                    hashCode = hashCode * 59 + this.Exclusions.GetHashCode();
                if (this.Bundles != null)
                    hashCode = hashCode * 59 + this.Bundles.GetHashCode();
                if (this.Nexus != null)
                    hashCode = hashCode * 59 + this.Nexus.GetHashCode();
                if (this.Overrides != null)
                    hashCode = hashCode * 59 + this.Overrides.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
