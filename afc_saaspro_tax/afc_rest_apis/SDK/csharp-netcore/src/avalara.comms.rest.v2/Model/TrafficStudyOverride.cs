/*
 * SaasPro
 *
 * APIs to interface with communications tax engine.<br />The API requires Basic authentication.<br />Users with access to multiple clients must also set request header parameter for <code>client_id</code>.<br />Set <code>client_profile_id</code> to specify profile to be used for taxation.<br /><br />Effective January 1st, 2022 all Avalara products will be enforcing TLS 1.2 server-side. Please ensure that your implementation sets a minimal of TLS 1.2 encryption when making web requests to Avalara APIs.
 *
 * The version of the OpenAPI document: v2
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = avalara.comms.rest.v2.Client.OpenAPIDateConverter;

namespace avalara.comms.rest.v2.Model
{
    /// <summary>
    /// Specifies a traffic study override
    /// </summary>
    [DataContract(Name = "TrafficStudyOverride")]
    public partial class TrafficStudyOverride : IEquatable<TrafficStudyOverride>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="TrafficStudyOverride" /> class.
        /// </summary>
        /// <param name="trafficStudyType">Defines which transaction type the traffic study override applies to.  Ref enum SafeHarborType for list..</param>
        /// <param name="safeHarborFedPcnt">Safe harbor value to be overriden.  Ref class SafeHarborTams for default values..</param>
        /// <param name="trafficStudyFedPcnt">Client provided traffic study rate (Federal) to be used instead of safe harbor..</param>
        public TrafficStudyOverride(int trafficStudyType = default(int), double? safeHarborFedPcnt = default(double?), double trafficStudyFedPcnt = default(double))
        {
            this.TrafficStudyType = trafficStudyType;
            this.SafeHarborFedPcnt = safeHarborFedPcnt;
            this.TrafficStudyFedPcnt = trafficStudyFedPcnt;
        }

        /// <summary>
        /// Defines which transaction type the traffic study override applies to.  Ref enum SafeHarborType for list.
        /// </summary>
        /// <value>Defines which transaction type the traffic study override applies to.  Ref enum SafeHarborType for list.</value>
        [DataMember(Name = "TrafficStudyType", EmitDefaultValue = false)]
        public int TrafficStudyType { get; set; }

        /// <summary>
        /// Safe harbor value to be overriden.  Ref class SafeHarborTams for default values.
        /// </summary>
        /// <value>Safe harbor value to be overriden.  Ref class SafeHarborTams for default values.</value>
        [DataMember(Name = "SafeHarborFedPcnt", EmitDefaultValue = true)]
        public double? SafeHarborFedPcnt { get; set; }

        /// <summary>
        /// Client provided traffic study rate (Federal) to be used instead of safe harbor.
        /// </summary>
        /// <value>Client provided traffic study rate (Federal) to be used instead of safe harbor.</value>
        [DataMember(Name = "TrafficStudyFedPcnt", EmitDefaultValue = false)]
        public double TrafficStudyFedPcnt { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class TrafficStudyOverride {\n");
            sb.Append("  TrafficStudyType: ").Append(TrafficStudyType).Append("\n");
            sb.Append("  SafeHarborFedPcnt: ").Append(SafeHarborFedPcnt).Append("\n");
            sb.Append("  TrafficStudyFedPcnt: ").Append(TrafficStudyFedPcnt).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as TrafficStudyOverride);
        }

        /// <summary>
        /// Returns true if TrafficStudyOverride instances are equal
        /// </summary>
        /// <param name="input">Instance of TrafficStudyOverride to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(TrafficStudyOverride input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.TrafficStudyType == input.TrafficStudyType ||
                    this.TrafficStudyType.Equals(input.TrafficStudyType)
                ) && 
                (
                    this.SafeHarborFedPcnt == input.SafeHarborFedPcnt ||
                    (this.SafeHarborFedPcnt != null &&
                    this.SafeHarborFedPcnt.Equals(input.SafeHarborFedPcnt))
                ) && 
                (
                    this.TrafficStudyFedPcnt == input.TrafficStudyFedPcnt ||
                    this.TrafficStudyFedPcnt.Equals(input.TrafficStudyFedPcnt)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                hashCode = hashCode * 59 + this.TrafficStudyType.GetHashCode();
                if (this.SafeHarborFedPcnt != null)
                    hashCode = hashCode * 59 + this.SafeHarborFedPcnt.GetHashCode();
                hashCode = hashCode * 59 + this.TrafficStudyFedPcnt.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
