/*
 * SaasPro
 *
 * APIs to interface with communications tax engine.<br />The API requires Basic authentication.<br />Users with access to multiple clients must also set request header parameter for <code>client_id</code>.<br />Set <code>client_profile_id</code> to specify profile to be used for taxation.<br /><br />Effective January 1st, 2022 all Avalara products will be enforcing TLS 1.2 server-side. Please ensure that your implementation sets a minimal of TLS 1.2 encryption when making web requests to Avalara APIs.
 *
 * The version of the OpenAPI document: v2
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = avalara.comms.rest.v2.Client.OpenAPIDateConverter;

namespace avalara.comms.rest.v2.Model
{
    /// <summary>
    /// Container class for json properties associated with v2.CalcTaxes company data
    /// </summary>
    [DataContract(Name = "CompanyData")]
    public partial class CompanyData : IEquatable<CompanyData>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="CompanyData" /> class.
        /// </summary>
        /// <param name="bscl">Business class. 0 &#x3D; ILEC, 1 &#x3D; CLEC..</param>
        /// <param name="svcl">Service class. 0 &#x3D; Primary Local, 1 &#x3D; Primary Long Distance..</param>
        /// <param name="fclt">Specifies if the carrier delivering the service has company owned facilities to provide the service..</param>
        /// <param name="frch">Indicates if the company provides services sold pursuant to a franchise agreement between the carrier and jurisdiction..</param>
        /// <param name="reg">Indicates if company is regulated..</param>
        /// <param name="excl">Exclusion list..</param>
        /// <param name="idnt">An optional company identifier for reporting.</param>
        public CompanyData(int? bscl = default(int?), int? svcl = default(int?), bool? fclt = default(bool?), bool? frch = default(bool?), bool? reg = default(bool?), List<Exclusion> excl = default(List<Exclusion>), string idnt = default(string))
        {
            this.Bscl = bscl;
            this.Svcl = svcl;
            this.Fclt = fclt;
            this.Frch = frch;
            this.Reg = reg;
            this.Excl = excl;
            this.Idnt = idnt;
        }

        /// <summary>
        /// Business class. 0 &#x3D; ILEC, 1 &#x3D; CLEC.
        /// </summary>
        /// <value>Business class. 0 &#x3D; ILEC, 1 &#x3D; CLEC.</value>
        [DataMember(Name = "bscl", EmitDefaultValue = true)]
        public int? Bscl { get; set; }

        /// <summary>
        /// Service class. 0 &#x3D; Primary Local, 1 &#x3D; Primary Long Distance.
        /// </summary>
        /// <value>Service class. 0 &#x3D; Primary Local, 1 &#x3D; Primary Long Distance.</value>
        [DataMember(Name = "svcl", EmitDefaultValue = true)]
        public int? Svcl { get; set; }

        /// <summary>
        /// Specifies if the carrier delivering the service has company owned facilities to provide the service.
        /// </summary>
        /// <value>Specifies if the carrier delivering the service has company owned facilities to provide the service.</value>
        [DataMember(Name = "fclt", EmitDefaultValue = true)]
        public bool? Fclt { get; set; }

        /// <summary>
        /// Indicates if the company provides services sold pursuant to a franchise agreement between the carrier and jurisdiction.
        /// </summary>
        /// <value>Indicates if the company provides services sold pursuant to a franchise agreement between the carrier and jurisdiction.</value>
        [DataMember(Name = "frch", EmitDefaultValue = true)]
        public bool? Frch { get; set; }

        /// <summary>
        /// Indicates if company is regulated.
        /// </summary>
        /// <value>Indicates if company is regulated.</value>
        [DataMember(Name = "reg", EmitDefaultValue = true)]
        public bool? Reg { get; set; }

        /// <summary>
        /// Exclusion list.
        /// </summary>
        /// <value>Exclusion list.</value>
        [DataMember(Name = "excl", EmitDefaultValue = true)]
        public List<Exclusion> Excl { get; set; }

        /// <summary>
        /// An optional company identifier for reporting
        /// </summary>
        /// <value>An optional company identifier for reporting</value>
        [DataMember(Name = "idnt", EmitDefaultValue = true)]
        public string Idnt { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class CompanyData {\n");
            sb.Append("  Bscl: ").Append(Bscl).Append("\n");
            sb.Append("  Svcl: ").Append(Svcl).Append("\n");
            sb.Append("  Fclt: ").Append(Fclt).Append("\n");
            sb.Append("  Frch: ").Append(Frch).Append("\n");
            sb.Append("  Reg: ").Append(Reg).Append("\n");
            sb.Append("  Excl: ").Append(Excl).Append("\n");
            sb.Append("  Idnt: ").Append(Idnt).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as CompanyData);
        }

        /// <summary>
        /// Returns true if CompanyData instances are equal
        /// </summary>
        /// <param name="input">Instance of CompanyData to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(CompanyData input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.Bscl == input.Bscl ||
                    (this.Bscl != null &&
                    this.Bscl.Equals(input.Bscl))
                ) && 
                (
                    this.Svcl == input.Svcl ||
                    (this.Svcl != null &&
                    this.Svcl.Equals(input.Svcl))
                ) && 
                (
                    this.Fclt == input.Fclt ||
                    (this.Fclt != null &&
                    this.Fclt.Equals(input.Fclt))
                ) && 
                (
                    this.Frch == input.Frch ||
                    (this.Frch != null &&
                    this.Frch.Equals(input.Frch))
                ) && 
                (
                    this.Reg == input.Reg ||
                    (this.Reg != null &&
                    this.Reg.Equals(input.Reg))
                ) && 
                (
                    this.Excl == input.Excl ||
                    this.Excl != null &&
                    input.Excl != null &&
                    this.Excl.SequenceEqual(input.Excl)
                ) && 
                (
                    this.Idnt == input.Idnt ||
                    (this.Idnt != null &&
                    this.Idnt.Equals(input.Idnt))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.Bscl != null)
                    hashCode = hashCode * 59 + this.Bscl.GetHashCode();
                if (this.Svcl != null)
                    hashCode = hashCode * 59 + this.Svcl.GetHashCode();
                if (this.Fclt != null)
                    hashCode = hashCode * 59 + this.Fclt.GetHashCode();
                if (this.Frch != null)
                    hashCode = hashCode * 59 + this.Frch.GetHashCode();
                if (this.Reg != null)
                    hashCode = hashCode * 59 + this.Reg.GetHashCode();
                if (this.Excl != null)
                    hashCode = hashCode * 59 + this.Excl.GetHashCode();
                if (this.Idnt != null)
                    hashCode = hashCode * 59 + this.Idnt.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
