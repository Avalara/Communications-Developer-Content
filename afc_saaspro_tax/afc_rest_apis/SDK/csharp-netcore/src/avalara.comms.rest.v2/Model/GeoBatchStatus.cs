/* 
 * SaasPro
 *
 * APIs to interface with communications tax engine.<br />The API requires Basic authentication.<br />Users with access to multiple clients must also set request header parameter for <code>client_id</code>.<br />Set <code>client_profile_id</code> to specify profile to be used for taxation.<br /><br />Effective January 1st, 2022 all Avalara products will be enforcing TLS 1.2 server-side. Please ensure that your implementation sets a minimal of TLS 1.2 encryption when making web requests to Avalara APIs.
 *
 * The version of the OpenAPI document: v2
 * 
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = avalara.comms.rest.v2.Client.OpenAPIDateConverter;

namespace avalara.comms.rest.v2.Model
{
    /// <summary>
    /// Individual File Status For Geo Batch result
    /// </summary>
    [DataContract]
    public partial class GeoBatchStatus :  IEquatable<GeoBatchStatus>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="GeoBatchStatus" /> class.
        /// </summary>
        /// <param name="processId">Process ID for Batch file..</param>
        /// <param name="requestDate">Request Date..</param>
        /// <param name="processingStart">Processing Start..</param>
        /// <param name="processingEnd">Processing End..</param>
        /// <param name="status">Status Of Batch File..</param>
        /// <param name="downloads">downloads.</param>
        /// <param name="error">Error information..</param>
        public GeoBatchStatus(int? processId = default(int?), DateTime? requestDate = default(DateTime?), DateTime? processingStart = default(DateTime?), DateTime? processingEnd = default(DateTime?), string status = default(string), GeoBatchDownloadResponse downloads = default(GeoBatchDownloadResponse), List<Error> error = default(List<Error>))
        {
            this.ProcessId = processId;
            this.RequestDate = requestDate;
            this.ProcessingStart = processingStart;
            this.ProcessingEnd = processingEnd;
            this.Status = status;
            this.Downloads = downloads;
            this.Error = error;
        }
        
        /// <summary>
        /// Process ID for Batch file.
        /// </summary>
        /// <value>Process ID for Batch file.</value>
        [DataMember(Name="ProcessId", EmitDefaultValue=true)]
        public int? ProcessId { get; set; }

        /// <summary>
        /// Request Date.
        /// </summary>
        /// <value>Request Date.</value>
        [DataMember(Name="RequestDate", EmitDefaultValue=true)]
        public DateTime? RequestDate { get; set; }

        /// <summary>
        /// Processing Start.
        /// </summary>
        /// <value>Processing Start.</value>
        [DataMember(Name="ProcessingStart", EmitDefaultValue=true)]
        public DateTime? ProcessingStart { get; set; }

        /// <summary>
        /// Processing End.
        /// </summary>
        /// <value>Processing End.</value>
        [DataMember(Name="ProcessingEnd", EmitDefaultValue=true)]
        public DateTime? ProcessingEnd { get; set; }

        /// <summary>
        /// Status Of Batch File.
        /// </summary>
        /// <value>Status Of Batch File.</value>
        [DataMember(Name="Status", EmitDefaultValue=true)]
        public string Status { get; set; }

        /// <summary>
        /// Gets or Sets Downloads
        /// </summary>
        [DataMember(Name="Downloads", EmitDefaultValue=false)]
        public GeoBatchDownloadResponse Downloads { get; set; }

        /// <summary>
        /// Error information.
        /// </summary>
        /// <value>Error information.</value>
        [DataMember(Name="Error", EmitDefaultValue=true)]
        public List<Error> Error { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class GeoBatchStatus {\n");
            sb.Append("  ProcessId: ").Append(ProcessId).Append("\n");
            sb.Append("  RequestDate: ").Append(RequestDate).Append("\n");
            sb.Append("  ProcessingStart: ").Append(ProcessingStart).Append("\n");
            sb.Append("  ProcessingEnd: ").Append(ProcessingEnd).Append("\n");
            sb.Append("  Status: ").Append(Status).Append("\n");
            sb.Append("  Downloads: ").Append(Downloads).Append("\n");
            sb.Append("  Error: ").Append(Error).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as GeoBatchStatus);
        }

        /// <summary>
        /// Returns true if GeoBatchStatus instances are equal
        /// </summary>
        /// <param name="input">Instance of GeoBatchStatus to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(GeoBatchStatus input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.ProcessId == input.ProcessId ||
                    (this.ProcessId != null &&
                    this.ProcessId.Equals(input.ProcessId))
                ) && 
                (
                    this.RequestDate == input.RequestDate ||
                    (this.RequestDate != null &&
                    this.RequestDate.Equals(input.RequestDate))
                ) && 
                (
                    this.ProcessingStart == input.ProcessingStart ||
                    (this.ProcessingStart != null &&
                    this.ProcessingStart.Equals(input.ProcessingStart))
                ) && 
                (
                    this.ProcessingEnd == input.ProcessingEnd ||
                    (this.ProcessingEnd != null &&
                    this.ProcessingEnd.Equals(input.ProcessingEnd))
                ) && 
                (
                    this.Status == input.Status ||
                    (this.Status != null &&
                    this.Status.Equals(input.Status))
                ) && 
                (
                    this.Downloads == input.Downloads ||
                    (this.Downloads != null &&
                    this.Downloads.Equals(input.Downloads))
                ) && 
                (
                    this.Error == input.Error ||
                    this.Error != null &&
                    input.Error != null &&
                    this.Error.SequenceEqual(input.Error)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.ProcessId != null)
                    hashCode = hashCode * 59 + this.ProcessId.GetHashCode();
                if (this.RequestDate != null)
                    hashCode = hashCode * 59 + this.RequestDate.GetHashCode();
                if (this.ProcessingStart != null)
                    hashCode = hashCode * 59 + this.ProcessingStart.GetHashCode();
                if (this.ProcessingEnd != null)
                    hashCode = hashCode * 59 + this.ProcessingEnd.GetHashCode();
                if (this.Status != null)
                    hashCode = hashCode * 59 + this.Status.GetHashCode();
                if (this.Downloads != null)
                    hashCode = hashCode * 59 + this.Downloads.GetHashCode();
                if (this.Error != null)
                    hashCode = hashCode * 59 + this.Error.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
