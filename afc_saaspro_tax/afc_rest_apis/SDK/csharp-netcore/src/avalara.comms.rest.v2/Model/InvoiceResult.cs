/*
 * SaasPro
 *
 * APIs to interface with communications tax engine.<br />The API requires Basic authentication.<br />Users with access to multiple clients must also set request header parameter for <code>client_id</code>.<br />Set <code>client_profile_id</code> to specify profile to be used for taxation.<br /><br />Effective January 1st, 2022 all Avalara products will be enforcing TLS 1.2 server-side. Please ensure that your implementation sets a minimal of TLS 1.2 encryption when making web requests to Avalara APIs.
 *
 * The version of the OpenAPI document: v2
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = avalara.comms.rest.v2.Client.OpenAPIDateConverter;

namespace avalara.comms.rest.v2.Model
{
    /// <summary>
    /// Tax calculation results for an invoice.
    /// </summary>
    [DataContract(Name = "InvoiceResult")]
    public partial class InvoiceResult : IEquatable<InvoiceResult>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="InvoiceResult" /> class.
        /// </summary>
        /// <param name="doc">Document number for invoice..</param>
        /// <param name="itms">Individual tax calculation results for each line item..</param>
        /// <param name="summ">Summarized taxes for invoice..</param>
        /// <param name="err">Error description (as applicable)..</param>
        /// <param name="incrf">incrf.</param>
        public InvoiceResult(string doc = default(string), List<LineItemResult> itms = default(List<LineItemResult>), List<SummarizedTax> summ = default(List<SummarizedTax>), List<Error> err = default(List<Error>), ReportingInformation incrf = default(ReportingInformation))
        {
            this.Doc = doc;
            this.Itms = itms;
            this.Summ = summ;
            this.Err = err;
            this.Incrf = incrf;
        }

        /// <summary>
        /// Document number for invoice.
        /// </summary>
        /// <value>Document number for invoice.</value>
        [DataMember(Name = "doc", EmitDefaultValue = true)]
        public string Doc { get; set; }

        /// <summary>
        /// Individual tax calculation results for each line item.
        /// </summary>
        /// <value>Individual tax calculation results for each line item.</value>
        [DataMember(Name = "itms", EmitDefaultValue = true)]
        public List<LineItemResult> Itms { get; set; }

        /// <summary>
        /// Summarized taxes for invoice.
        /// </summary>
        /// <value>Summarized taxes for invoice.</value>
        [DataMember(Name = "summ", EmitDefaultValue = true)]
        public List<SummarizedTax> Summ { get; set; }

        /// <summary>
        /// Error description (as applicable).
        /// </summary>
        /// <value>Error description (as applicable).</value>
        [DataMember(Name = "err", EmitDefaultValue = true)]
        public List<Error> Err { get; set; }

        /// <summary>
        /// Gets or Sets Incrf
        /// </summary>
        [DataMember(Name = "incrf", EmitDefaultValue = false)]
        public ReportingInformation Incrf { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class InvoiceResult {\n");
            sb.Append("  Doc: ").Append(Doc).Append("\n");
            sb.Append("  Itms: ").Append(Itms).Append("\n");
            sb.Append("  Summ: ").Append(Summ).Append("\n");
            sb.Append("  Err: ").Append(Err).Append("\n");
            sb.Append("  Incrf: ").Append(Incrf).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as InvoiceResult);
        }

        /// <summary>
        /// Returns true if InvoiceResult instances are equal
        /// </summary>
        /// <param name="input">Instance of InvoiceResult to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(InvoiceResult input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.Doc == input.Doc ||
                    (this.Doc != null &&
                    this.Doc.Equals(input.Doc))
                ) && 
                (
                    this.Itms == input.Itms ||
                    this.Itms != null &&
                    input.Itms != null &&
                    this.Itms.SequenceEqual(input.Itms)
                ) && 
                (
                    this.Summ == input.Summ ||
                    this.Summ != null &&
                    input.Summ != null &&
                    this.Summ.SequenceEqual(input.Summ)
                ) && 
                (
                    this.Err == input.Err ||
                    this.Err != null &&
                    input.Err != null &&
                    this.Err.SequenceEqual(input.Err)
                ) && 
                (
                    this.Incrf == input.Incrf ||
                    (this.Incrf != null &&
                    this.Incrf.Equals(input.Incrf))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.Doc != null)
                    hashCode = hashCode * 59 + this.Doc.GetHashCode();
                if (this.Itms != null)
                    hashCode = hashCode * 59 + this.Itms.GetHashCode();
                if (this.Summ != null)
                    hashCode = hashCode * 59 + this.Summ.GetHashCode();
                if (this.Err != null)
                    hashCode = hashCode * 59 + this.Err.GetHashCode();
                if (this.Incrf != null)
                    hashCode = hashCode * 59 + this.Incrf.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
