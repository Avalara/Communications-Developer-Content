/* 
 * SaasPro
 *
 * APIs to interface with communications tax engine.<br />The API requires Basic authentication.<br />Users with access to multiple clients must also set request header parameter for <code>client_id</code>.<br />Set <code>client_profile_id</code> to specify profile to be used for taxation.<br /><br />Effective January 1st, 2022 all Avalara products will be enforcing TLS 1.2 server-side. Please ensure that your implementation sets a minimal of TLS 1.2 encryption when making web requests to Avalara APIs.
 *
 * The version of the OpenAPI document: v2
 * 
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = avalara.comms.rest.v2.Client.OpenAPIDateConverter;

namespace avalara.comms.rest.v2.Model
{
    /// <summary>
    /// Response body for Geo Batch Submit File API.
    /// </summary>
    [DataContract]
    public partial class GeoBatchDownloadResponse :  IEquatable<GeoBatchDownloadResponse>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="GeoBatchDownloadResponse" /> class.
        /// </summary>
        /// <param name="inputFile">Input File Name..</param>
        /// <param name="inputFileDownload">Input File Download..</param>
        /// <param name="outputFile">Output File Name..</param>
        /// <param name="outputFileDownload">Output File Name..</param>
        public GeoBatchDownloadResponse(string inputFile = default(string), string inputFileDownload = default(string), string outputFile = default(string), string outputFileDownload = default(string))
        {
            this.InputFile = inputFile;
            this.InputFileDownload = inputFileDownload;
            this.OutputFile = outputFile;
            this.OutputFileDownload = outputFileDownload;
        }
        
        /// <summary>
        /// Input File Name.
        /// </summary>
        /// <value>Input File Name.</value>
        [DataMember(Name="InputFile", EmitDefaultValue=true)]
        public string InputFile { get; set; }

        /// <summary>
        /// Input File Download.
        /// </summary>
        /// <value>Input File Download.</value>
        [DataMember(Name="InputFileDownload", EmitDefaultValue=true)]
        public string InputFileDownload { get; set; }

        /// <summary>
        /// Output File Name.
        /// </summary>
        /// <value>Output File Name.</value>
        [DataMember(Name="OutputFile", EmitDefaultValue=true)]
        public string OutputFile { get; set; }

        /// <summary>
        /// Output File Name.
        /// </summary>
        /// <value>Output File Name.</value>
        [DataMember(Name="OutputFileDownload", EmitDefaultValue=true)]
        public string OutputFileDownload { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class GeoBatchDownloadResponse {\n");
            sb.Append("  InputFile: ").Append(InputFile).Append("\n");
            sb.Append("  InputFileDownload: ").Append(InputFileDownload).Append("\n");
            sb.Append("  OutputFile: ").Append(OutputFile).Append("\n");
            sb.Append("  OutputFileDownload: ").Append(OutputFileDownload).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as GeoBatchDownloadResponse);
        }

        /// <summary>
        /// Returns true if GeoBatchDownloadResponse instances are equal
        /// </summary>
        /// <param name="input">Instance of GeoBatchDownloadResponse to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(GeoBatchDownloadResponse input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.InputFile == input.InputFile ||
                    (this.InputFile != null &&
                    this.InputFile.Equals(input.InputFile))
                ) && 
                (
                    this.InputFileDownload == input.InputFileDownload ||
                    (this.InputFileDownload != null &&
                    this.InputFileDownload.Equals(input.InputFileDownload))
                ) && 
                (
                    this.OutputFile == input.OutputFile ||
                    (this.OutputFile != null &&
                    this.OutputFile.Equals(input.OutputFile))
                ) && 
                (
                    this.OutputFileDownload == input.OutputFileDownload ||
                    (this.OutputFileDownload != null &&
                    this.OutputFileDownload.Equals(input.OutputFileDownload))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.InputFile != null)
                    hashCode = hashCode * 59 + this.InputFile.GetHashCode();
                if (this.InputFileDownload != null)
                    hashCode = hashCode * 59 + this.InputFileDownload.GetHashCode();
                if (this.OutputFile != null)
                    hashCode = hashCode * 59 + this.OutputFile.GetHashCode();
                if (this.OutputFileDownload != null)
                    hashCode = hashCode * 59 + this.OutputFileDownload.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
