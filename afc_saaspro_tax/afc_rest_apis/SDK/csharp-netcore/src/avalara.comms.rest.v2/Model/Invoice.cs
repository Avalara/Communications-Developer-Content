/*
 * SaasPro
 *
 * APIs to interface with communications tax engine.<br />The API requires Basic authentication.<br />Users with access to multiple clients must also set request header parameter for <code>client_id</code>.<br />Set <code>client_profile_id</code> to specify profile to be used for taxation.<br /><br />Effective January 1st, 2022 all Avalara products will be enforcing TLS 1.2 server-side. Please ensure that your implementation sets a minimal of TLS 1.2 encryption when making web requests to Avalara APIs.
 *
 * The version of the OpenAPI document: v2
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = avalara.comms.rest.v2.Client.OpenAPIDateConverter;

namespace avalara.comms.rest.v2.Model
{
    /// <summary>
    /// Contains information about an invoice or quote.
    /// </summary>
    [DataContract(Name = "Invoice")]
    public partial class Invoice : IEquatable<Invoice>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="Invoice" /> class.
        /// </summary>
        /// <param name="doc">Document code..</param>
        /// <param name="cmmt">Indicates if invoice should be committed as soon as it is processed.  Default: false..</param>
        /// <param name="bill">bill.</param>
        /// <param name="cust">Customer type..</param>
        /// <param name="lfln">Indicates if customer is a Lifeline participant.  Default: false..</param>
        /// <param name="date">Invoice date..</param>
        /// <param name="exms">Tax exemptions..</param>
        /// <param name="itms">Line items..</param>
        /// <param name="invm">Indicates if all line items within invoice should be processed in invoice mode.  Default: true..</param>
        /// <param name="dtl">Indicates if individual line item taxes should be included in response.  Default: true..</param>
        /// <param name="summ">Indicates if the summarized taxes for the invoice should be included in the resonse.  Default: false..</param>
        /// <param name="opt">Optional values for invoice. Maximum of 5. Keys must be numeric from 1 to 5..</param>
        /// <param name="acct">Account reference for reporting.</param>
        /// <param name="custref">Customer Reference for reporting.</param>
        /// <param name="invn">Invoice Number reference for reporting.</param>
        /// <param name="bcyc">Bill Cycle reference for reporting.</param>
        /// <param name="bpd">bpd.</param>
        /// <param name="ccycd">Currency code for invoice.  Example: CAD &#x3D; Canadian Dollar.</param>
        public Invoice(string doc = default(string), bool? cmmt = default(bool?), Location bill = default(Location), int? cust = default(int?), bool? lfln = default(bool?), DateTime? date = default(DateTime?), List<TaxExemption> exms = default(List<TaxExemption>), List<LineItem> itms = default(List<LineItem>), bool? invm = default(bool?), bool? dtl = default(bool?), bool? summ = default(bool?), List<KeyValuePair> opt = default(List<KeyValuePair>), string acct = default(string), string custref = default(string), string invn = default(string), string bcyc = default(string), BillingPeriod bpd = default(BillingPeriod), string ccycd = default(string))
        {
            this.Doc = doc;
            this.Cmmt = cmmt;
            this.Bill = bill;
            this.Cust = cust;
            this.Lfln = lfln;
            this.Date = date;
            this.Exms = exms;
            this.Itms = itms;
            this.Invm = invm;
            this.Dtl = dtl;
            this.Summ = summ;
            this.Opt = opt;
            this.Acct = acct;
            this.Custref = custref;
            this.Invn = invn;
            this.Bcyc = bcyc;
            this.Bpd = bpd;
            this.Ccycd = ccycd;
        }

        /// <summary>
        /// Document code.
        /// </summary>
        /// <value>Document code.</value>
        [DataMember(Name = "doc", EmitDefaultValue = true)]
        public string Doc { get; set; }

        /// <summary>
        /// Indicates if invoice should be committed as soon as it is processed.  Default: false.
        /// </summary>
        /// <value>Indicates if invoice should be committed as soon as it is processed.  Default: false.</value>
        [DataMember(Name = "cmmt", EmitDefaultValue = true)]
        public bool? Cmmt { get; set; }

        /// <summary>
        /// Gets or Sets Bill
        /// </summary>
        [DataMember(Name = "bill", EmitDefaultValue = false)]
        public Location Bill { get; set; }

        /// <summary>
        /// Customer type.
        /// </summary>
        /// <value>Customer type.</value>
        [DataMember(Name = "cust", EmitDefaultValue = true)]
        public int? Cust { get; set; }

        /// <summary>
        /// Indicates if customer is a Lifeline participant.  Default: false.
        /// </summary>
        /// <value>Indicates if customer is a Lifeline participant.  Default: false.</value>
        [DataMember(Name = "lfln", EmitDefaultValue = true)]
        public bool? Lfln { get; set; }

        /// <summary>
        /// Invoice date.
        /// </summary>
        /// <value>Invoice date.</value>
        [DataMember(Name = "date", EmitDefaultValue = true)]
        public DateTime? Date { get; set; }

        /// <summary>
        /// Tax exemptions.
        /// </summary>
        /// <value>Tax exemptions.</value>
        [DataMember(Name = "exms", EmitDefaultValue = true)]
        public List<TaxExemption> Exms { get; set; }

        /// <summary>
        /// Line items.
        /// </summary>
        /// <value>Line items.</value>
        [DataMember(Name = "itms", EmitDefaultValue = true)]
        public List<LineItem> Itms { get; set; }

        /// <summary>
        /// Indicates if all line items within invoice should be processed in invoice mode.  Default: true.
        /// </summary>
        /// <value>Indicates if all line items within invoice should be processed in invoice mode.  Default: true.</value>
        [DataMember(Name = "invm", EmitDefaultValue = true)]
        public bool? Invm { get; set; }

        /// <summary>
        /// Indicates if individual line item taxes should be included in response.  Default: true.
        /// </summary>
        /// <value>Indicates if individual line item taxes should be included in response.  Default: true.</value>
        [DataMember(Name = "dtl", EmitDefaultValue = true)]
        public bool? Dtl { get; set; }

        /// <summary>
        /// Indicates if the summarized taxes for the invoice should be included in the resonse.  Default: false.
        /// </summary>
        /// <value>Indicates if the summarized taxes for the invoice should be included in the resonse.  Default: false.</value>
        [DataMember(Name = "summ", EmitDefaultValue = true)]
        public bool? Summ { get; set; }

        /// <summary>
        /// Optional values for invoice. Maximum of 5. Keys must be numeric from 1 to 5.
        /// </summary>
        /// <value>Optional values for invoice. Maximum of 5. Keys must be numeric from 1 to 5.</value>
        [DataMember(Name = "opt", EmitDefaultValue = true)]
        public List<KeyValuePair> Opt { get; set; }

        /// <summary>
        /// Account reference for reporting
        /// </summary>
        /// <value>Account reference for reporting</value>
        [DataMember(Name = "acct", EmitDefaultValue = true)]
        public string Acct { get; set; }

        /// <summary>
        /// Customer Reference for reporting
        /// </summary>
        /// <value>Customer Reference for reporting</value>
        [DataMember(Name = "custref", EmitDefaultValue = true)]
        public string Custref { get; set; }

        /// <summary>
        /// Invoice Number reference for reporting
        /// </summary>
        /// <value>Invoice Number reference for reporting</value>
        [DataMember(Name = "invn", EmitDefaultValue = true)]
        public string Invn { get; set; }

        /// <summary>
        /// Bill Cycle reference for reporting
        /// </summary>
        /// <value>Bill Cycle reference for reporting</value>
        [DataMember(Name = "bcyc", EmitDefaultValue = true)]
        public string Bcyc { get; set; }

        /// <summary>
        /// Gets or Sets Bpd
        /// </summary>
        [DataMember(Name = "bpd", EmitDefaultValue = false)]
        public BillingPeriod Bpd { get; set; }

        /// <summary>
        /// Currency code for invoice.  Example: CAD &#x3D; Canadian Dollar
        /// </summary>
        /// <value>Currency code for invoice.  Example: CAD &#x3D; Canadian Dollar</value>
        [DataMember(Name = "ccycd", EmitDefaultValue = true)]
        public string Ccycd { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class Invoice {\n");
            sb.Append("  Doc: ").Append(Doc).Append("\n");
            sb.Append("  Cmmt: ").Append(Cmmt).Append("\n");
            sb.Append("  Bill: ").Append(Bill).Append("\n");
            sb.Append("  Cust: ").Append(Cust).Append("\n");
            sb.Append("  Lfln: ").Append(Lfln).Append("\n");
            sb.Append("  Date: ").Append(Date).Append("\n");
            sb.Append("  Exms: ").Append(Exms).Append("\n");
            sb.Append("  Itms: ").Append(Itms).Append("\n");
            sb.Append("  Invm: ").Append(Invm).Append("\n");
            sb.Append("  Dtl: ").Append(Dtl).Append("\n");
            sb.Append("  Summ: ").Append(Summ).Append("\n");
            sb.Append("  Opt: ").Append(Opt).Append("\n");
            sb.Append("  Acct: ").Append(Acct).Append("\n");
            sb.Append("  Custref: ").Append(Custref).Append("\n");
            sb.Append("  Invn: ").Append(Invn).Append("\n");
            sb.Append("  Bcyc: ").Append(Bcyc).Append("\n");
            sb.Append("  Bpd: ").Append(Bpd).Append("\n");
            sb.Append("  Ccycd: ").Append(Ccycd).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as Invoice);
        }

        /// <summary>
        /// Returns true if Invoice instances are equal
        /// </summary>
        /// <param name="input">Instance of Invoice to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(Invoice input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.Doc == input.Doc ||
                    (this.Doc != null &&
                    this.Doc.Equals(input.Doc))
                ) && 
                (
                    this.Cmmt == input.Cmmt ||
                    (this.Cmmt != null &&
                    this.Cmmt.Equals(input.Cmmt))
                ) && 
                (
                    this.Bill == input.Bill ||
                    (this.Bill != null &&
                    this.Bill.Equals(input.Bill))
                ) && 
                (
                    this.Cust == input.Cust ||
                    (this.Cust != null &&
                    this.Cust.Equals(input.Cust))
                ) && 
                (
                    this.Lfln == input.Lfln ||
                    (this.Lfln != null &&
                    this.Lfln.Equals(input.Lfln))
                ) && 
                (
                    this.Date == input.Date ||
                    (this.Date != null &&
                    this.Date.Equals(input.Date))
                ) && 
                (
                    this.Exms == input.Exms ||
                    this.Exms != null &&
                    input.Exms != null &&
                    this.Exms.SequenceEqual(input.Exms)
                ) && 
                (
                    this.Itms == input.Itms ||
                    this.Itms != null &&
                    input.Itms != null &&
                    this.Itms.SequenceEqual(input.Itms)
                ) && 
                (
                    this.Invm == input.Invm ||
                    (this.Invm != null &&
                    this.Invm.Equals(input.Invm))
                ) && 
                (
                    this.Dtl == input.Dtl ||
                    (this.Dtl != null &&
                    this.Dtl.Equals(input.Dtl))
                ) && 
                (
                    this.Summ == input.Summ ||
                    (this.Summ != null &&
                    this.Summ.Equals(input.Summ))
                ) && 
                (
                    this.Opt == input.Opt ||
                    this.Opt != null &&
                    input.Opt != null &&
                    this.Opt.SequenceEqual(input.Opt)
                ) && 
                (
                    this.Acct == input.Acct ||
                    (this.Acct != null &&
                    this.Acct.Equals(input.Acct))
                ) && 
                (
                    this.Custref == input.Custref ||
                    (this.Custref != null &&
                    this.Custref.Equals(input.Custref))
                ) && 
                (
                    this.Invn == input.Invn ||
                    (this.Invn != null &&
                    this.Invn.Equals(input.Invn))
                ) && 
                (
                    this.Bcyc == input.Bcyc ||
                    (this.Bcyc != null &&
                    this.Bcyc.Equals(input.Bcyc))
                ) && 
                (
                    this.Bpd == input.Bpd ||
                    (this.Bpd != null &&
                    this.Bpd.Equals(input.Bpd))
                ) && 
                (
                    this.Ccycd == input.Ccycd ||
                    (this.Ccycd != null &&
                    this.Ccycd.Equals(input.Ccycd))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.Doc != null)
                    hashCode = hashCode * 59 + this.Doc.GetHashCode();
                if (this.Cmmt != null)
                    hashCode = hashCode * 59 + this.Cmmt.GetHashCode();
                if (this.Bill != null)
                    hashCode = hashCode * 59 + this.Bill.GetHashCode();
                if (this.Cust != null)
                    hashCode = hashCode * 59 + this.Cust.GetHashCode();
                if (this.Lfln != null)
                    hashCode = hashCode * 59 + this.Lfln.GetHashCode();
                if (this.Date != null)
                    hashCode = hashCode * 59 + this.Date.GetHashCode();
                if (this.Exms != null)
                    hashCode = hashCode * 59 + this.Exms.GetHashCode();
                if (this.Itms != null)
                    hashCode = hashCode * 59 + this.Itms.GetHashCode();
                if (this.Invm != null)
                    hashCode = hashCode * 59 + this.Invm.GetHashCode();
                if (this.Dtl != null)
                    hashCode = hashCode * 59 + this.Dtl.GetHashCode();
                if (this.Summ != null)
                    hashCode = hashCode * 59 + this.Summ.GetHashCode();
                if (this.Opt != null)
                    hashCode = hashCode * 59 + this.Opt.GetHashCode();
                if (this.Acct != null)
                    hashCode = hashCode * 59 + this.Acct.GetHashCode();
                if (this.Custref != null)
                    hashCode = hashCode * 59 + this.Custref.GetHashCode();
                if (this.Invn != null)
                    hashCode = hashCode * 59 + this.Invn.GetHashCode();
                if (this.Bcyc != null)
                    hashCode = hashCode * 59 + this.Bcyc.GetHashCode();
                if (this.Bpd != null)
                    hashCode = hashCode * 59 + this.Bpd.GetHashCode();
                if (this.Ccycd != null)
                    hashCode = hashCode * 59 + this.Ccycd.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
