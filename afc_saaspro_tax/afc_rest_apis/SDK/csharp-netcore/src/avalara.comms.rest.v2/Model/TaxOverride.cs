/*
 * SaasPro
 *
 * APIs to interface with communications tax engine.<br />The API requires Basic authentication.<br />Users with access to multiple clients must also set request header parameter for <code>client_id</code>.<br />Set <code>client_profile_id</code> to specify profile to be used for taxation.<br /><br />Effective January 1st, 2022 all Avalara products will be enforcing TLS 1.2 server-side. Please ensure that your implementation sets a minimal of TLS 1.2 encryption when making web requests to Avalara APIs.
 *
 * The version of the OpenAPI document: v2
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = avalara.comms.rest.v2.Client.OpenAPIDateConverter;

namespace avalara.comms.rest.v2.Model
{
    /// <summary>
    /// Tax rate override information.
    /// </summary>
    [DataContract(Name = "TaxOverride")]
    public partial class TaxOverride : IEquatable<TaxOverride>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="TaxOverride" /> class.
        /// </summary>
        /// <param name="loc">loc.</param>
        /// <param name="scp">Scope for override. 0 &#x3D; Country, 1 &#x3D; State, 2 &#x3D; County, 3 &#x3D; City..</param>
        /// <param name="tid">Tax type ID..</param>
        /// <param name="lvl">Tax level ID. 0 &#x3D; Federal, 1 &#x3D; State, 2 &#x3D; County, 3 &#x3D; City..</param>
        /// <param name="lvlExm">Indicates if the tax can be exempted using level exemptions..</param>
        /// <param name="brkt">Tax rate/bracket information..</param>
        public TaxOverride(Location loc = default(Location), int? scp = default(int?), int? tid = default(int?), int? lvl = default(int?), bool? lvlExm = default(bool?), List<TaxBracket> brkt = default(List<TaxBracket>))
        {
            this.Loc = loc;
            this.Scp = scp;
            this.Tid = tid;
            this.Lvl = lvl;
            this.LvlExm = lvlExm;
            this.Brkt = brkt;
        }

        /// <summary>
        /// Gets or Sets Loc
        /// </summary>
        [DataMember(Name = "loc", EmitDefaultValue = false)]
        public Location Loc { get; set; }

        /// <summary>
        /// Scope for override. 0 &#x3D; Country, 1 &#x3D; State, 2 &#x3D; County, 3 &#x3D; City.
        /// </summary>
        /// <value>Scope for override. 0 &#x3D; Country, 1 &#x3D; State, 2 &#x3D; County, 3 &#x3D; City.</value>
        [DataMember(Name = "scp", EmitDefaultValue = true)]
        public int? Scp { get; set; }

        /// <summary>
        /// Tax type ID.
        /// </summary>
        /// <value>Tax type ID.</value>
        [DataMember(Name = "tid", EmitDefaultValue = true)]
        public int? Tid { get; set; }

        /// <summary>
        /// Tax level ID. 0 &#x3D; Federal, 1 &#x3D; State, 2 &#x3D; County, 3 &#x3D; City.
        /// </summary>
        /// <value>Tax level ID. 0 &#x3D; Federal, 1 &#x3D; State, 2 &#x3D; County, 3 &#x3D; City.</value>
        [DataMember(Name = "lvl", EmitDefaultValue = true)]
        public int? Lvl { get; set; }

        /// <summary>
        /// Indicates if the tax can be exempted using level exemptions.
        /// </summary>
        /// <value>Indicates if the tax can be exempted using level exemptions.</value>
        [DataMember(Name = "lvlExm", EmitDefaultValue = true)]
        public bool? LvlExm { get; set; }

        /// <summary>
        /// Tax rate/bracket information.
        /// </summary>
        /// <value>Tax rate/bracket information.</value>
        [DataMember(Name = "brkt", EmitDefaultValue = true)]
        public List<TaxBracket> Brkt { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class TaxOverride {\n");
            sb.Append("  Loc: ").Append(Loc).Append("\n");
            sb.Append("  Scp: ").Append(Scp).Append("\n");
            sb.Append("  Tid: ").Append(Tid).Append("\n");
            sb.Append("  Lvl: ").Append(Lvl).Append("\n");
            sb.Append("  LvlExm: ").Append(LvlExm).Append("\n");
            sb.Append("  Brkt: ").Append(Brkt).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as TaxOverride);
        }

        /// <summary>
        /// Returns true if TaxOverride instances are equal
        /// </summary>
        /// <param name="input">Instance of TaxOverride to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(TaxOverride input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.Loc == input.Loc ||
                    (this.Loc != null &&
                    this.Loc.Equals(input.Loc))
                ) && 
                (
                    this.Scp == input.Scp ||
                    (this.Scp != null &&
                    this.Scp.Equals(input.Scp))
                ) && 
                (
                    this.Tid == input.Tid ||
                    (this.Tid != null &&
                    this.Tid.Equals(input.Tid))
                ) && 
                (
                    this.Lvl == input.Lvl ||
                    (this.Lvl != null &&
                    this.Lvl.Equals(input.Lvl))
                ) && 
                (
                    this.LvlExm == input.LvlExm ||
                    (this.LvlExm != null &&
                    this.LvlExm.Equals(input.LvlExm))
                ) && 
                (
                    this.Brkt == input.Brkt ||
                    this.Brkt != null &&
                    input.Brkt != null &&
                    this.Brkt.SequenceEqual(input.Brkt)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.Loc != null)
                    hashCode = hashCode * 59 + this.Loc.GetHashCode();
                if (this.Scp != null)
                    hashCode = hashCode * 59 + this.Scp.GetHashCode();
                if (this.Tid != null)
                    hashCode = hashCode * 59 + this.Tid.GetHashCode();
                if (this.Lvl != null)
                    hashCode = hashCode * 59 + this.Lvl.GetHashCode();
                if (this.LvlExm != null)
                    hashCode = hashCode * 59 + this.LvlExm.GetHashCode();
                if (this.Brkt != null)
                    hashCode = hashCode * 59 + this.Brkt.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
