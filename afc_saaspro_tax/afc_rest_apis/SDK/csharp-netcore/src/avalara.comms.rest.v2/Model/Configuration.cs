/* 
 * SaasPro
 *
 * APIs to interface with communications tax engine.<br />The API requires Basic authentication.<br />Users with access to multiple clients must also set request header parameter for <code>client_id</code>.<br />Set <code>client_profile_id</code> to specify profile to be used for taxation.
 *
 * The version of the OpenAPI document: v2
 * 
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = avalara.comms.rest.v2.Client.OpenAPIDateConverter;

namespace avalara.comms.rest.v2.Model
{
    /// <summary>
    /// Settings associated with a client profile configuration  Maybe associated with 0 to many profiles
    /// </summary>
    [DataContract]
    public partial class Configuration :  IEquatable<Configuration>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="Configuration" /> class.
        /// </summary>
        /// <param name="trafficStudyOverrides">List of Traffic Study Overrides.</param>
        /// <param name="returnNonBillable">true : Return both non-billable and billable taxes in taxation response  false (default) : Return billable taxes only in taxation response  Default: false.</param>
        /// <param name="taxOnTaxAlgorithm">Tax-on-tax algorithm to be used in tax calculations  0 : Single pass  1 (default) : IterateOnTaxAmount  2 : IterateOnTaxableMeasure.</param>
        /// <param name="selfTaxAlgorithm">Self-tax algorithm to be used in tax calculations  0 (default) : Calculate tax on individual self-taxing taxes  1 : Calculate tax on aggregate of self-taxing taxes.</param>
        public Configuration(List<TrafficStudyOverride> trafficStudyOverrides = default(List<TrafficStudyOverride>), bool? returnNonBillable = default(bool?), int? taxOnTaxAlgorithm = default(int?), int? selfTaxAlgorithm = default(int?))
        {
            this.TrafficStudyOverrides = trafficStudyOverrides;
            this.ReturnNonBillable = returnNonBillable;
            this.TaxOnTaxAlgorithm = taxOnTaxAlgorithm;
            this.SelfTaxAlgorithm = selfTaxAlgorithm;
        }
        
        /// <summary>
        /// List of Traffic Study Overrides
        /// </summary>
        /// <value>List of Traffic Study Overrides</value>
        [DataMember(Name="TrafficStudyOverrides", EmitDefaultValue=true)]
        public List<TrafficStudyOverride> TrafficStudyOverrides { get; set; }

        /// <summary>
        /// true : Return both non-billable and billable taxes in taxation response  false (default) : Return billable taxes only in taxation response  Default: false
        /// </summary>
        /// <value>true : Return both non-billable and billable taxes in taxation response  false (default) : Return billable taxes only in taxation response  Default: false</value>
        [DataMember(Name="ReturnNonBillable", EmitDefaultValue=true)]
        public bool? ReturnNonBillable { get; set; }

        /// <summary>
        /// Tax-on-tax algorithm to be used in tax calculations  0 : Single pass  1 (default) : IterateOnTaxAmount  2 : IterateOnTaxableMeasure
        /// </summary>
        /// <value>Tax-on-tax algorithm to be used in tax calculations  0 : Single pass  1 (default) : IterateOnTaxAmount  2 : IterateOnTaxableMeasure</value>
        [DataMember(Name="TaxOnTaxAlgorithm", EmitDefaultValue=true)]
        public int? TaxOnTaxAlgorithm { get; set; }

        /// <summary>
        /// Self-tax algorithm to be used in tax calculations  0 (default) : Calculate tax on individual self-taxing taxes  1 : Calculate tax on aggregate of self-taxing taxes
        /// </summary>
        /// <value>Self-tax algorithm to be used in tax calculations  0 (default) : Calculate tax on individual self-taxing taxes  1 : Calculate tax on aggregate of self-taxing taxes</value>
        [DataMember(Name="SelfTaxAlgorithm", EmitDefaultValue=true)]
        public int? SelfTaxAlgorithm { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class Configuration {\n");
            sb.Append("  TrafficStudyOverrides: ").Append(TrafficStudyOverrides).Append("\n");
            sb.Append("  ReturnNonBillable: ").Append(ReturnNonBillable).Append("\n");
            sb.Append("  TaxOnTaxAlgorithm: ").Append(TaxOnTaxAlgorithm).Append("\n");
            sb.Append("  SelfTaxAlgorithm: ").Append(SelfTaxAlgorithm).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as Configuration);
        }

        /// <summary>
        /// Returns true if Configuration instances are equal
        /// </summary>
        /// <param name="input">Instance of Configuration to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(Configuration input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.TrafficStudyOverrides == input.TrafficStudyOverrides ||
                    this.TrafficStudyOverrides != null &&
                    input.TrafficStudyOverrides != null &&
                    this.TrafficStudyOverrides.SequenceEqual(input.TrafficStudyOverrides)
                ) && 
                (
                    this.ReturnNonBillable == input.ReturnNonBillable ||
                    (this.ReturnNonBillable != null &&
                    this.ReturnNonBillable.Equals(input.ReturnNonBillable))
                ) && 
                (
                    this.TaxOnTaxAlgorithm == input.TaxOnTaxAlgorithm ||
                    (this.TaxOnTaxAlgorithm != null &&
                    this.TaxOnTaxAlgorithm.Equals(input.TaxOnTaxAlgorithm))
                ) && 
                (
                    this.SelfTaxAlgorithm == input.SelfTaxAlgorithm ||
                    (this.SelfTaxAlgorithm != null &&
                    this.SelfTaxAlgorithm.Equals(input.SelfTaxAlgorithm))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.TrafficStudyOverrides != null)
                    hashCode = hashCode * 59 + this.TrafficStudyOverrides.GetHashCode();
                if (this.ReturnNonBillable != null)
                    hashCode = hashCode * 59 + this.ReturnNonBillable.GetHashCode();
                if (this.TaxOnTaxAlgorithm != null)
                    hashCode = hashCode * 59 + this.TaxOnTaxAlgorithm.GetHashCode();
                if (this.SelfTaxAlgorithm != null)
                    hashCode = hashCode * 59 + this.SelfTaxAlgorithm.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
