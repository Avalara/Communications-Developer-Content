/*
 * SaasPro
 *
 * APIs to interface with communications tax engine.<br />The API requires Basic authentication.<br />Users with access to multiple clients must also set request header parameter for <code>client_id</code>.<br />Set <code>client_profile_id</code> to specify profile to be used for taxation.<br /><br />Effective January 1st, 2022 all Avalara products will be enforcing TLS 1.2 server-side. Please ensure that your implementation sets a minimal of TLS 1.2 encryption when making web requests to Avalara APIs.
 *
 * The version of the OpenAPI document: v2
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = avalara.comms.rest.v2.Client.OpenAPIDateConverter;

namespace avalara.comms.rest.v2.Model
{
    /// <summary>
    /// Tax exemption data.
    /// </summary>
    [DataContract(Name = "TaxExemption")]
    public partial class TaxExemption : IEquatable<TaxExemption>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="TaxExemption" /> class.
        /// </summary>
        /// <param name="frc">Override level exempt flag on wildcard tax type exemptions..</param>
        /// <param name="loc">loc.</param>
        /// <param name="tpe">Tax type to exempt.  Tax type exemptions and Category exemptions are mutually exclusive..</param>
        /// <param name="lvl">Tax level ID..</param>
        /// <param name="cat">Tax category to exempt. Tax type exemptions and Category exemptions are mutually exclusive..</param>
        /// <param name="dom">Exemption Domain.  This is the jurisdiction level in which the  exemption jurisdiction must match the taxing jurisdiction..</param>
        /// <param name="scp">Exemption Scope.  This defines the tax levels in which the  taxes will be considered as candidates for exemption..</param>
        /// <param name="exnb">Exempt non-billable flag.  Determines if non-billable taxes are  to be considered as candidates for exemption..</param>
        public TaxExemption(bool? frc = default(bool?), Location loc = default(Location), int? tpe = default(int?), int? lvl = default(int?), int? cat = default(int?), int? dom = default(int?), int? scp = default(int?), bool? exnb = default(bool?))
        {
            this.Frc = frc;
            this.Loc = loc;
            this.Tpe = tpe;
            this.Lvl = lvl;
            this.Cat = cat;
            this.Dom = dom;
            this.Scp = scp;
            this.Exnb = exnb;
        }

        /// <summary>
        /// Override level exempt flag on wildcard tax type exemptions.
        /// </summary>
        /// <value>Override level exempt flag on wildcard tax type exemptions.</value>
        [DataMember(Name = "frc", EmitDefaultValue = true)]
        public bool? Frc { get; set; }

        /// <summary>
        /// Gets or Sets Loc
        /// </summary>
        [DataMember(Name = "loc", EmitDefaultValue = false)]
        public Location Loc { get; set; }

        /// <summary>
        /// Tax type to exempt.  Tax type exemptions and Category exemptions are mutually exclusive.
        /// </summary>
        /// <value>Tax type to exempt.  Tax type exemptions and Category exemptions are mutually exclusive.</value>
        [DataMember(Name = "tpe", EmitDefaultValue = true)]
        public int? Tpe { get; set; }

        /// <summary>
        /// Tax level ID.
        /// </summary>
        /// <value>Tax level ID.</value>
        [DataMember(Name = "lvl", EmitDefaultValue = true)]
        public int? Lvl { get; set; }

        /// <summary>
        /// Tax category to exempt. Tax type exemptions and Category exemptions are mutually exclusive.
        /// </summary>
        /// <value>Tax category to exempt. Tax type exemptions and Category exemptions are mutually exclusive.</value>
        [DataMember(Name = "cat", EmitDefaultValue = true)]
        public int? Cat { get; set; }

        /// <summary>
        /// Exemption Domain.  This is the jurisdiction level in which the  exemption jurisdiction must match the taxing jurisdiction.
        /// </summary>
        /// <value>Exemption Domain.  This is the jurisdiction level in which the  exemption jurisdiction must match the taxing jurisdiction.</value>
        [DataMember(Name = "dom", EmitDefaultValue = true)]
        public int? Dom { get; set; }

        /// <summary>
        /// Exemption Scope.  This defines the tax levels in which the  taxes will be considered as candidates for exemption.
        /// </summary>
        /// <value>Exemption Scope.  This defines the tax levels in which the  taxes will be considered as candidates for exemption.</value>
        [DataMember(Name = "scp", EmitDefaultValue = true)]
        public int? Scp { get; set; }

        /// <summary>
        /// Exempt non-billable flag.  Determines if non-billable taxes are  to be considered as candidates for exemption.
        /// </summary>
        /// <value>Exempt non-billable flag.  Determines if non-billable taxes are  to be considered as candidates for exemption.</value>
        [DataMember(Name = "exnb", EmitDefaultValue = true)]
        public bool? Exnb { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class TaxExemption {\n");
            sb.Append("  Frc: ").Append(Frc).Append("\n");
            sb.Append("  Loc: ").Append(Loc).Append("\n");
            sb.Append("  Tpe: ").Append(Tpe).Append("\n");
            sb.Append("  Lvl: ").Append(Lvl).Append("\n");
            sb.Append("  Cat: ").Append(Cat).Append("\n");
            sb.Append("  Dom: ").Append(Dom).Append("\n");
            sb.Append("  Scp: ").Append(Scp).Append("\n");
            sb.Append("  Exnb: ").Append(Exnb).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as TaxExemption);
        }

        /// <summary>
        /// Returns true if TaxExemption instances are equal
        /// </summary>
        /// <param name="input">Instance of TaxExemption to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(TaxExemption input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.Frc == input.Frc ||
                    (this.Frc != null &&
                    this.Frc.Equals(input.Frc))
                ) && 
                (
                    this.Loc == input.Loc ||
                    (this.Loc != null &&
                    this.Loc.Equals(input.Loc))
                ) && 
                (
                    this.Tpe == input.Tpe ||
                    (this.Tpe != null &&
                    this.Tpe.Equals(input.Tpe))
                ) && 
                (
                    this.Lvl == input.Lvl ||
                    (this.Lvl != null &&
                    this.Lvl.Equals(input.Lvl))
                ) && 
                (
                    this.Cat == input.Cat ||
                    (this.Cat != null &&
                    this.Cat.Equals(input.Cat))
                ) && 
                (
                    this.Dom == input.Dom ||
                    (this.Dom != null &&
                    this.Dom.Equals(input.Dom))
                ) && 
                (
                    this.Scp == input.Scp ||
                    (this.Scp != null &&
                    this.Scp.Equals(input.Scp))
                ) && 
                (
                    this.Exnb == input.Exnb ||
                    (this.Exnb != null &&
                    this.Exnb.Equals(input.Exnb))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.Frc != null)
                    hashCode = hashCode * 59 + this.Frc.GetHashCode();
                if (this.Loc != null)
                    hashCode = hashCode * 59 + this.Loc.GetHashCode();
                if (this.Tpe != null)
                    hashCode = hashCode * 59 + this.Tpe.GetHashCode();
                if (this.Lvl != null)
                    hashCode = hashCode * 59 + this.Lvl.GetHashCode();
                if (this.Cat != null)
                    hashCode = hashCode * 59 + this.Cat.GetHashCode();
                if (this.Dom != null)
                    hashCode = hashCode * 59 + this.Dom.GetHashCode();
                if (this.Scp != null)
                    hashCode = hashCode * 59 + this.Scp.GetHashCode();
                if (this.Exnb != null)
                    hashCode = hashCode * 59 + this.Exnb.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
