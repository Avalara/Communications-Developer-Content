/*
 * SaasPro
 *
 * APIs to interface with communications tax engine.<br />The API requires Basic authentication.<br />Users with access to multiple clients must also set request header parameter for <code>client_id</code>.<br />Set <code>client_profile_id</code> to specify profile to be used for taxation.<br /><br />Effective January 1st, 2022 all Avalara products will be enforcing TLS 1.2 server-side. Please ensure that your implementation sets a minimal of TLS 1.2 encryption when making web requests to Avalara APIs.
 *
 * The version of the OpenAPI document: v2
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

using System;
using System.IO;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.Reflection;
using RestSharp;
using Xunit;

using avalara.comms.rest.v2.Client;
using avalara.comms.rest.v2.Api;
// uncomment below to import models
//using avalara.comms.rest.v2.Model;

namespace avalara.comms.rest.v2.Test.Api
{
    /// <summary>
    ///  Class for testing LookupsApi
    /// </summary>
    /// <remarks>
    /// This file is automatically generated by OpenAPI Generator (https://openapi-generator.tech).
    /// Please update the test case below to test the API endpoint.
    /// </remarks>
    public class LookupsApiTests : IDisposable
    {
        private LookupsApi instance;

        public LookupsApiTests()
        {
            instance = new LookupsApi();
        }

        public void Dispose()
        {
            // Cleanup when everything is done.
        }

        /// <summary>
        /// Test an instance of LookupsApi
        /// </summary>
        [Fact]
        public void InstanceTest()
        {
            // TODO uncomment below to test 'IsType' LookupsApi
            //Assert.IsType<LookupsApi>(instance);
        }

        /// <summary>
        /// Test ApiV2AfcLocationPCodeGet
        /// </summary>
        [Fact]
        public void ApiV2AfcLocationPCodeGetTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //int pCode = null;
            //var response = instance.ApiV2AfcLocationPCodeGet(pCode);
            //Assert.IsType<PCodeLookupResult>(response);
        }

        /// <summary>
        /// Test ApiV2AfcPrimaryPCodeGet
        /// </summary>
        [Fact]
        public void ApiV2AfcPrimaryPCodeGetTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //int pCode = null;
            //var response = instance.ApiV2AfcPrimaryPCodeGet(pCode);
            //Assert.IsType<PCodeLookupResult>(response);
        }

        /// <summary>
        /// Test ApiV2AfcServiceinfoGet
        /// </summary>
        [Fact]
        public void ApiV2AfcServiceinfoGetTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //var response = instance.ApiV2AfcServiceinfoGet();
            //Assert.IsType<ServiceInfo>(response);
        }

        /// <summary>
        /// Test ApiV2AfcTaxtypeTaxTypeGet
        /// </summary>
        [Fact]
        public void ApiV2AfcTaxtypeTaxTypeGetTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string taxType = null;
            //var response = instance.ApiV2AfcTaxtypeTaxTypeGet(taxType);
            //Assert.IsType<List<TaxTypeData>>(response);
        }

        /// <summary>
        /// Test ApiV2AfcTspairsGet
        /// </summary>
        [Fact]
        public void ApiV2AfcTspairsGetTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //var response = instance.ApiV2AfcTspairsGet();
            //Assert.IsType<List<TsPairData>>(response);
        }
    }
}
