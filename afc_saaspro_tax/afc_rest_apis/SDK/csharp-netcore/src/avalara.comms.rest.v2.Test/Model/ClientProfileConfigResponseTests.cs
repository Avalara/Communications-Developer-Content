/* 
 * SaasPro
 *
 * APIs to interface with communications tax engine.<br />The API requires Basic authentication.<br />Users with access to multiple clients must also set request header parameter for <code>client_id</code>.<br />Set <code>client_profile_id</code> to specify profile to be used for taxation.<br /><br />Effective January 1st, 2022 all Avalara products will be enforcing TLS 1.2 server-side. Please ensure that your implementation sets a minimal of TLS 1.2 encryption when making web requests to Avalara APIs.
 *
 * The version of the OpenAPI document: v2
 * 
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using Xunit;

using System;
using System.Linq;
using System.IO;
using System.Collections.Generic;
using avalara.comms.rest.v2.Api;
using avalara.comms.rest.v2.Model;
using avalara.comms.rest.v2.Client;
using System.Reflection;
using Newtonsoft.Json;

namespace avalara.comms.rest.v2.Test
{
    /// <summary>
    ///  Class for testing ClientProfileConfigResponse
    /// </summary>
    /// <remarks>
    /// This file is automatically generated by OpenAPI Generator (https://openapi-generator.tech).
    /// Please update the test case below to test the model.
    /// </remarks>
    public class ClientProfileConfigResponseTests : IDisposable
    {
        // TODO uncomment below to declare an instance variable for ClientProfileConfigResponse
        //private ClientProfileConfigResponse instance;

        public ClientProfileConfigResponseTests()
        {
            // TODO uncomment below to create an instance of ClientProfileConfigResponse
            //instance = new ClientProfileConfigResponse();
        }

        public void Dispose()
        {
            // Cleanup when everything is done.
        }

        /// <summary>
        /// Test an instance of ClientProfileConfigResponse
        /// </summary>
        [Fact]
        public void ClientProfileConfigResponseInstanceTest()
        {
            // TODO uncomment below to test "IsInstanceOfType" ClientProfileConfigResponse
            //Assert.IsInstanceOfType<ClientProfileConfigResponse> (instance, "variable 'instance' is a ClientProfileConfigResponse");
        }


        /// <summary>
        /// Test the property 'ProfileConfigId'
        /// </summary>
        [Fact]
        public void ProfileConfigIdTest()
        {
            // TODO unit test for the property 'ProfileConfigId'
        }
        /// <summary>
        /// Test the property 'ProfileIds'
        /// </summary>
        [Fact]
        public void ProfileIdsTest()
        {
            // TODO unit test for the property 'ProfileIds'
        }
        /// <summary>
        /// Test the property 'ClientId'
        /// </summary>
        [Fact]
        public void ClientIdTest()
        {
            // TODO unit test for the property 'ClientId'
        }
        /// <summary>
        /// Test the property 'LastUpdateBy'
        /// </summary>
        [Fact]
        public void LastUpdateByTest()
        {
            // TODO unit test for the property 'LastUpdateBy'
        }
        /// <summary>
        /// Test the property 'Active'
        /// </summary>
        [Fact]
        public void ActiveTest()
        {
            // TODO unit test for the property 'Active'
        }
        /// <summary>
        /// Test the property 'Settings'
        /// </summary>
        [Fact]
        public void SettingsTest()
        {
            // TODO unit test for the property 'Settings'
        }
        /// <summary>
        /// Test the property 'Exclusions'
        /// </summary>
        [Fact]
        public void ExclusionsTest()
        {
            // TODO unit test for the property 'Exclusions'
        }
        /// <summary>
        /// Test the property 'Bundles'
        /// </summary>
        [Fact]
        public void BundlesTest()
        {
            // TODO unit test for the property 'Bundles'
        }
        /// <summary>
        /// Test the property 'Nexus'
        /// </summary>
        [Fact]
        public void NexusTest()
        {
            // TODO unit test for the property 'Nexus'
        }
        /// <summary>
        /// Test the property 'Overrides'
        /// </summary>
        [Fact]
        public void OverridesTest()
        {
            // TODO unit test for the property 'Overrides'
        }
        /// <summary>
        /// Test the property 'Description'
        /// </summary>
        [Fact]
        public void DescriptionTest()
        {
            // TODO unit test for the property 'Description'
        }
        /// <summary>
        /// Test the property 'Error'
        /// </summary>
        [Fact]
        public void ErrorTest()
        {
            // TODO unit test for the property 'Error'
        }
        /// <summary>
        /// Test the property 'ItemType'
        /// </summary>
        [Fact]
        public void ItemTypeTest()
        {
            // TODO unit test for the property 'ItemType'
        }
        /// <summary>
        /// Test the property 'Errors'
        /// </summary>
        [Fact]
        public void ErrorsTest()
        {
            // TODO unit test for the property 'Errors'
        }
        /// <summary>
        /// Test the property 'Warnings'
        /// </summary>
        [Fact]
        public void WarningsTest()
        {
            // TODO unit test for the property 'Warnings'
        }
        /// <summary>
        /// Test the property 'Status'
        /// </summary>
        [Fact]
        public void StatusTest()
        {
            // TODO unit test for the property 'Status'
        }

    }

}
