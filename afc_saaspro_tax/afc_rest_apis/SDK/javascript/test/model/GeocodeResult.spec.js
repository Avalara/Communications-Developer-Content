/**
 * SaasPro
 * APIs to interface with communications tax engine.<br />The API requires Basic authentication.<br />Users with access to multiple clients must also set request header parameter for <code>client_id</code>.<br />Set <code>client_profile_id</code> to specify profile to be used for taxation.
 *
 * The version of the OpenAPI document: v2
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

(function(root, factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD.
    define(['expect.js', process.cwd()+'/src/index'], factory);
  } else if (typeof module === 'object' && module.exports) {
    // CommonJS-like environments that support module.exports, like Node.
    factory(require('expect.js'), require(process.cwd()+'/src/index'));
  } else {
    // Browser globals (root is window)
    factory(root.expect, root.SaasPro);
  }
}(this, function(expect, SaasPro) {
  'use strict';

  var instance;

  beforeEach(function() {
    instance = new SaasPro.GeocodeResult();
  });

  var getProperty = function(object, getter, property) {
    // Use getter method if present; otherwise, get the property directly.
    if (typeof object[getter] === 'function')
      return object[getter]();
    else
      return object[property];
  }

  var setProperty = function(object, setter, property, value) {
    // Use setter method if present; otherwise, set the property directly.
    if (typeof object[setter] === 'function')
      object[setter](value);
    else
      object[property] = value;
  }

  describe('GeocodeResult', function() {
    it('should create an instance of GeocodeResult', function() {
      // uncomment below and update the code to test GeocodeResult
      //var instane = new SaasPro.GeocodeResult();
      //expect(instance).to.be.a(SaasPro.GeocodeResult);
    });

    it('should have the property ref (base name: "ref")', function() {
      // uncomment below and update the code to test the property ref
      //var instane = new SaasPro.GeocodeResult();
      //expect(instance).to.be();
    });

    it('should have the property cass (base name: "cass")', function() {
      // uncomment below and update the code to test the property cass
      //var instane = new SaasPro.GeocodeResult();
      //expect(instance).to.be();
    });

    it('should have the property cBlk (base name: "cBlk")', function() {
      // uncomment below and update the code to test the property cBlk
      //var instane = new SaasPro.GeocodeResult();
      //expect(instance).to.be();
    });

    it('should have the property cTrc (base name: "cTrc")', function() {
      // uncomment below and update the code to test the property cTrc
      //var instane = new SaasPro.GeocodeResult();
      //expect(instance).to.be();
    });

    it('should have the property cnty (base name: "cnty")', function() {
      // uncomment below and update the code to test the property cnty
      //var instane = new SaasPro.GeocodeResult();
      //expect(instance).to.be();
    });

    it('should have the property feat (base name: "feat")', function() {
      // uncomment below and update the code to test the property feat
      //var instane = new SaasPro.GeocodeResult();
      //expect(instance).to.be();
    });

    it('should have the property fips (base name: "fips")', function() {
      // uncomment below and update the code to test the property fips
      //var instane = new SaasPro.GeocodeResult();
      //expect(instance).to.be();
    });

    it('should have the property inc (base name: "inc")', function() {
      // uncomment below and update the code to test the property inc
      //var instane = new SaasPro.GeocodeResult();
      //expect(instance).to.be();
    });

    it('should have the property jur (base name: "jur")', function() {
      // uncomment below and update the code to test the property jur
      //var instane = new SaasPro.GeocodeResult();
      //expect(instance).to.be();
    });

    it('should have the property lat (base name: "lat")', function() {
      // uncomment below and update the code to test the property lat
      //var instane = new SaasPro.GeocodeResult();
      //expect(instance).to.be();
    });

    it('should have the property _long (base name: "long")', function() {
      // uncomment below and update the code to test the property _long
      //var instane = new SaasPro.GeocodeResult();
      //expect(instance).to.be();
    });

    it('should have the property pcd (base name: "pcd")', function() {
      // uncomment below and update the code to test the property pcd
      //var instane = new SaasPro.GeocodeResult();
      //expect(instance).to.be();
    });

    it('should have the property scr (base name: "scr")', function() {
      // uncomment below and update the code to test the property scr
      //var instane = new SaasPro.GeocodeResult();
      //expect(instance).to.be();
    });

    it('should have the property err (base name: "err")', function() {
      // uncomment below and update the code to test the property err
      //var instane = new SaasPro.GeocodeResult();
      //expect(instance).to.be();
    });

  });

}));
