/**
 * SaasPro
 * APIs to interface with communications tax engine.<br />The API requires Basic authentication.<br />Users with access to multiple clients must also set request header parameter for <code>client_id</code>.<br />Set <code>client_profile_id</code> to specify profile to be used for taxation.
 *
 * The version of the OpenAPI document: v2
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

(function(root, factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD.
    define(['expect.js', process.cwd()+'/src/index'], factory);
  } else if (typeof module === 'object' && module.exports) {
    // CommonJS-like environments that support module.exports, like Node.
    factory(require('expect.js'), require(process.cwd()+'/src/index'));
  } else {
    // Browser globals (root is window)
    factory(root.expect, root.SaasPro);
  }
}(this, function(expect, SaasPro) {
  'use strict';

  var instance;

  beforeEach(function() {
    instance = new SaasPro.TaxCalculationSettingsResponse();
  });

  var getProperty = function(object, getter, property) {
    // Use getter method if present; otherwise, get the property directly.
    if (typeof object[getter] === 'function')
      return object[getter]();
    else
      return object[property];
  }

  var setProperty = function(object, setter, property, value) {
    // Use setter method if present; otherwise, set the property directly.
    if (typeof object[setter] === 'function')
      object[setter](value);
    else
      object[property] = value;
  }

  describe('TaxCalculationSettingsResponse', function() {
    it('should create an instance of TaxCalculationSettingsResponse', function() {
      // uncomment below and update the code to test TaxCalculationSettingsResponse
      //var instane = new SaasPro.TaxCalculationSettingsResponse();
      //expect(instance).to.be.a(SaasPro.TaxCalculationSettingsResponse);
    });

    it('should have the property profileConfigId (base name: "ProfileConfigId")', function() {
      // uncomment below and update the code to test the property profileConfigId
      //var instane = new SaasPro.TaxCalculationSettingsResponse();
      //expect(instance).to.be();
    });

    it('should have the property profileIds (base name: "ProfileIds")', function() {
      // uncomment below and update the code to test the property profileIds
      //var instane = new SaasPro.TaxCalculationSettingsResponse();
      //expect(instance).to.be();
    });

    it('should have the property clientId (base name: "ClientId")', function() {
      // uncomment below and update the code to test the property clientId
      //var instane = new SaasPro.TaxCalculationSettingsResponse();
      //expect(instance).to.be();
    });

    it('should have the property lastUpdateBy (base name: "LastUpdateBy")', function() {
      // uncomment below and update the code to test the property lastUpdateBy
      //var instane = new SaasPro.TaxCalculationSettingsResponse();
      //expect(instance).to.be();
    });

    it('should have the property active (base name: "Active")', function() {
      // uncomment below and update the code to test the property active
      //var instane = new SaasPro.TaxCalculationSettingsResponse();
      //expect(instance).to.be();
    });

    it('should have the property settings (base name: "Settings")', function() {
      // uncomment below and update the code to test the property settings
      //var instane = new SaasPro.TaxCalculationSettingsResponse();
      //expect(instance).to.be();
    });

    it('should have the property exclusions (base name: "Exclusions")', function() {
      // uncomment below and update the code to test the property exclusions
      //var instane = new SaasPro.TaxCalculationSettingsResponse();
      //expect(instance).to.be();
    });

    it('should have the property bundles (base name: "Bundles")', function() {
      // uncomment below and update the code to test the property bundles
      //var instane = new SaasPro.TaxCalculationSettingsResponse();
      //expect(instance).to.be();
    });

    it('should have the property nexus (base name: "Nexus")', function() {
      // uncomment below and update the code to test the property nexus
      //var instane = new SaasPro.TaxCalculationSettingsResponse();
      //expect(instance).to.be();
    });

    it('should have the property overrides (base name: "Overrides")', function() {
      // uncomment below and update the code to test the property overrides
      //var instane = new SaasPro.TaxCalculationSettingsResponse();
      //expect(instance).to.be();
    });

    it('should have the property description (base name: "Description")', function() {
      // uncomment below and update the code to test the property description
      //var instane = new SaasPro.TaxCalculationSettingsResponse();
      //expect(instance).to.be();
    });

    it('should have the property error (base name: "Error")', function() {
      // uncomment below and update the code to test the property error
      //var instane = new SaasPro.TaxCalculationSettingsResponse();
      //expect(instance).to.be();
    });

    it('should have the property itemType (base name: "ItemType")', function() {
      // uncomment below and update the code to test the property itemType
      //var instane = new SaasPro.TaxCalculationSettingsResponse();
      //expect(instance).to.be();
    });

    it('should have the property errors (base name: "Errors")', function() {
      // uncomment below and update the code to test the property errors
      //var instane = new SaasPro.TaxCalculationSettingsResponse();
      //expect(instance).to.be();
    });

    it('should have the property warnings (base name: "Warnings")', function() {
      // uncomment below and update the code to test the property warnings
      //var instane = new SaasPro.TaxCalculationSettingsResponse();
      //expect(instance).to.be();
    });

    it('should have the property status (base name: "Status")', function() {
      // uncomment below and update the code to test the property status
      //var instane = new SaasPro.TaxCalculationSettingsResponse();
      //expect(instance).to.be();
    });

  });

}));
