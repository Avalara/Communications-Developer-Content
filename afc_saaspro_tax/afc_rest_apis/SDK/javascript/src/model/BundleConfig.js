/**
 * SaasPro
 * APIs to interface with communications tax engine.<br />The API requires Basic authentication.<br />Users with access to multiple clients must also set request header parameter for <code>client_id</code>.<br />Set <code>client_profile_id</code> to specify profile to be used for taxation.<br /><br />Effective January 1st, 2022 all Avalara products will be enforcing TLS 1.2 server-side. Please ensure that your implementation sets a minimal of TLS 1.2 encryption when making web requests to Avalara APIs.
 *
 * The version of the OpenAPI document: v2
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import BundleItem from './BundleItem';

/**
 * The BundleConfig model module.
 * @module model/BundleConfig
 * @version v2
 */
class BundleConfig {
    /**
     * Constructs a new <code>BundleConfig</code>.
     * Bundles associated with a client profile configuration  Maybe associated with 0 to many profiles
     * @alias module:model/BundleConfig
     */
    constructor() { 
        
        BundleConfig.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>BundleConfig</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/BundleConfig} obj Optional instance to populate.
     * @return {module:model/BundleConfig} The populated <code>BundleConfig</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new BundleConfig();

            if (data.hasOwnProperty('BundlePackage')) {
                obj['BundlePackage'] = ApiClient.convertToType(data['BundlePackage'], 'Number');
            }
            if (data.hasOwnProperty('BundleId')) {
                obj['BundleId'] = ApiClient.convertToType(data['BundleId'], 'Number');
            }
            if (data.hasOwnProperty('Description')) {
                obj['Description'] = ApiClient.convertToType(data['Description'], 'String');
            }
            if (data.hasOwnProperty('BundleItems')) {
                obj['BundleItems'] = ApiClient.convertToType(data['BundleItems'], [BundleItem]);
            }
            if (data.hasOwnProperty('Version')) {
                obj['Version'] = ApiClient.convertToType(data['Version'], 'String');
            }
        }
        return obj;
    }


}

/**
 * Bundle Package - example:  20000
 * @member {Number} BundlePackage
 */
BundleConfig.prototype['BundlePackage'] = undefined;

/**
 * Bundle Id - example:  20001
 * @member {Number} BundleId
 */
BundleConfig.prototype['BundleId'] = undefined;

/**
 * Bundle Description
 * @member {String} Description
 */
BundleConfig.prototype['Description'] = undefined;

/**
 * Bundled items - percentage should add up to 100% (as applicable)
 * @member {Array.<module:model/BundleItem>} BundleItems
 */
BundleConfig.prototype['BundleItems'] = undefined;

/**
 * Version for bundle - intended to allow changes to format   without having to perform expensive SQL updates on existing bundles
 * @member {String} Version
 */
BundleConfig.prototype['Version'] = undefined;






export default BundleConfig;

