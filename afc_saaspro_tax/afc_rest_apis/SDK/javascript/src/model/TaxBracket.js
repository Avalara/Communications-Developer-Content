/**
 * SaasPro
 * APIs to interface with communications tax engine.<br />The API requires Basic authentication.<br />Users with access to multiple clients must also set request header parameter for <code>client_id</code>.<br />Set <code>client_profile_id</code> to specify profile to be used for taxation.<br /><br />Effective January 1st, 2022 all Avalara products will be enforcing TLS 1.2 server-side. Please ensure that your implementation sets a minimal of TLS 1.2 encryption when making web requests to Avalara APIs.
 *
 * The version of the OpenAPI document: v2
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';

/**
 * The TaxBracket model module.
 * @module model/TaxBracket
 * @version v2
 */
class TaxBracket {
    /**
     * Constructs a new <code>TaxBracket</code>.
     * Rate information for a tax bracket.
     * @alias module:model/TaxBracket
     */
    constructor() { 
        
        TaxBracket.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>TaxBracket</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/TaxBracket} obj Optional instance to populate.
     * @return {module:model/TaxBracket} The populated <code>TaxBracket</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new TaxBracket();

            if (data.hasOwnProperty('rate')) {
                obj['rate'] = ApiClient.convertToType(data['rate'], 'Number');
            }
            if (data.hasOwnProperty('max')) {
                obj['max'] = ApiClient.convertToType(data['max'], 'Number');
            }
        }
        return obj;
    }


}

/**
 * Tax rate. Value cannot be negative. For rated taxes, value must be from 0 to 1. Otherwise, value may be larger.
 * @member {Number} rate
 */
TaxBracket.prototype['rate'] = undefined;

/**
 * Maximum base that this rate applies to.
 * @member {Number} max
 */
TaxBracket.prototype['max'] = undefined;






export default TaxBracket;

