/**
 * SaasPro
 * APIs to interface with communications tax engine.<br />The API requires Basic authentication.<br />Users with access to multiple clients must also set request header parameter for <code>client_id</code>.<br />Set <code>client_profile_id</code> to specify profile to be used for taxation.
 *
 * The version of the OpenAPI document: v2
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import Location from './Location';
import TaxBracket from './TaxBracket';

/**
 * The TaxOverride model module.
 * @module model/TaxOverride
 * @version v2
 */
class TaxOverride {
    /**
     * Constructs a new <code>TaxOverride</code>.
     * Tax rate override information.
     * @alias module:model/TaxOverride
     */
    constructor() { 
        
        TaxOverride.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>TaxOverride</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/TaxOverride} obj Optional instance to populate.
     * @return {module:model/TaxOverride} The populated <code>TaxOverride</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new TaxOverride();

            if (data.hasOwnProperty('loc')) {
                obj['loc'] = Location.constructFromObject(data['loc']);
            }
            if (data.hasOwnProperty('scp')) {
                obj['scp'] = ApiClient.convertToType(data['scp'], 'Number');
            }
            if (data.hasOwnProperty('tid')) {
                obj['tid'] = ApiClient.convertToType(data['tid'], 'Number');
            }
            if (data.hasOwnProperty('lvl')) {
                obj['lvl'] = ApiClient.convertToType(data['lvl'], 'Number');
            }
            if (data.hasOwnProperty('lvlExm')) {
                obj['lvlExm'] = ApiClient.convertToType(data['lvlExm'], 'Boolean');
            }
            if (data.hasOwnProperty('brkt')) {
                obj['brkt'] = ApiClient.convertToType(data['brkt'], [TaxBracket]);
            }
        }
        return obj;
    }


}

/**
 * @member {module:model/Location} loc
 */
TaxOverride.prototype['loc'] = undefined;

/**
 * Scope for override. 0 = Country, 1 = State, 2 = County, 3 = City.
 * @member {Number} scp
 */
TaxOverride.prototype['scp'] = undefined;

/**
 * Tax type ID.
 * @member {Number} tid
 */
TaxOverride.prototype['tid'] = undefined;

/**
 * Tax level ID. 0 = Federal, 1 = State, 2 = County, 3 = City.
 * @member {Number} lvl
 */
TaxOverride.prototype['lvl'] = undefined;

/**
 * Indicates if the tax can be exempted using level exemptions.
 * @member {Boolean} lvlExm
 */
TaxOverride.prototype['lvlExm'] = undefined;

/**
 * Tax rate/bracket information.
 * @member {Array.<module:model/TaxBracket>} brkt
 */
TaxOverride.prototype['brkt'] = undefined;






export default TaxOverride;

