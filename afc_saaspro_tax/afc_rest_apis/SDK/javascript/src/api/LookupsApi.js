/**
 * SaasPro
 * APIs to interface with communications tax engine.<br />The API requires Basic authentication.<br />Users with access to multiple clients must also set request header parameter for <code>client_id</code>.<br />Set <code>client_profile_id</code> to specify profile to be used for taxation.
 *
 * The version of the OpenAPI document: v2
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */


import ApiClient from "../ApiClient";
import PCodeLookupResult from '../model/PCodeLookupResult';
import ServiceInfo from '../model/ServiceInfo';
import TSPairData from '../model/TSPairData';
import TaxTypeData from '../model/TaxTypeData';

/**
* Lookups service.
* @module api/LookupsApi
* @version v2
*/
export default class LookupsApi {

    /**
    * Constructs a new LookupsApi. 
    * @alias module:api/LookupsApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instance} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }


    /**
     * Callback function to receive the result of the apiV2AfcLocationPcodeGet operation.
     * @callback module:api/LookupsApi~apiV2AfcLocationPcodeGetCallback
     * @param {String} error Error message, if any.
     * @param {module:model/PCodeLookupResult} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get location data associated with a PCode
     * Request will return all jurisdictions associated with the PCode
     * @param {Number} pcode 
     * @param {module:api/LookupsApi~apiV2AfcLocationPcodeGetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/PCodeLookupResult}
     */
    apiV2AfcLocationPcodeGet(pcode, callback) {
      let postBody = null;
      // verify the required parameter 'pcode' is set
      if (pcode === undefined || pcode === null) {
        throw new Error("Missing the required parameter 'pcode' when calling apiV2AfcLocationPcodeGet");
      }

      let pathParams = {
        'pcode': pcode
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['Basic'];
      let contentTypes = [];
      let accepts = ['text/plain', 'application/json', 'text/json'];
      let returnType = PCodeLookupResult;
      return this.apiClient.callApi(
        '/api/v2/afc/location/{pcode}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the apiV2AfcPrimaryPCodeGet operation.
     * @callback module:api/LookupsApi~apiV2AfcPrimaryPCodeGetCallback
     * @param {String} error Error message, if any.
     * @param {module:model/PCodeLookupResult} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get primary location data associated with a PCode
     * Request will return primary jurisdiction associated with the PCode
     * @param {Number} pCode 
     * @param {module:api/LookupsApi~apiV2AfcPrimaryPCodeGetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/PCodeLookupResult}
     */
    apiV2AfcPrimaryPCodeGet(pCode, callback) {
      let postBody = null;
      // verify the required parameter 'pCode' is set
      if (pCode === undefined || pCode === null) {
        throw new Error("Missing the required parameter 'pCode' when calling apiV2AfcPrimaryPCodeGet");
      }

      let pathParams = {
        'pCode': pCode
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['Basic'];
      let contentTypes = [];
      let accepts = ['text/plain', 'application/json', 'text/json'];
      let returnType = PCodeLookupResult;
      return this.apiClient.callApi(
        '/api/v2/afc/primary/{pCode}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the apiV2AfcServiceinfoGet operation.
     * @callback module:api/LookupsApi~apiV2AfcServiceinfoGetCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ServiceInfo} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Retrieves server time, service build version and engine version
     * @param {module:api/LookupsApi~apiV2AfcServiceinfoGetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ServiceInfo}
     */
    apiV2AfcServiceinfoGet(callback) {
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['Basic'];
      let contentTypes = [];
      let accepts = ['text/plain', 'application/json', 'text/json'];
      let returnType = ServiceInfo;
      return this.apiClient.callApi(
        '/api/v2/afc/serviceinfo', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the apiV2AfcTaxtypeTaxTypeGet operation.
     * @callback module:api/LookupsApi~apiV2AfcTaxtypeTaxTypeGetCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/TaxTypeData>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get the tax information (description and category) for a tax type ID
     * This method returns the description for the specified tax type ID. If tax type * is supplied it will return all tax types.
     * @param {String} taxType Tax type ID for the tax type.
     * @param {module:api/LookupsApi~apiV2AfcTaxtypeTaxTypeGetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/TaxTypeData>}
     */
    apiV2AfcTaxtypeTaxTypeGet(taxType, callback) {
      let postBody = null;
      // verify the required parameter 'taxType' is set
      if (taxType === undefined || taxType === null) {
        throw new Error("Missing the required parameter 'taxType' when calling apiV2AfcTaxtypeTaxTypeGet");
      }

      let pathParams = {
        'taxType': taxType
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['Basic'];
      let contentTypes = [];
      let accepts = ['text/plain', 'application/json', 'text/json'];
      let returnType = [TaxTypeData];
      return this.apiClient.callApi(
        '/api/v2/afc/taxtype/{taxType}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the apiV2AfcTspairsGet operation.
     * @callback module:api/LookupsApi~apiV2AfcTspairsGetCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/TSPairData>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get transaction/service pair information
     * This method returns the description for the transaction type, service type and the ts pairs.
     * @param {module:api/LookupsApi~apiV2AfcTspairsGetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/TSPairData>}
     */
    apiV2AfcTspairsGet(callback) {
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['Basic'];
      let contentTypes = [];
      let accepts = ['text/plain', 'application/json', 'text/json'];
      let returnType = [TSPairData];
      return this.apiClient.callApi(
        '/api/v2/afc/tspairs', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }


}
