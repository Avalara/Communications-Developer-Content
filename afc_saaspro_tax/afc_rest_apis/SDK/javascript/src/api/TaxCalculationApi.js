/**
 * SaasPro
 * APIs to interface with communications tax engine.<br />The API requires Basic authentication.<br />Users with access to multiple clients must also set request header parameter for <code>client_id</code>.<br />Set <code>client_profile_id</code> to specify profile to be used for taxation.<br /><br />Effective January 1st, 2022 all Avalara products will be enforcing TLS 1.2 server-side. Please ensure that your implementation sets a minimal of TLS 1.2 encryption when making web requests to Avalara APIs.
 *
 * The version of the OpenAPI document: v2
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */


import ApiClient from "../ApiClient";
import CalcTaxesRequest from '../model/CalcTaxesRequest';
import CalcTaxesResponse from '../model/CalcTaxesResponse';
import CommitRequest from '../model/CommitRequest';
import CommitResponse from '../model/CommitResponse';

/**
* TaxCalculation service.
* @module api/TaxCalculationApi
* @version v2
*/
export default class TaxCalculationApi {

    /**
    * Constructs a new TaxCalculationApi. 
    * @alias module:api/TaxCalculationApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instance} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }


    /**
     * Callback function to receive the result of the apiV2AfcCalcTaxesPost operation.
     * @callback module:api/TaxCalculationApi~apiV2AfcCalcTaxesPostCallback
     * @param {String} error Error message, if any.
     * @param {module:model/CalcTaxesResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Performs tax calculations on all invoices and line items within the request body.
     * @param {Object} opts Optional parameters
     * @param {module:model/CalcTaxesRequest} opts.calcTaxesRequest CalcTaxesRequest object containing invoices to process and data required               for performing tax calculations.
     * @param {module:api/TaxCalculationApi~apiV2AfcCalcTaxesPostCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/CalcTaxesResponse}
     */
    apiV2AfcCalcTaxesPost(opts, callback) {
      opts = opts || {};
      let postBody = opts['calcTaxesRequest'];

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['Basic'];
      let contentTypes = ['application/json-patch+json', 'application/json', 'text/json', 'application/_*+json'];
      let accepts = ['text/plain', 'application/json', 'text/json'];
      let returnType = CalcTaxesResponse;
      return this.apiClient.callApi(
        '/api/v2/afc/CalcTaxes', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the apiV2AfcCommitPost operation.
     * @callback module:api/TaxCalculationApi~apiV2AfcCommitPostCallback
     * @param {String} error Error message, if any.
     * @param {module:model/CommitResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Commits or un-commits a document code.
     * @param {Object} opts Optional parameters
     * @param {module:model/CommitRequest} opts.commitRequest CommitRequest object containing document code and optional field data to override in reports.
     * @param {module:api/TaxCalculationApi~apiV2AfcCommitPostCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/CommitResponse}
     */
    apiV2AfcCommitPost(opts, callback) {
      opts = opts || {};
      let postBody = opts['commitRequest'];

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['Basic'];
      let contentTypes = ['application/json-patch+json', 'application/json', 'text/json', 'application/_*+json'];
      let accepts = ['text/plain', 'application/json', 'text/json'];
      let returnType = CommitResponse;
      return this.apiClient.callApi(
        '/api/v2/afc/Commit', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }


}
