/**
 * SaasPro
 * APIs to interface with communications tax engine.<br />The API requires Basic authentication.<br />Users with access to multiple clients must also set request header parameter for <code>client_id</code>.<br />Set <code>client_profile_id</code> to specify profile to be used for taxation.
 *
 * The version of the OpenAPI document: v2
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */


import ApiClient from './ApiClient';
import Address from './model/Address';
import BillingPeriod from './model/BillingPeriod';
import BundleConfig from './model/BundleConfig';
import BundleItem from './model/BundleItem';
import CalcTaxesRequest from './model/CalcTaxesRequest';
import CalcTaxesResponse from './model/CalcTaxesResponse';
import CommitRequest from './model/CommitRequest';
import CommitResponse from './model/CommitResponse';
import CompanyData from './model/CompanyData';
import Configuration from './model/Configuration';
import Error from './model/Error';
import Exclusion from './model/Exclusion';
import ExclusionConfig from './model/ExclusionConfig';
import GeoBatchDownloadResponse from './model/GeoBatchDownloadResponse';
import GeoBatchLog from './model/GeoBatchLog';
import GeoBatchLogItem from './model/GeoBatchLogItem';
import GeoBatchStatus from './model/GeoBatchStatus';
import GeoBatchSubmitFileResponse from './model/GeoBatchSubmitFileResponse';
import GeocodeRequest from './model/GeocodeRequest';
import GeocodeResult from './model/GeocodeResult';
import InlineObject from './model/InlineObject';
import Invoice from './model/Invoice';
import InvoiceResult from './model/InvoiceResult';
import KeyValuePair from './model/KeyValuePair';
import LineItem from './model/LineItem';
import LineItemResult from './model/LineItemResult';
import Location from './model/Location';
import LocationItem from './model/LocationItem';
import NexusConfig from './model/NexusConfig';
import OverrideConfig from './model/OverrideConfig';
import PCodeLookupRequest from './model/PCodeLookupRequest';
import PCodeLookupResult from './model/PCodeLookupResult';
import ReportingInformation from './model/ReportingInformation';
import RequestConfig from './model/RequestConfig';
import SafeHarborOverride from './model/SafeHarborOverride';
import ServiceInfo from './model/ServiceInfo';
import SetTaxCalculationSettingRequest from './model/SetTaxCalculationSettingRequest';
import Status from './model/Status';
import SummarizedTax from './model/SummarizedTax';
import TSPairData from './model/TSPairData';
import Tax from './model/Tax';
import TaxBracket from './model/TaxBracket';
import TaxCalculationSettingTypes from './model/TaxCalculationSettingTypes';
import TaxCalculationSettingsResponse from './model/TaxCalculationSettingsResponse';
import TaxExemption from './model/TaxExemption';
import TaxOverride from './model/TaxOverride';
import TaxTypeData from './model/TaxTypeData';
import TrafficStudyOverride from './model/TrafficStudyOverride';
import VersionInfo from './model/VersionInfo';
import Warning from './model/Warning';
import CustomizationApi from './api/CustomizationApi';
import HealthCheckApi from './api/HealthCheckApi';
import JurisdictionDeterminationApi from './api/JurisdictionDeterminationApi';
import LookupsApi from './api/LookupsApi';
import TaxCalculationApi from './api/TaxCalculationApi';


/**
* APIs_to_interface_with_communications_tax_engine_br__The_API_requires_Basic_authentication_br__Users_with_access_to_multiple_clients_must_also_set_request_header_parameter_for_codeclient_id_code_br__Set_codeclient_profile_id_code_to_specify_profile_to_be_used_for_taxation_.<br>
* The <code>index</code> module provides access to constructors for all the classes which comprise the public API.
* <p>
* An AMD (recommended!) or CommonJS application will generally do something equivalent to the following:
* <pre>
* var SaasPro = require('index'); // See note below*.
* var xxxSvc = new SaasPro.XxxApi(); // Allocate the API class we're going to use.
* var yyyModel = new SaasPro.Yyy(); // Construct a model instance.
* yyyModel.someProperty = 'someValue';
* ...
* var zzz = xxxSvc.doSomething(yyyModel); // Invoke the service.
* ...
* </pre>
* <em>*NOTE: For a top-level AMD script, use require(['index'], function(){...})
* and put the application logic within the callback function.</em>
* </p>
* <p>
* A non-AMD browser application (discouraged) might do something like this:
* <pre>
* var xxxSvc = new SaasPro.XxxApi(); // Allocate the API class we're going to use.
* var yyy = new SaasPro.Yyy(); // Construct a model instance.
* yyyModel.someProperty = 'someValue';
* ...
* var zzz = xxxSvc.doSomething(yyyModel); // Invoke the service.
* ...
* </pre>
* </p>
* @module index
* @version v2
*/
export {
    /**
     * The ApiClient constructor.
     * @property {module:ApiClient}
     */
    ApiClient,

    /**
     * The Address model constructor.
     * @property {module:model/Address}
     */
    Address,

    /**
     * The BillingPeriod model constructor.
     * @property {module:model/BillingPeriod}
     */
    BillingPeriod,

    /**
     * The BundleConfig model constructor.
     * @property {module:model/BundleConfig}
     */
    BundleConfig,

    /**
     * The BundleItem model constructor.
     * @property {module:model/BundleItem}
     */
    BundleItem,

    /**
     * The CalcTaxesRequest model constructor.
     * @property {module:model/CalcTaxesRequest}
     */
    CalcTaxesRequest,

    /**
     * The CalcTaxesResponse model constructor.
     * @property {module:model/CalcTaxesResponse}
     */
    CalcTaxesResponse,

    /**
     * The CommitRequest model constructor.
     * @property {module:model/CommitRequest}
     */
    CommitRequest,

    /**
     * The CommitResponse model constructor.
     * @property {module:model/CommitResponse}
     */
    CommitResponse,

    /**
     * The CompanyData model constructor.
     * @property {module:model/CompanyData}
     */
    CompanyData,

    /**
     * The Configuration model constructor.
     * @property {module:model/Configuration}
     */
    Configuration,

    /**
     * The Error model constructor.
     * @property {module:model/Error}
     */
    Error,

    /**
     * The Exclusion model constructor.
     * @property {module:model/Exclusion}
     */
    Exclusion,

    /**
     * The ExclusionConfig model constructor.
     * @property {module:model/ExclusionConfig}
     */
    ExclusionConfig,

    /**
     * The GeoBatchDownloadResponse model constructor.
     * @property {module:model/GeoBatchDownloadResponse}
     */
    GeoBatchDownloadResponse,

    /**
     * The GeoBatchLog model constructor.
     * @property {module:model/GeoBatchLog}
     */
    GeoBatchLog,

    /**
     * The GeoBatchLogItem model constructor.
     * @property {module:model/GeoBatchLogItem}
     */
    GeoBatchLogItem,

    /**
     * The GeoBatchStatus model constructor.
     * @property {module:model/GeoBatchStatus}
     */
    GeoBatchStatus,

    /**
     * The GeoBatchSubmitFileResponse model constructor.
     * @property {module:model/GeoBatchSubmitFileResponse}
     */
    GeoBatchSubmitFileResponse,

    /**
     * The GeocodeRequest model constructor.
     * @property {module:model/GeocodeRequest}
     */
    GeocodeRequest,

    /**
     * The GeocodeResult model constructor.
     * @property {module:model/GeocodeResult}
     */
    GeocodeResult,

    /**
     * The InlineObject model constructor.
     * @property {module:model/InlineObject}
     */
    InlineObject,

    /**
     * The Invoice model constructor.
     * @property {module:model/Invoice}
     */
    Invoice,

    /**
     * The InvoiceResult model constructor.
     * @property {module:model/InvoiceResult}
     */
    InvoiceResult,

    /**
     * The KeyValuePair model constructor.
     * @property {module:model/KeyValuePair}
     */
    KeyValuePair,

    /**
     * The LineItem model constructor.
     * @property {module:model/LineItem}
     */
    LineItem,

    /**
     * The LineItemResult model constructor.
     * @property {module:model/LineItemResult}
     */
    LineItemResult,

    /**
     * The Location model constructor.
     * @property {module:model/Location}
     */
    Location,

    /**
     * The LocationItem model constructor.
     * @property {module:model/LocationItem}
     */
    LocationItem,

    /**
     * The NexusConfig model constructor.
     * @property {module:model/NexusConfig}
     */
    NexusConfig,

    /**
     * The OverrideConfig model constructor.
     * @property {module:model/OverrideConfig}
     */
    OverrideConfig,

    /**
     * The PCodeLookupRequest model constructor.
     * @property {module:model/PCodeLookupRequest}
     */
    PCodeLookupRequest,

    /**
     * The PCodeLookupResult model constructor.
     * @property {module:model/PCodeLookupResult}
     */
    PCodeLookupResult,

    /**
     * The ReportingInformation model constructor.
     * @property {module:model/ReportingInformation}
     */
    ReportingInformation,

    /**
     * The RequestConfig model constructor.
     * @property {module:model/RequestConfig}
     */
    RequestConfig,

    /**
     * The SafeHarborOverride model constructor.
     * @property {module:model/SafeHarborOverride}
     */
    SafeHarborOverride,

    /**
     * The ServiceInfo model constructor.
     * @property {module:model/ServiceInfo}
     */
    ServiceInfo,

    /**
     * The SetTaxCalculationSettingRequest model constructor.
     * @property {module:model/SetTaxCalculationSettingRequest}
     */
    SetTaxCalculationSettingRequest,

    /**
     * The Status model constructor.
     * @property {module:model/Status}
     */
    Status,

    /**
     * The SummarizedTax model constructor.
     * @property {module:model/SummarizedTax}
     */
    SummarizedTax,

    /**
     * The TSPairData model constructor.
     * @property {module:model/TSPairData}
     */
    TSPairData,

    /**
     * The Tax model constructor.
     * @property {module:model/Tax}
     */
    Tax,

    /**
     * The TaxBracket model constructor.
     * @property {module:model/TaxBracket}
     */
    TaxBracket,

    /**
     * The TaxCalculationSettingTypes model constructor.
     * @property {module:model/TaxCalculationSettingTypes}
     */
    TaxCalculationSettingTypes,

    /**
     * The TaxCalculationSettingsResponse model constructor.
     * @property {module:model/TaxCalculationSettingsResponse}
     */
    TaxCalculationSettingsResponse,

    /**
     * The TaxExemption model constructor.
     * @property {module:model/TaxExemption}
     */
    TaxExemption,

    /**
     * The TaxOverride model constructor.
     * @property {module:model/TaxOverride}
     */
    TaxOverride,

    /**
     * The TaxTypeData model constructor.
     * @property {module:model/TaxTypeData}
     */
    TaxTypeData,

    /**
     * The TrafficStudyOverride model constructor.
     * @property {module:model/TrafficStudyOverride}
     */
    TrafficStudyOverride,

    /**
     * The VersionInfo model constructor.
     * @property {module:model/VersionInfo}
     */
    VersionInfo,

    /**
     * The Warning model constructor.
     * @property {module:model/Warning}
     */
    Warning,

    /**
    * The CustomizationApi service constructor.
    * @property {module:api/CustomizationApi}
    */
    CustomizationApi,

    /**
    * The HealthCheckApi service constructor.
    * @property {module:api/HealthCheckApi}
    */
    HealthCheckApi,

    /**
    * The JurisdictionDeterminationApi service constructor.
    * @property {module:api/JurisdictionDeterminationApi}
    */
    JurisdictionDeterminationApi,

    /**
    * The LookupsApi service constructor.
    * @property {module:api/LookupsApi}
    */
    LookupsApi,

    /**
    * The TaxCalculationApi service constructor.
    * @property {module:api/TaxCalculationApi}
    */
    TaxCalculationApi
};
