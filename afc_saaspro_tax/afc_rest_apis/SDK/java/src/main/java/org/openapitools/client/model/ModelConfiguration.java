/*
 * SaasPro
 * APIs to interface with communications tax engine.<br />The API requires Basic authentication.<br />Users with access to multiple clients must also set request header parameter for <code>client_id</code>.<br />Set <code>client_profile_id</code> to specify profile to be used for taxation.
 *
 * The version of the OpenAPI document: v2
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import java.util.Arrays;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import io.swagger.annotations.ApiModel;
import io.swagger.annotations.ApiModelProperty;
import java.io.IOException;
import java.util.ArrayList;
import java.util.List;
import org.openapitools.client.model.TrafficStudyOverride;

/**
 * Settings associated with a client profile configuration  Maybe associated with 0 to many profiles
 */
@ApiModel(description = "Settings associated with a client profile configuration  Maybe associated with 0 to many profiles")
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2020-02-14T16:02:52.336-05:00[America/New_York]")
public class ModelConfiguration {
  public static final String SERIALIZED_NAME_TRAFFIC_STUDY_OVERRIDES = "TrafficStudyOverrides";
  @SerializedName(SERIALIZED_NAME_TRAFFIC_STUDY_OVERRIDES)
  private List<TrafficStudyOverride> trafficStudyOverrides = null;

  public static final String SERIALIZED_NAME_RETURN_NON_BILLABLE = "ReturnNonBillable";
  @SerializedName(SERIALIZED_NAME_RETURN_NON_BILLABLE)
  private Boolean returnNonBillable;

  public static final String SERIALIZED_NAME_TAX_ON_TAX_ALGORITHM = "TaxOnTaxAlgorithm";
  @SerializedName(SERIALIZED_NAME_TAX_ON_TAX_ALGORITHM)
  private Integer taxOnTaxAlgorithm;

  public static final String SERIALIZED_NAME_SELF_TAX_ALGORITHM = "SelfTaxAlgorithm";
  @SerializedName(SERIALIZED_NAME_SELF_TAX_ALGORITHM)
  private Integer selfTaxAlgorithm;


  public ModelConfiguration trafficStudyOverrides(List<TrafficStudyOverride> trafficStudyOverrides) {
    
    this.trafficStudyOverrides = trafficStudyOverrides;
    return this;
  }

  public ModelConfiguration addTrafficStudyOverridesItem(TrafficStudyOverride trafficStudyOverridesItem) {
    if (this.trafficStudyOverrides == null) {
      this.trafficStudyOverrides = new ArrayList<TrafficStudyOverride>();
    }
    this.trafficStudyOverrides.add(trafficStudyOverridesItem);
    return this;
  }

   /**
   * List of Traffic Study Overrides
   * @return trafficStudyOverrides
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "List of Traffic Study Overrides")

  public List<TrafficStudyOverride> getTrafficStudyOverrides() {
    return trafficStudyOverrides;
  }


  public void setTrafficStudyOverrides(List<TrafficStudyOverride> trafficStudyOverrides) {
    this.trafficStudyOverrides = trafficStudyOverrides;
  }


  public ModelConfiguration returnNonBillable(Boolean returnNonBillable) {
    
    this.returnNonBillable = returnNonBillable;
    return this;
  }

   /**
   * true : Return both non-billable and billable taxes in taxation response  false (default) : Return billable taxes only in taxation response  Default: false
   * @return returnNonBillable
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "true : Return both non-billable and billable taxes in taxation response  false (default) : Return billable taxes only in taxation response  Default: false")

  public Boolean getReturnNonBillable() {
    return returnNonBillable;
  }


  public void setReturnNonBillable(Boolean returnNonBillable) {
    this.returnNonBillable = returnNonBillable;
  }


  public ModelConfiguration taxOnTaxAlgorithm(Integer taxOnTaxAlgorithm) {
    
    this.taxOnTaxAlgorithm = taxOnTaxAlgorithm;
    return this;
  }

   /**
   * Tax-on-tax algorithm to be used in tax calculations  0 : Single pass  1 (default) : IterateOnTaxAmount  2 : IterateOnTaxableMeasure
   * @return taxOnTaxAlgorithm
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "Tax-on-tax algorithm to be used in tax calculations  0 : Single pass  1 (default) : IterateOnTaxAmount  2 : IterateOnTaxableMeasure")

  public Integer getTaxOnTaxAlgorithm() {
    return taxOnTaxAlgorithm;
  }


  public void setTaxOnTaxAlgorithm(Integer taxOnTaxAlgorithm) {
    this.taxOnTaxAlgorithm = taxOnTaxAlgorithm;
  }


  public ModelConfiguration selfTaxAlgorithm(Integer selfTaxAlgorithm) {
    
    this.selfTaxAlgorithm = selfTaxAlgorithm;
    return this;
  }

   /**
   * Self-tax algorithm to be used in tax calculations  0 (default) : Calculate tax on individual self-taxing taxes  1 : Calculate tax on aggregate of self-taxing taxes
   * @return selfTaxAlgorithm
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "Self-tax algorithm to be used in tax calculations  0 (default) : Calculate tax on individual self-taxing taxes  1 : Calculate tax on aggregate of self-taxing taxes")

  public Integer getSelfTaxAlgorithm() {
    return selfTaxAlgorithm;
  }


  public void setSelfTaxAlgorithm(Integer selfTaxAlgorithm) {
    this.selfTaxAlgorithm = selfTaxAlgorithm;
  }


  @Override
  public boolean equals(java.lang.Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    ModelConfiguration _configuration = (ModelConfiguration) o;
    return Objects.equals(this.trafficStudyOverrides, _configuration.trafficStudyOverrides) &&
        Objects.equals(this.returnNonBillable, _configuration.returnNonBillable) &&
        Objects.equals(this.taxOnTaxAlgorithm, _configuration.taxOnTaxAlgorithm) &&
        Objects.equals(this.selfTaxAlgorithm, _configuration.selfTaxAlgorithm);
  }

  @Override
  public int hashCode() {
    return Objects.hash(trafficStudyOverrides, returnNonBillable, taxOnTaxAlgorithm, selfTaxAlgorithm);
  }


  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class ModelConfiguration {\n");
    sb.append("    trafficStudyOverrides: ").append(toIndentedString(trafficStudyOverrides)).append("\n");
    sb.append("    returnNonBillable: ").append(toIndentedString(returnNonBillable)).append("\n");
    sb.append("    taxOnTaxAlgorithm: ").append(toIndentedString(taxOnTaxAlgorithm)).append("\n");
    sb.append("    selfTaxAlgorithm: ").append(toIndentedString(selfTaxAlgorithm)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(java.lang.Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

}

