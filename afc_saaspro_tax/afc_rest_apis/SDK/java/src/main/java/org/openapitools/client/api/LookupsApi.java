/*
 * SaasPro
 * APIs to interface with communications tax engine.<br />The API requires Basic authentication.<br />Users with access to multiple clients must also set request header parameter for <code>client_id</code>.<br />Set <code>client_profile_id</code> to specify profile to be used for taxation.<br /><br />Effective January 1st, 2022 all Avalara products will be enforcing TLS 1.2 server-side. Please ensure that your implementation sets a minimal of TLS 1.2 encryption when making web requests to Avalara APIs.
 *
 * The version of the OpenAPI document: v2
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.api;

import org.openapitools.client.ApiCallback;
import org.openapitools.client.ApiClient;
import org.openapitools.client.ApiException;
import org.openapitools.client.ApiResponse;
import org.openapitools.client.Configuration;
import org.openapitools.client.Pair;
import org.openapitools.client.ProgressRequestBody;
import org.openapitools.client.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import org.openapitools.client.model.PCodeLookupResult;
import org.openapitools.client.model.ServiceInfo;
import org.openapitools.client.model.TaxTypeData;
import org.openapitools.client.model.TsPairData;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class LookupsApi {
    private ApiClient localVarApiClient;

    public LookupsApi() {
        this(Configuration.getDefaultApiClient());
    }

    public LookupsApi(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return localVarApiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    /**
     * Build call for apiV2AfcLocationPCodeGet
     * @param pCode  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call apiV2AfcLocationPCodeGetCall(Integer pCode, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/api/v2/afc/location/{pCode}"
            .replaceAll("\\{" + "pCode" + "\\}", localVarApiClient.escapeString(pCode.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "text/plain", "application/json", "text/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] { "Basic" };
        return localVarApiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call apiV2AfcLocationPCodeGetValidateBeforeCall(Integer pCode, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'pCode' is set
        if (pCode == null) {
            throw new ApiException("Missing the required parameter 'pCode' when calling apiV2AfcLocationPCodeGet(Async)");
        }
        

        okhttp3.Call localVarCall = apiV2AfcLocationPCodeGetCall(pCode, _callback);
        return localVarCall;

    }

    /**
     * Get location data associated with a PCode
     * Request will return all jurisdictions associated with the PCode
     * @param pCode  (required)
     * @return PCodeLookupResult
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public PCodeLookupResult apiV2AfcLocationPCodeGet(Integer pCode) throws ApiException {
        ApiResponse<PCodeLookupResult> localVarResp = apiV2AfcLocationPCodeGetWithHttpInfo(pCode);
        return localVarResp.getData();
    }

    /**
     * Get location data associated with a PCode
     * Request will return all jurisdictions associated with the PCode
     * @param pCode  (required)
     * @return ApiResponse&lt;PCodeLookupResult&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<PCodeLookupResult> apiV2AfcLocationPCodeGetWithHttpInfo(Integer pCode) throws ApiException {
        okhttp3.Call localVarCall = apiV2AfcLocationPCodeGetValidateBeforeCall(pCode, null);
        Type localVarReturnType = new TypeToken<PCodeLookupResult>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Get location data associated with a PCode (asynchronously)
     * Request will return all jurisdictions associated with the PCode
     * @param pCode  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call apiV2AfcLocationPCodeGetAsync(Integer pCode, final ApiCallback<PCodeLookupResult> _callback) throws ApiException {

        okhttp3.Call localVarCall = apiV2AfcLocationPCodeGetValidateBeforeCall(pCode, _callback);
        Type localVarReturnType = new TypeToken<PCodeLookupResult>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for apiV2AfcPrimaryPCodeGet
     * @param pCode  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call apiV2AfcPrimaryPCodeGetCall(Integer pCode, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/api/v2/afc/primary/{pCode}"
            .replaceAll("\\{" + "pCode" + "\\}", localVarApiClient.escapeString(pCode.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "text/plain", "application/json", "text/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] { "Basic" };
        return localVarApiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call apiV2AfcPrimaryPCodeGetValidateBeforeCall(Integer pCode, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'pCode' is set
        if (pCode == null) {
            throw new ApiException("Missing the required parameter 'pCode' when calling apiV2AfcPrimaryPCodeGet(Async)");
        }
        

        okhttp3.Call localVarCall = apiV2AfcPrimaryPCodeGetCall(pCode, _callback);
        return localVarCall;

    }

    /**
     * Get primary location data associated with a PCode
     * Request will return primary jurisdiction associated with the PCode
     * @param pCode  (required)
     * @return PCodeLookupResult
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public PCodeLookupResult apiV2AfcPrimaryPCodeGet(Integer pCode) throws ApiException {
        ApiResponse<PCodeLookupResult> localVarResp = apiV2AfcPrimaryPCodeGetWithHttpInfo(pCode);
        return localVarResp.getData();
    }

    /**
     * Get primary location data associated with a PCode
     * Request will return primary jurisdiction associated with the PCode
     * @param pCode  (required)
     * @return ApiResponse&lt;PCodeLookupResult&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<PCodeLookupResult> apiV2AfcPrimaryPCodeGetWithHttpInfo(Integer pCode) throws ApiException {
        okhttp3.Call localVarCall = apiV2AfcPrimaryPCodeGetValidateBeforeCall(pCode, null);
        Type localVarReturnType = new TypeToken<PCodeLookupResult>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Get primary location data associated with a PCode (asynchronously)
     * Request will return primary jurisdiction associated with the PCode
     * @param pCode  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call apiV2AfcPrimaryPCodeGetAsync(Integer pCode, final ApiCallback<PCodeLookupResult> _callback) throws ApiException {

        okhttp3.Call localVarCall = apiV2AfcPrimaryPCodeGetValidateBeforeCall(pCode, _callback);
        Type localVarReturnType = new TypeToken<PCodeLookupResult>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for apiV2AfcServiceinfoGet
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call apiV2AfcServiceinfoGetCall(final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/api/v2/afc/serviceinfo";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "text/plain", "application/json", "text/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] { "Basic" };
        return localVarApiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call apiV2AfcServiceinfoGetValidateBeforeCall(final ApiCallback _callback) throws ApiException {
        

        okhttp3.Call localVarCall = apiV2AfcServiceinfoGetCall(_callback);
        return localVarCall;

    }

    /**
     * Retrieves server time, service build version and engine version
     * 
     * @return ServiceInfo
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public ServiceInfo apiV2AfcServiceinfoGet() throws ApiException {
        ApiResponse<ServiceInfo> localVarResp = apiV2AfcServiceinfoGetWithHttpInfo();
        return localVarResp.getData();
    }

    /**
     * Retrieves server time, service build version and engine version
     * 
     * @return ApiResponse&lt;ServiceInfo&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<ServiceInfo> apiV2AfcServiceinfoGetWithHttpInfo() throws ApiException {
        okhttp3.Call localVarCall = apiV2AfcServiceinfoGetValidateBeforeCall(null);
        Type localVarReturnType = new TypeToken<ServiceInfo>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Retrieves server time, service build version and engine version (asynchronously)
     * 
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call apiV2AfcServiceinfoGetAsync(final ApiCallback<ServiceInfo> _callback) throws ApiException {

        okhttp3.Call localVarCall = apiV2AfcServiceinfoGetValidateBeforeCall(_callback);
        Type localVarReturnType = new TypeToken<ServiceInfo>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for apiV2AfcTaxtypeTaxTypeGet
     * @param taxType Tax type ID for the tax type. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call apiV2AfcTaxtypeTaxTypeGetCall(String taxType, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/api/v2/afc/taxtype/{taxType}"
            .replaceAll("\\{" + "taxType" + "\\}", localVarApiClient.escapeString(taxType.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "text/plain", "application/json", "text/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] { "Basic" };
        return localVarApiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call apiV2AfcTaxtypeTaxTypeGetValidateBeforeCall(String taxType, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'taxType' is set
        if (taxType == null) {
            throw new ApiException("Missing the required parameter 'taxType' when calling apiV2AfcTaxtypeTaxTypeGet(Async)");
        }
        

        okhttp3.Call localVarCall = apiV2AfcTaxtypeTaxTypeGetCall(taxType, _callback);
        return localVarCall;

    }

    /**
     * Get the tax information (description and category) for a tax type ID
     * This method returns the description for the specified tax type ID. If tax type * is supplied it will return all tax types.
     * @param taxType Tax type ID for the tax type. (required)
     * @return List&lt;TaxTypeData&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public List<TaxTypeData> apiV2AfcTaxtypeTaxTypeGet(String taxType) throws ApiException {
        ApiResponse<List<TaxTypeData>> localVarResp = apiV2AfcTaxtypeTaxTypeGetWithHttpInfo(taxType);
        return localVarResp.getData();
    }

    /**
     * Get the tax information (description and category) for a tax type ID
     * This method returns the description for the specified tax type ID. If tax type * is supplied it will return all tax types.
     * @param taxType Tax type ID for the tax type. (required)
     * @return ApiResponse&lt;List&lt;TaxTypeData&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<List<TaxTypeData>> apiV2AfcTaxtypeTaxTypeGetWithHttpInfo(String taxType) throws ApiException {
        okhttp3.Call localVarCall = apiV2AfcTaxtypeTaxTypeGetValidateBeforeCall(taxType, null);
        Type localVarReturnType = new TypeToken<List<TaxTypeData>>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Get the tax information (description and category) for a tax type ID (asynchronously)
     * This method returns the description for the specified tax type ID. If tax type * is supplied it will return all tax types.
     * @param taxType Tax type ID for the tax type. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call apiV2AfcTaxtypeTaxTypeGetAsync(String taxType, final ApiCallback<List<TaxTypeData>> _callback) throws ApiException {

        okhttp3.Call localVarCall = apiV2AfcTaxtypeTaxTypeGetValidateBeforeCall(taxType, _callback);
        Type localVarReturnType = new TypeToken<List<TaxTypeData>>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for apiV2AfcTspairsGet
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call apiV2AfcTspairsGetCall(final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/api/v2/afc/tspairs";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "text/plain", "application/json", "text/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] { "Basic" };
        return localVarApiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call apiV2AfcTspairsGetValidateBeforeCall(final ApiCallback _callback) throws ApiException {
        

        okhttp3.Call localVarCall = apiV2AfcTspairsGetCall(_callback);
        return localVarCall;

    }

    /**
     * Get transaction/service pair information
     * This method returns the description for the transaction type, service type and the ts pairs.
     * @return List&lt;TsPairData&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public List<TsPairData> apiV2AfcTspairsGet() throws ApiException {
        ApiResponse<List<TsPairData>> localVarResp = apiV2AfcTspairsGetWithHttpInfo();
        return localVarResp.getData();
    }

    /**
     * Get transaction/service pair information
     * This method returns the description for the transaction type, service type and the ts pairs.
     * @return ApiResponse&lt;List&lt;TsPairData&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<List<TsPairData>> apiV2AfcTspairsGetWithHttpInfo() throws ApiException {
        okhttp3.Call localVarCall = apiV2AfcTspairsGetValidateBeforeCall(null);
        Type localVarReturnType = new TypeToken<List<TsPairData>>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Get transaction/service pair information (asynchronously)
     * This method returns the description for the transaction type, service type and the ts pairs.
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call apiV2AfcTspairsGetAsync(final ApiCallback<List<TsPairData>> _callback) throws ApiException {

        okhttp3.Call localVarCall = apiV2AfcTspairsGetValidateBeforeCall(_callback);
        Type localVarReturnType = new TypeToken<List<TsPairData>>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
}
