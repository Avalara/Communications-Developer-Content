/*
 * SaasPro
 * APIs to interface with communications tax engine.<br />The API requires Basic authentication.<br />Users with access to multiple clients must also set request header parameter for <code>client_id</code>.<br />Set <code>client_profile_id</code> to specify profile to be used for taxation.<br /><br />Effective January 1st, 2022 all Avalara products will be enforcing TLS 1.2 server-side. Please ensure that your implementation sets a minimal of TLS 1.2 encryption when making web requests to Avalara APIs.
 *
 * The version of the OpenAPI document: v2
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import java.util.Arrays;
import io.swagger.annotations.ApiModel;
import com.google.gson.annotations.SerializedName;

import java.io.IOException;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;

/**
 * Choice of tax calculation setting types.
 */
@JsonAdapter(ClientProfileConfigTypes.Adapter.class)
public enum ClientProfileConfigTypes {
  
  ALL("All"),
  
  CONFIGURATION("Configuration"),
  
  BUNDLE("Bundle"),
  
  EXCLUSION("Exclusion"),
  
  OVERRIDE("Override"),
  
  NEXUS("Nexus"),
  
  EXEMPTION("Exemption");

  private String value;

  ClientProfileConfigTypes(String value) {
    this.value = value;
  }

  public String getValue() {
    return value;
  }

  @Override
  public String toString() {
    return String.valueOf(value);
  }

  public static ClientProfileConfigTypes fromValue(String value) {
    for (ClientProfileConfigTypes b : ClientProfileConfigTypes.values()) {
      if (b.value.equals(value)) {
        return b;
      }
    }
    throw new IllegalArgumentException("Unexpected value '" + value + "'");
  }

  public static class Adapter extends TypeAdapter<ClientProfileConfigTypes> {
    @Override
    public void write(final JsonWriter jsonWriter, final ClientProfileConfigTypes enumeration) throws IOException {
      jsonWriter.value(enumeration.getValue());
    }

    @Override
    public ClientProfileConfigTypes read(final JsonReader jsonReader) throws IOException {
      String value = jsonReader.nextString();
      return ClientProfileConfigTypes.fromValue(value);
    }
  }
}

