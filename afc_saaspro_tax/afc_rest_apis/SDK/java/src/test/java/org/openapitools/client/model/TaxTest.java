/*
 * SaasPro
 * APIs to interface with communications tax engine.<br />The API requires Basic authentication.<br />Users with access to multiple clients must also set request header parameter for <code>client_id</code>.<br />Set <code>client_profile_id</code> to specify profile to be used for taxation.<br /><br />Effective January 1st, 2022 all Avalara products will be enforcing TLS 1.2 server-side. Please ensure that your implementation sets a minimal of TLS 1.2 encryption when making web requests to Avalara APIs.
 *
 * The version of the OpenAPI document: v2
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import io.swagger.annotations.ApiModel;
import io.swagger.annotations.ApiModelProperty;
import java.io.IOException;
import org.junit.Assert;
import org.junit.Ignore;
import org.junit.Test;


/**
 * Model tests for Tax
 */
public class TaxTest {
    private final Tax model = new Tax();

    /**
     * Model tests for Tax
     */
    @Test
    public void testTax() {
        // TODO: test Tax
    }

    /**
     * Test the property 'bill'
     */
    @Test
    public void billTest() {
        // TODO: test bill
    }

    /**
     * Test the property 'cmpl'
     */
    @Test
    public void cmplTest() {
        // TODO: test cmpl
    }

    /**
     * Test the property 'tm'
     */
    @Test
    public void tmTest() {
        // TODO: test tm
    }

    /**
     * Test the property 'calc'
     */
    @Test
    public void calcTest() {
        // TODO: test calc
    }

    /**
     * Test the property 'cat'
     */
    @Test
    public void catTest() {
        // TODO: test cat
    }

    /**
     * Test the property 'cid'
     */
    @Test
    public void cidTest() {
        // TODO: test cid
    }

    /**
     * Test the property 'name'
     */
    @Test
    public void nameTest() {
        // TODO: test name
    }

    /**
     * Test the property 'exm'
     */
    @Test
    public void exmTest() {
        // TODO: test exm
    }

    /**
     * Test the property 'lns'
     */
    @Test
    public void lnsTest() {
        // TODO: test lns
    }

    /**
     * Test the property 'min'
     */
    @Test
    public void minTest() {
        // TODO: test min
    }

    /**
     * Test the property 'pcd'
     */
    @Test
    public void pcdTest() {
        // TODO: test pcd
    }

    /**
     * Test the property 'taxpcd'
     */
    @Test
    public void taxpcdTest() {
        // TODO: test taxpcd
    }

    /**
     * Test the property 'rate'
     */
    @Test
    public void rateTest() {
        // TODO: test rate
    }

    /**
     * Test the property 'sur'
     */
    @Test
    public void surTest() {
        // TODO: test sur
    }

    /**
     * Test the property 'tax'
     */
    @Test
    public void taxTest() {
        // TODO: test tax
    }

    /**
     * Test the property 'lvl'
     */
    @Test
    public void lvlTest() {
        // TODO: test lvl
    }

    /**
     * Test the property 'tid'
     */
    @Test
    public void tidTest() {
        // TODO: test tid
    }

    /**
     * Test the property 'usexm'
     */
    @Test
    public void usexmTest() {
        // TODO: test usexm
    }

    /**
     * Test the property 'notax'
     */
    @Test
    public void notaxTest() {
        // TODO: test notax
    }

    /**
     * Test the property 'trans'
     */
    @Test
    public void transTest() {
        // TODO: test trans
    }

    /**
     * Test the property 'svc'
     */
    @Test
    public void svcTest() {
        // TODO: test svc
    }

    /**
     * Test the property 'chg'
     */
    @Test
    public void chgTest() {
        // TODO: test chg
    }

}
