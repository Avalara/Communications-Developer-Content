/*
 * SaasPro
 * APIs to interface with communications tax engine.<br />The API requires Basic authentication.<br />Users with access to multiple clients must also set request header parameter for <code>client_id</code>.<br />Set <code>client_profile_id</code> to specify profile to be used for taxation.
 *
 * The version of the OpenAPI document: v2
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.api;

import org.openapitools.client.ApiException;
import org.openapitools.client.model.PCodeLookupResult;
import org.openapitools.client.model.ServiceInfo;
import org.openapitools.client.model.TSPairData;
import org.openapitools.client.model.TaxTypeData;
import org.junit.Test;
import org.junit.Ignore;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * API tests for LookupsApi
 */
@Ignore
public class LookupsApiTest {

    private final LookupsApi api = new LookupsApi();

    
    /**
     * Get location data associated with a PCode
     *
     * Request will return all jurisdictions associated with the PCode
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void apiV2AfcLocationPcodeGetTest() throws ApiException {
        Integer pcode = null;
        PCodeLookupResult response = api.apiV2AfcLocationPcodeGet(pcode);

        // TODO: test validations
    }
    
    /**
     * Get primary location data associated with a PCode
     *
     * Request will return primary jurisdiction associated with the PCode
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void apiV2AfcPrimaryPCodeGetTest() throws ApiException {
        Integer pCode = null;
        PCodeLookupResult response = api.apiV2AfcPrimaryPCodeGet(pCode);

        // TODO: test validations
    }
    
    /**
     * Retrieves server time, service build version and engine version
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void apiV2AfcServiceinfoGetTest() throws ApiException {
        ServiceInfo response = api.apiV2AfcServiceinfoGet();

        // TODO: test validations
    }
    
    /**
     * Get the tax information (description and category) for a tax type ID
     *
     * This method returns the description for the specified tax type ID. If tax type * is supplied it will return all tax types.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void apiV2AfcTaxtypeTaxTypeGetTest() throws ApiException {
        String taxType = null;
        List<TaxTypeData> response = api.apiV2AfcTaxtypeTaxTypeGet(taxType);

        // TODO: test validations
    }
    
    /**
     * Get transaction/service pair information
     *
     * This method returns the description for the transaction type, service type and the ts pairs.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void apiV2AfcTspairsGetTest() throws ApiException {
        List<TSPairData> response = api.apiV2AfcTspairsGet();

        // TODO: test validations
    }
    
}
